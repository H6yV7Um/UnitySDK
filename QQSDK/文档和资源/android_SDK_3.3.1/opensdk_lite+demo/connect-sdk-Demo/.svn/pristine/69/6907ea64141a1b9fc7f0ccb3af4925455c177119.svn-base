package com.tencent.open.yyb;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.util.ArrayList;

import org.json.JSONException;
import org.json.JSONObject;

import com.tencent.connect.auth.QQToken;
import com.tencent.connect.common.Constants;
import com.tencent.connect.share.QQShare;
import com.tencent.connect.share.QzoneShare;
import com.tencent.tauth.IUiListener;
import com.tencent.tauth.Tencent;
import com.tencent.tauth.UiError;
import com.tencent.open.log.SLog;
import com.tencent.open.utils.SystemUtils;
import com.tencent.open.widget.OpenWebView;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Rect;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.Gravity;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.webkit.DownloadListener;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.LinearLayout;
import android.widget.ZoomButtonsController;
import android.widget.FrameLayout.LayoutParams;

public class AppbarActivity extends Activity implements OnClickListener {

    private static final String TAG = SLog.TAG + ".AppbarActivity";
	private static final String WEBVIEW_PATH = "/webview_cache";
	// 应用宝存储位置，有sd卡时应用程序的存储根目录
	public static final String MYAPP_CACHE_PATH = "/tencent/tassistant";

	private static final String UA_PREFIX = "qqdownloader/";
	//分享浮窗的高度，dp
	private static final int FLOATING_DIALOG_HEIGHT = 100;

	private OpenWebView mWebView;
	private LinearLayout mRootView;
	private TitleBar mTitleBar;
	private MoreFloatingDialog mFloatingDialog;

	private AppbarJsBridge jsBridge;

	private ShareModel model;
//	private IWXAPI wxapi;
	private Tencent tencent;
	private QQToken mToken;
	
	protected ProgressDialog mProgressDialog;
	
	private String appid;
	private String url;
	private int titlebarTop;
	

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);				
		
		appid = getIntent().getStringExtra("appid");
		url = getIntent().getStringExtra("url");
		
		SLog.v(TAG,
				"-->(AppbarActivity)onCreate : appid = " + appid + " url = " + url);

		mWebView = new OpenWebView(this);
		jsBridge = new AppbarJsBridge(this, mWebView);

		createViews();
		initViews();
	}

	@Override
	protected void onResume() {
		super.onResume();
	}

	@Override
	protected void onPause() {
		super.onPause();
		MoreFloatingDialog dialog = getFloatingDialg();
		if (dialog != null && dialog.isShowing()) {
			dialog.dismiss();
			return;
		}
	}

	@Override
	public void onBackPressed() {
		MoreFloatingDialog dialog = getFloatingDialg();
		if (dialog != null && dialog.isShowing()) {
			dialog.dismiss();
			return;
		}
		super.onBackPressed();
	}

	private void createViews() {
		LayoutParams params = new LayoutParams(
				ViewGroup.LayoutParams.MATCH_PARENT,
				ViewGroup.LayoutParams.MATCH_PARENT);
		mWebView.setLayoutParams(params);

		mRootView = new LinearLayout(this);
		params.gravity = Gravity.CENTER;
		mRootView.setLayoutParams(params);
		mRootView.setOrientation(LinearLayout.VERTICAL);

		mTitleBar = new TitleBar(this);
		mTitleBar.getBackBtn().setOnClickListener(this);
		mTitleBar.getSharBtn().setOnClickListener(this);

		mRootView.addView(mTitleBar);
		mRootView.addView(mWebView);

		setContentView(mRootView);
	}

	private void initViews() {
		WebSettings settings = mWebView.getSettings();
		settings.setBuiltInZoomControls(true);
		settings.setUserAgentString(settings.getUserAgentString() + "/"
				+ UA_PREFIX + jsBridge.getVersion() + "/sdk");
		settings.setJavaScriptEnabled(true);
		Class<?> clazz = settings.getClass();
		try {
			Method method = clazz.getMethod("setPluginsEnabled", boolean.class);
			if (method != null) {
				method.invoke(settings, true);
			}
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		try {
			Method method = clazz.getMethod("setDomStorageEnabled",
					boolean.class);
			if (method != null)
				method.invoke(settings, true);
		} catch (SecurityException e1) {
			e1.printStackTrace();
		} catch (NoSuchMethodException e1) {
		} catch (IllegalArgumentException e) {
		} catch (IllegalAccessException e) {
		} catch (InvocationTargetException e) {
		}

		settings.setAppCachePath(getWebViewCacheDir());
		settings.setDatabasePath(getWebViewCacheDir());
		settings.setDatabaseEnabled(true);
		settings.setAppCacheEnabled(true);

		if (supportWebViewFullScreen()) { // 全屏显示默认浏览器
			settings.setUseWideViewPort(true);
			if (Build.VERSION.SDK_INT >= 7) { // Android2.1+才支持。设置全屏
				try {
					Method method = clazz.getMethod("setLoadWithOverviewMode",
							boolean.class);
					method.invoke(settings, true);
				} catch (Exception e) {
				}
			}
			if (SystemUtils.isSupportMultiTouch()) { // 如果手机支持多点触摸，那么就屏蔽放大缩小栏
		        if (SystemUtils.getAndroidSDKVersion() < 11) {
		            try {
		                Field field = WebView.class.getDeclaredField("mZoomButtonsController");
		                field.setAccessible(true);
		                ZoomButtonsController mZoomButtonsController = new ZoomButtonsController(mWebView);
		                mZoomButtonsController.getZoomControls().setVisibility(View.GONE);
		                field.set(mWebView, mZoomButtonsController);
		            } catch (Exception e) {
		            }
		        } else {
		            try {
		                clazz = mWebView.getSettings().getClass();
		                Method method = clazz.getMethod("setDisplayZoomControls", boolean.class);
		                method.invoke(mWebView.getSettings(), false);
		            } catch (Exception e) {
		            }
		        }
		    }
		}

		mWebView.setWebViewClient(new MyWebViewClient());
		mWebView.setWebChromeClient(new MyWebChromeClient());
		mWebView.setDownloadListener(mDownloadListener);
		mWebView.loadUrl(url);
	}

	private static ArrayList<String> specialModel = new ArrayList<String>();
	static {
		specialModel.add("MT870");
		specialModel.add("XT910");
		specialModel.add("XT928");
		specialModel.add("MT917");
		specialModel.add("Lenovo A60");
	}

	/**
	 * 是否支持全屏显示 步步高(vivo不支持)。特定型号不支持
	 * 
	 * @return
	 */
	private boolean supportWebViewFullScreen() {
		final String model = android.os.Build.MODEL;
		return !model.contains("vivo") && !specialModel.contains(model);
	}
	
	private Tencent getTencent() {
		if (tencent == null) {
			tencent = Tencent.createInstance(appid, this);
		}
		
		return tencent;
	}
	
	private QQToken getToken() {
		if (mToken == null) {
			mToken = getTencent().getQQToken();
		}
		
		return mToken;
	}

	private String getWebViewCacheDir() {
		return getCommonPath(WEBVIEW_PATH);
	}

	private String getCommonPath(String path) {
		final String rootDir = getCommonRootDir();
		String fullPath = null;
		if (!TextUtils.isEmpty(path)) {
			fullPath = rootDir + path;
		} else {
			fullPath = rootDir;
		}
		return getPath(fullPath, false);
	}

	private MoreFloatingDialog getFloatingDialg() {
		if (mFloatingDialog == null) {
			mFloatingDialog = new MoreFloatingDialog(this);
			mFloatingDialog.setCanceledOnTouchOutside(true);

			mFloatingDialog.getQQItem().setOnClickListener(this);
			mFloatingDialog.getQzoneItem().setOnClickListener(this);
			//mFloatingDialog.getWXItem().setOnClickListener(this);
			//mFloatingDialog.getTimelineItem().setOnClickListener(this);
		}

		return mFloatingDialog;
	}

	private String getCommonRootDir() {
		String dirPath = null;

		// 判断SDCard是否存在并且是可用的
		if (isSDCardExistAndCanWrite()) {
			dirPath = Environment.getExternalStorageDirectory().getPath()
					+ MYAPP_CACHE_PATH;
		} else {
			File fileDir = getFilesDir();
			if (fileDir == null) {
				return "";
			}
			dirPath = fileDir.getAbsolutePath() + MYAPP_CACHE_PATH;
		}
		File file = new File(dirPath);
		if (!file.exists()) {
			file.mkdirs();
		}
		return file.getAbsolutePath();
	}

	private boolean isSDCardExistAndCanWrite() {
		boolean result = false;
		try {
			result = Environment.MEDIA_MOUNTED.equals(Environment
					.getExternalStorageState())
					&& Environment.getExternalStorageDirectory().canWrite();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return result;
	}

	private String getPath(String path, boolean nomedia) {
		File file = new File(path);
		if (!file.exists()) {
			file.mkdirs();
			if (nomedia) {
				File nomediaFile = new File(path + File.separator + ".nomedia");
				try {
					nomediaFile.createNewFile();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return file.getAbsolutePath();
	}

	private void setSupportZoom(boolean isEanable) {
		if (mWebView != null) {
			mWebView.getSettings().setSupportZoom(isEanable);
		}
	}
	
	private class MyWebChromeClient extends WebChromeClient {

		@Override
		public void onReceivedTitle(WebView view, String title) {
			//super.onReceivedTitle(view, title);
			mTitleBar.setTitle(title);
		}
		
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
        
		if (mWebView != null) {
			// fix bug: java.lang.IllegalArgumentException: Receiver not registered:
			// android.widget.ZoomButtonsController
			// http://blog.csdn.net/a345017062/article/details/6838449
			mWebView.removeAllViews();
			mWebView.setVisibility(View.GONE);
			mWebView.stopLoading();
			mWebView.clearHistory();
			mWebView.destroy();
		}
	}

	private class MyWebViewClient extends WebViewClient {
		@Override
		public void onPageFinished(WebView view, String url) {
			super.onPageFinished(view, url);
			setSupportZoom(true);
			jsBridge.ready();
		}

		@Override
		public void onPageStarted(WebView view, String url, Bitmap favicon) {
			super.onPageStarted(view, url, favicon);
			setSupportZoom(false);
			if (url.startsWith("http") || url.startsWith("https")) {// 页面加载完成后，做当前页面的安全校验
				// jsBridge.loadAuthorization(url);
			}
		}

		@Override
		public boolean shouldOverrideUrlLoading(WebView view, String url) {
			SLog.v(TAG,
					"-->(AppbarDialog)shouldOverrideUrlLoading : url = " + url);
			if (TextUtils.isEmpty(url)) {
				return false;
			}
			if (url.startsWith("http") || url.startsWith("https")) {
				return super.shouldOverrideUrlLoading(view, url);
			} else if (url.startsWith(AppbarJsBridge.JS_BRIDGE_SCHEME)) {
				jsBridge.invoke(url);
				return true;
			} else if (url.equals("about:blank;") || url.equals("about:blank")) {
				// 3.0及以下的webview调用jsb时会调用同时call起的空白页面，将这个页面屏蔽掉不出来
				return Build.VERSION.SDK_INT < 11;// Build.VERSION_CODES.HONEYCOMB
			} else {
				return false;
			}
		}
	}

	public void showFloatingDialog() {
		MoreFloatingDialog dialog = getFloatingDialg();
		dialog.show();

		Window win = dialog.getWindow();
		android.view.WindowManager.LayoutParams params = win.getAttributes();
		params.gravity = Gravity.TOP;

		params.y = getTitbarTop() + mTitleBar.getHeight();
		WindowManager m = dialog.getWindow().getWindowManager();
		Display d = m.getDefaultDisplay(); // 为获取屏幕宽、高
		params.height = dialog.dip2px(FLOATING_DIALOG_HEIGHT);
		params.width = (int) (d.getWidth() * 0.95) / 2; // 宽度设置为屏幕的0.95
		params.x = params.width / 2;
		
		SLog.d(TAG,
				"-->(AppbarDialog)showFloatingDialog : params.x = " + params.x);
		win.setAttributes(params);
	}
	
	private int getTitbarTop() {
		Rect rect = new Rect();
        getWindow().getDecorView().getWindowVisibleDisplayFrame(rect);
        DisplayMetrics dm = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(dm);
        
        titlebarTop = dm.heightPixels - rect.height();
        return titlebarTop;
	}

	@Override
	public void onClick(View v) {
		MoreFloatingDialog dialog = getFloatingDialg();
		if (v == mTitleBar.getSharBtn()) {
			jsBridge.clickCallback();
		} else if (v == dialog.getQQItem()) {
			shareToQQ();
		} else if (v == dialog.getQzoneItem()) {
			shareToQzone();
		} else if (v == dialog.getWXItem()) {
			shareToWX();
		} else if (v == dialog.getTimelineItem()) {
			shareToTimeline();
		} else if (v == mTitleBar.getBackBtn()) {
			finish();
		}
	}

	public void login() {
		SLog.d(TAG, "-->login : activity~~~");
		Tencent tencent = getTencent();
		tencent.login(this, "all", new IUiListener() {
			
			@Override
			public void onError(UiError e) {
				SLog.d(TAG, "-->(AppbarJsBridge)openLoginActivity onError" + e.errorMessage);
				jsBridge.responseFail(AppbarJsBridge.CALLBACK_LOGIN, 0, null, AppbarJsBridge.AUTHORIZE_FAIL);
			}
			
			@Override
			public void onComplete(Object response) {
				SLog.d(TAG, "-->(AppbarJsBridge)openLoginActivity onComplete");
					JSONObject obj = (JSONObject) response;
					int ret = obj.optInt("ret", -1);
					if (ret != 0) {
						jsBridge.responseFail(AppbarJsBridge.CALLBACK_LOGIN, 0, null, AppbarJsBridge.AUTHORIZE_FAIL);
						return;
					}
					String openid = null;
					String accesstoken = null;
					String appid = null;
					String expiresin = null;
					try {
						openid = obj.getString("openid");
						accesstoken = obj.getString("access_token");
						expiresin = obj.getString("expires_in");
						appid = getToken().getAppId();
					} catch (JSONException e) {
						jsBridge.responseFail(AppbarJsBridge.CALLBACK_LOGIN, 0, null, AppbarJsBridge.AUTHORIZE_FAIL);
						SLog.d(TAG, "-->(AppbarJsBridge)openLoginActivity onComplete: get keys failed.");
						return;
					}
					//同步一下cookie
					AppbarUtil.synCookies(AppbarActivity.this, mWebView.getUrl(), openid, accesstoken, appid);
					JSONObject callback = new JSONObject();
					try {
						callback.put("logintype", "SSO");
						callback.put("openid", openid);
						callback.put("accesstoken", accesstoken);
					} catch (JSONException e) {
						jsBridge.responseFail(AppbarJsBridge.CALLBACK_LOGIN, 0, null, AppbarJsBridge.AUTHORIZE_FAIL);
						SLog.d(TAG, "-->(AppbarJsBridge)openLoginActivity onComplete: put keys callback failed.");
						return;
					}
					jsBridge.response(AppbarJsBridge.CALLBACK_LOGIN, 0, null, callback.toString());
					
					/*
					 * 返回登录信息, add by axewang
					 */
					Intent intent = new Intent();
					intent.putExtra(Constants.LOGIN_INFO, obj.toString());
					setResult(Constants.ACTIVITY_OK, intent);
			}
			
			@Override
			public void onCancel() {
				SLog.d(TAG, "-->(AppbarJsBridge)openLoginActivity onCancel");
				jsBridge.responseFail(AppbarJsBridge.CALLBACK_LOGIN, 0, null, AppbarJsBridge.Code_None);
			}
		});
	}

	public void shareToQQ() {
		final QQToken token = getToken();
		if (token == null) {
			return;
		}
		QQShare qqShare = new QQShare(this, token);
		Bundle params = new Bundle();
		params.putString(QQShare.SHARE_TO_QQ_TITLE, model.mTitle);
		params.putString(QQShare.SHARE_TO_QQ_TARGET_URL, model.mTargetUrl);
		params.putString(QQShare.SHARE_TO_QQ_SUMMARY, model.mDescription);
		params.putString(QQShare.SHARE_TO_QQ_IMAGE_URL, model.mIconUrl);
		SLog.v(TAG, "-->(AppbarActivity)shareToQQ : model.mTitle = " + model.mTitle);
		SLog.v(TAG, "-->(AppbarActivity)shareToQQ : model.mTargetUrl = " + model.mTargetUrl);
		SLog.v(TAG, "-->(AppbarActivity)shareToQQ : model.mDescription = " + model.mDescription);
		SLog.v(TAG, "-->(AppbarActivity)shareToQQ : model.mIconUrl = " + model.mIconUrl);
		qqShare.shareToQQ(this, params, new IUiListener() {
			
			@Override
			public void onError(UiError e) {
				SLog.d(TAG, "-->(AppbarActivity)shareToQQ onError" + e.errorMessage);
				jsBridge.responseShareFail(AppbarJsBridge.SHARE_QQ);
			}
			
			@Override
			public void onComplete(Object response) {
				SLog.d(TAG, "-->(AppbarActivity)shareToQQ onComplete");
				jsBridge.responseShare(AppbarJsBridge.SHARE_QQ);
				AppbarUtil.reportForVia(token.getAppId(), "400", "SDK.APPBAR.HOME.SHARE.QQ");
			}
			
			@Override
			public void onCancel() {
				SLog.d(TAG, "-->(AppbarActivity)shareToQQ onCancel");
				jsBridge.responseShareFail(AppbarJsBridge.SHARE_QQ);
			}
		});
		AppbarUtil.reportForVia(token.getAppId(), "200", "SDK.APPBAR.HOME.SHARE.QQ");
	}

	public void shareToQzone() {
		final QQToken token = getToken();
		if (token == null) {
			return;
		}
		QzoneShare qzoneShare = new QzoneShare(this, token);
		Bundle params = new Bundle();
		params.putInt(QzoneShare.SHARE_TO_QZONE_KEY_TYPE,
				QzoneShare.SHARE_TO_QZONE_TYPE_IMAGE_TEXT);
		params.putString(QzoneShare.SHARE_TO_QQ_TITLE, model.mTitle);
		params.putString(QzoneShare.SHARE_TO_QQ_SUMMARY, model.mDescription);
		params.putString(QzoneShare.SHARE_TO_QQ_TARGET_URL, model.mTargetUrl);
		ArrayList<String> imageUrls = new ArrayList<String>();
		SLog.v(TAG, "-->shareToQzone : mIconUrl = " + model.mIconUrl);
		imageUrls.add(model.mIconUrl);
		params.putStringArrayList(QzoneShare.SHARE_TO_QQ_IMAGE_URL, imageUrls);
		qzoneShare.shareToQzone(this, params, new IUiListener() {
			
			@Override
			public void onError(UiError e) {
				SLog.d(TAG, "-->(AppbarActivity)shareToQzone onError" + e.errorMessage);
				jsBridge.responseShareFail(AppbarJsBridge.SHARE_QZ);
			}
			
			@Override
			public void onComplete(Object response) {
				SLog.d(TAG, "-->(AppbarActivity)shareToQzone onComplete");
				jsBridge.responseShare(AppbarJsBridge.SHARE_QZ);
				AppbarUtil.reportForVia(token.getAppId(), "400", "SDK.APPBAR.HOME.SHARE.QZ");
			}
			
			@Override
			public void onCancel() {
				SLog.d(TAG, "-->(AppbarActivity)shareToQzone onCancel");
				jsBridge.responseShareFail(AppbarJsBridge.SHARE_QZ);
			}
		});
		AppbarUtil.reportForVia(token.getAppId(), "200", "SDK.APPBAR.HOME.SHARE.QZ");
	}

	public void shareToWX() {
		shareToWX(false);
	}

	public void shareToTimeline() {
		shareToWX(true);
	}

	private void shareToWX(final boolean isTimeline) {
		SLog.v(TAG, "-->shareToWX : wx_appid = " + AppbarAgent.wx_appid);
		//if (wxapi == null) {
		//	wxapi = WXAPIFactory.createWXAPI(this, AppbarAgent.wx_appid, isTimeline);
		//	wxapi.registerApp(AppbarAgent.wx_appid);
		//}

		if (!TextUtils.isEmpty(model.mIconUrl)) {
			showProgressDialog(this, "", "");
			new ImageDownloadTask(new ImageDownloadLitener() {

				@Override
				public void onImageDownloaded(byte[] result) {
					//WnsClientLog.d(Const.Debug.OpenSDK_TAG, "-->onImageDownloaded : result = " + result);
					mProgressDialog.dismiss();
//					WXWebpageObject webpage = new WXWebpageObject();
//					webpage.webpageUrl = model.mTargetUrl;
//					final WXMediaMessage msg = new WXMediaMessage(webpage);
//					msg.title = model.mTitle;
//					msg.description = model.mDescription;
//					if (result == null) {
//						// result =
//						// BitmapFactory.decodeResource(ctx.getResources(),
//						// R.drawable.ic_launcher);
//					}
//					msg.thumbData = result;
//					SendMessageToWX.Req req = new SendMessageToWX.Req();
//					req.transaction = buildTransaction("webpage");
//					req.message = msg;
//					req.scene = isTimeline ? SendMessageToWX.Req.WXSceneTimeline
//							: SendMessageToWX.Req.WXSceneSession;
//					wxapi.sendReq(req);
				}
			}).execute(model.mIconUrl);
		}
	}
	
	public void setShareVisibility(boolean visible) {
		mTitleBar.getSharBtn().setVisibility(visible ? View.VISIBLE : View.INVISIBLE);
	}
	
	public void setAppbarTitle(String title) {
		mTitleBar.setTitle(title);
	}

	public void setShareModel(ShareModel model) {
		this.model = model;
	}

	private String buildTransaction(final String type) {
		return (type == null) ? String.valueOf(System.currentTimeMillis())
				: type + System.currentTimeMillis();
	}
	
	protected void showProgressDialog(Context context, String title,
			String message) {
		if (TextUtils.isEmpty(title)) {
			title = "请稍候";
		}
		if (TextUtils.isEmpty(message)) {
			message = "正在加载...";
		}
		mProgressDialog = ProgressDialog.show(context, title, message);
		mProgressDialog.setCancelable(true);
	}

	private static interface ImageDownloadLitener {
		public void onImageDownloaded(byte[] result);
	}

	private static class ImageDownloadTask extends
			AsyncTask<String, Void, byte[]> {
		private ImageDownloadLitener listener;

		public ImageDownloadTask(ImageDownloadLitener listener) {
			this.listener = listener;
		}

		@Override
		protected byte[] doInBackground(String... params) {
			URL url = null;
			try {
				url = new URL(params[0]);
			} catch (MalformedURLException e1) {
				e1.printStackTrace();
				return null;
			}
			HttpURLConnection conn = null;
			try {
				conn = (HttpURLConnection) url.openConnection();
			} catch (IOException e) {
				e.printStackTrace();
				return null;
			}
			conn.setConnectTimeout(5 * 1000);
			try {
				conn.setRequestMethod("GET");
			} catch (ProtocolException e) {
				e.printStackTrace();
				return null;
			}
			InputStream inStream = null;
			try {
				inStream = conn.getInputStream();
			} catch (IOException e) {
				e.printStackTrace();
				return null;
			}
			try {
				if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
					ByteArrayOutputStream outStream = new ByteArrayOutputStream();
					byte[] buffer = new byte[1024];
					int len = 0;
					while ((len = inStream.read(buffer)) != -1) {
						outStream.write(buffer, 0, len);
					}
					outStream.close();
					inStream.close();
					return outStream.toByteArray();
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return null;
		}

		@Override
		protected void onPostExecute(byte[] result) {
			super.onPostExecute(result);
			listener.onImageDownloaded(result);
		}

	}
			
	private final DownloadListener mDownloadListener = new DownloadListener() {
		
		@Override
		public void onDownloadStart(String url, String userAgent,
				String contentDisposition, String mimetype, long contentLength) {
			SLog.v(TAG, "-->(AppbarActivity)onDownloadStart : url = " + url);
			Uri uri = Uri.parse(url);
			
			Intent intent = new Intent(Intent.ACTION_VIEW, uri);
			try {
				startActivity(intent);
			} catch(Exception e) {
				SLog.d(TAG, "-->(AppbarActivity)onDownloadStart : activity aciton_view not found.");
			}
			QQToken token = getToken();
			if (token != null) {
				AppbarUtil.reportForVia(token.getAppId(), "200", "SDK.APPBAR.HOME ACTION");
			}
		}
	};

}
