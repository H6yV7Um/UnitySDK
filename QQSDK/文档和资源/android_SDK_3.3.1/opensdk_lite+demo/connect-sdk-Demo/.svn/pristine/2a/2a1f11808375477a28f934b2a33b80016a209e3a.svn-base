#include <jni.h>
#include <stdio.h>
#include <android/log.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <malloc.h>
#include <stdlib.h>
#include "com_tencent_open_web_security_JniInterface.h"
#include "md5c.h"

#define LOG_TAG "OpenSDK_SO"
#define LOGD(fmt, args...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, fmt, ##args)

#define MAX_KEY_LEN       16  // 0~~~15
typedef struct _PWDData {
	char* szBuffer;
	int length;

} PWDData, *PPWDData;

PPWDData m_pPWDData;

JNIEXPORT jboolean JNICALL Java_com_tencent_open_web_security_JniInterface_clearAllPWD(
		JNIEnv *env, jclass obj) {

//	LOGD("clearAllPWD");
	if (m_pPWDData == NULL) {
		return false;
	}
	if (m_pPWDData->szBuffer == NULL) {
		return false;
	}
	memset(m_pPWDData->szBuffer, 0, MAX_KEY_LEN + 1);
	return true;

}

JNIEXPORT jstring JNICALL Java_com_tencent_open_web_security_JniInterface_getPWDKeyToMD5(
		JNIEnv *env, jclass obj, jstring strKey) {

	if (m_pPWDData == NULL) {
		return NULL;
	}
	if (m_pPWDData->szBuffer == NULL) {
		return NULL;
	}
	m_pPWDData->length = strlen(m_pPWDData->szBuffer);
	if (m_pPWDData->length < 1 || m_pPWDData->length > MAX_KEY_LEN) {
		return NULL;
	}

	MD5_CTX context = { 0 };
	MD5Init(&context);
	MD5Update(&context, (unsigned char *) m_pPWDData->szBuffer,
			strlen(m_pPWDData->szBuffer));
	unsigned char dest[16] = { 0 };
	MD5Final(dest, &context);

	int i;
	char destination[33] = { 0 };
	for (i = 0; i < 16; i++) {
		sprintf(destination, "%s%02x", destination, dest[i]);
	}
	return env->NewStringUTF(destination);

}

JNIEXPORT jboolean JNICALL Java_com_tencent_open_web_security_JniInterface_BackSpaceChar(
		JNIEnv *env, jclass obj, jboolean flag, jint pos) {

	if (!flag) {
		return false;
	}
	if (m_pPWDData == NULL) {
		return false;
	}
	if (m_pPWDData->szBuffer == NULL) {
		return false;
	}
	memset((m_pPWDData->szBuffer + pos), 0, MAX_KEY_LEN + 1 - pos);
//	LOGD("JniInterface_BackSpaceChar: pos= %d, m_pPWDData->szBuffer= %s",
//			pos, m_pPWDData->szBuffer);

	return true;
}

JNIEXPORT jboolean JNICALL Java_com_tencent_open_web_security_JniInterface_insetTextToArray(
		JNIEnv *env, jclass obj, jint pos, jstring strKey, jint len) {

	int iLen;
	const char* szSign;
	if (m_pPWDData == NULL) {
		return false;
	}
	if (m_pPWDData->szBuffer == NULL) {
		return false;
	}

	//注意：上层传下来的pos是输入后光标的位置，输入第一个字符后，光标位置为1
	pos -= 1;
	if(pos < 0) {
		pos = 0;
	}
	
	/**
	 * 当前光标位置为O， 清空密码buffer, 重新开始接受输入
	 */
	if (pos == 0) {
		memset(m_pPWDData->szBuffer, 0, MAX_KEY_LEN + 1);
	}

	szSign = env->GetStringUTFChars(strKey, NULL);

	/*
	 * 这里判断是单字符输入，还是多字符输入
	 */
	iLen = strlen(szSign);
	if (iLen == 1) {
		/**
		 * 单字符输入， 这里直接赋值就行
		 */
		m_pPWDData->szBuffer[pos] = *szSign;
//		LOGD("JniInterface_insetTextToArray pos: %d", pos);
//		LOGD("m_pPWDData->szBuffer: %s", m_pPWDData->szBuffer);
//		LOGD("m_pPWDData->szBuffer size: %d", strlen(m_pPWDData->szBuffer));

	}
	if (iLen > 1) {
		/**
		 * 多字符输入
		 */
		if (pos + 1 + iLen <= MAX_KEY_LEN) // 输入后没有超出密码的最大输入长度
		{
			memcpy((m_pPWDData->szBuffer + pos), szSign, strlen(szSign));
//			LOGD("pos + 1 + iLen <= 16 m_pPWDData->szBuffer: %s",
//					m_pPWDData->szBuffer);
//			LOGD("pos + 1 + iLen <= 16 m_pPWDData->szBuffer size: %d",
//					strlen(m_pPWDData->szBuffer));
		} else // 输入后超出了密码最大输入长度
		{
//			LOGD("pos + 1 + iLen > 16 JniInterface_insetTextToArray pos: %d",
//					pos);
			memcpy((m_pPWDData->szBuffer + pos), szSign, (MAX_KEY_LEN - pos));
//			LOGD("pos + 1 + iLen > 16 m_pPWDData->szBuffer: %s",
//					m_pPWDData->szBuffer);
		}
	}

	env->ReleaseStringUTFChars(strKey, szSign);

	return true;

}

jint JNI_OnLoad(JavaVM* jvm, void* reserved) {
	//check JNI version

	jint result = JNI_ERR;
	JNIEnv* env = NULL;
	if (jvm->GetEnv((void**) &env, JNI_VERSION_1_6) == JNI_OK) {
		result = JNI_VERSION_1_6;
	} else if (jvm->GetEnv((void**) &env, JNI_VERSION_1_4) == JNI_OK) {
		result = JNI_VERSION_1_4;
	} else if (jvm->GetEnv((void**) &env, JNI_VERSION_1_2) == JNI_OK) {
		result = JNI_VERSION_1_2;
	} else if (jvm->GetEnv((void**) &env, JNI_VERSION_1_1) == JNI_OK) {
		result = JNI_VERSION_1_1;
	}

	if (result != JNI_ERR) {
		/**
		 * 初始化全局变量
		 */
		LOGD("JNI_OnLoad\n");
		// 初始化
		m_pPWDData = new PWDData;
		m_pPWDData->length = 0;
		m_pPWDData->szBuffer = NULL;

		m_pPWDData->szBuffer = (char *) malloc(MAX_KEY_LEN + 1);
		memset(m_pPWDData->szBuffer, 0, MAX_KEY_LEN + 1);
	}

	return result;

}

void JNI_OnUnload(JavaVM* jvm, void* reserved) {

	if (m_pPWDData->szBuffer) {
		free(m_pPWDData->szBuffer);
		m_pPWDData->szBuffer = NULL;
	}
	if (m_pPWDData) {
		delete[] m_pPWDData;
	}

}

