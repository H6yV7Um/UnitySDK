package com.tencent.connect.share;

import java.io.File;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Set;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Bundle;
import android.os.SystemClock;
import android.text.TextUtils;
import android.util.Base64;

import com.tencent.connect.auth.QQToken;
import com.tencent.connect.common.BaseApi;
import com.tencent.connect.common.Constants;
import com.tencent.connect.common.UIListenerManager;
import com.tencent.connect.mta.TencentStat;
import com.tencent.tauth.IUiListener;
import com.tencent.tauth.UiError;
import com.tencent.open.TDialog;
import com.tencent.open.log.SLog;
import com.tencent.open.report.OpenSdkStatic;
import com.tencent.open.utils.Global;
import com.tencent.open.utils.SystemUtils;
import com.tencent.open.utils.Util;

import org.json.JSONObject;

public class QzonePublish extends BaseApi {

    private static final String TAG = SLog.TAG + ".QzonePublish";

    private static final String PUBLISH_QZONE_SCHEME_URL = "mqqapi://qzone/publish?src_type=app&version=1&file_type=news";

    public static final String PUBLISH_TO_QZONE_KEY_TYPE = "req_type";
    /**
     * 支持发表说说、传照片、段视频等，发表说说和传照片取决于照片的张数，<=9张为带图说说,>9张为传照片，这个在qzone控制
     */
    public static final int PUBLISH_TO_QZONE_TYPE_PUBLISHMOOD = 3; //发表说说
    public static final int PUBLISH_TO_QZONE_TYPE_PUBLISHVIDEO = 4; //短视频


    public static final String PUBLISH_TO_QZONE_IMAGE_URL = "imageUrl";
    public static final String PUBLISH_TO_QZONE_SUMMARY = "summary";
    public static final String PUBLISH_TO_QZONE_VIDEO_PATH = "videoPath";
    public static final String PUBLISH_TO_QZONE_VIDEO_DURATION = "videoDuration";
    public static final String PUBLISH_TO_QZONE_VIDEO_SIZE = "videoSize";
    public static final String PUBLISH_TO_QZONE_APP_NAME = "appName";
    public static final String HULIAN_EXTRA_SCENE = "hulian_extra_scene";
    public static final String HULIAN_CALL_BACK = "hulian_call_back";
    public static final String PUBLISH_TO_QZONE_EXTMAP = "extMap";



    public QzonePublish(Context context, QQToken token) {
        super(token);
    }

    public void publishToQzone(final Activity activity, final Bundle params,
                               final IUiListener listener) {
        SLog.i(TAG, "publishToQzone() -- start");

        if (params == null) {
            listener.onError(new UiError(Constants.ERROR_UNKNOWN,
                    Constants.MSG_PARAM_NULL_ERROR, null));
            SLog.e(TAG, "-->publishToQzone, params is null");
            OpenSdkStatic.getInstance().reportHaboCgi(1, "SHARE_CHECK_SDK", Constants.DEFAULT_UIN, mToken.getAppId(),
                    String.valueOf(4), SystemClock.elapsedRealtime(), 0, 1, Constants.MSG_PARAM_NULL_ERROR);
            return;
        }

        //只支持5.9.5及其以上版本
        if (!Util.isSupportPushToQZone(activity)) {
            listener.onError(new UiError(Constants.ERROR_QQVERSION_LOW, Constants.MSG_PARAM_VERSION_TOO_LOW, null));
            SLog.e(TAG, "-->publishToQzone, this is not support below qq 5.9.5");
            OpenSdkStatic.getInstance().reportHaboCgi(1, "SHARE_CHECK_SDK", Constants.DEFAULT_UIN,
                    mToken.getAppId(), String.valueOf(4), SystemClock.elapsedRealtime(), 0, 1,
                    "publicToQzone, this is not support below qq 5.9.5");
            // 下载手Q最新版本
            new TDialog(activity, "", getCommonDownloadQQUrl(""), null, mToken).show();
            return;
        }


        String appName = Util.getApplicationLable(activity);
        if (appName == null) {
            // appName理论上不可能为null, 所以这个逻辑几乎没有用处.
            appName = params.getString(PUBLISH_TO_QZONE_APP_NAME);
        } else {
            if (appName.length() > 20) {
                appName = appName.substring(0, 20) + "...";
            }
        }
        if (!TextUtils.isEmpty(appName)) {
            params.putString(PUBLISH_TO_QZONE_APP_NAME, appName);
        }


        // 根据shareType来处理参数
        int shareType = params.getInt(PUBLISH_TO_QZONE_KEY_TYPE);

        if (shareType == PUBLISH_TO_QZONE_TYPE_PUBLISHMOOD) {

            ArrayList<String> imageUrlArrayList = params
                    .getStringArrayList(PUBLISH_TO_QZONE_IMAGE_URL);

            if (imageUrlArrayList != null && imageUrlArrayList.size() > 0) {
                for (int i = 0; i < imageUrlArrayList.size(); i++) {
                    String imageUrl = imageUrlArrayList.get(i);
                    if (/*!Util.isValidUrl(imageUrl) && */!Util.fileExists(imageUrl)) {
                        // 过滤非本地图片
                        imageUrlArrayList.remove(i);
                        i--;
                    }
                }
                params.putStringArrayList(QQShare.SHARE_TO_QQ_IMAGE_URL, imageUrlArrayList);
            }

            doPublishToQzone(activity, params, listener);
            SLog.i(TAG, "publishToQzone() --end");

        } else if (shareType == PUBLISH_TO_QZONE_TYPE_PUBLISHVIDEO) {
            final String videoUrl = params.getString(PUBLISH_TO_QZONE_VIDEO_PATH);
            if (!Util.fileExists(videoUrl)) {
            	SLog.e(TAG, "publishToQzone() video url invalid");
                listener.onError(new UiError(Constants.ERROR_PARAM,
                        Constants.MSG_PUBLISH_VIDEO_ERROR, null));
                return;
            }

            MediaPlayer mp = new MediaPlayer();
            mp.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
                @Override
                public void onPrepared(MediaPlayer mp) {
                    File file = new File(videoUrl);
                    long videoFileLength = file.length();
                    int videoDuration = mp.getDuration();
                    params.putString(PUBLISH_TO_QZONE_VIDEO_PATH, videoUrl);
                    params.putInt(PUBLISH_TO_QZONE_VIDEO_DURATION, videoDuration);
                    params.putLong(PUBLISH_TO_QZONE_VIDEO_SIZE, videoFileLength);

                    doPublishToQzone(activity, params, listener);
                    SLog.i(TAG, "publishToQzone() --end");
                }

            });
            mp.setOnErrorListener(new MediaPlayer.OnErrorListener() {
                @Override
                public boolean onError(MediaPlayer mp, int what, int extra) {
                	SLog.e(TAG, "publishToQzone() mediaplayer onError()");
                    listener.onError(new UiError(Constants.ERROR_PARAM,
                            Constants.MSG_PUBLISH_VIDEO_ERROR, null));
                    return false;
                }
            });

            try {
                mp.setDataSource(videoUrl);
                mp.prepareAsync();
            } catch (Exception e) {
            	SLog.e(TAG, "publishToQzone() exception(s) occurred when preparing mediaplayer");
                listener.onError(new UiError(Constants.ERROR_PARAM,
                        Constants.MSG_PUBLISH_VIDEO_ERROR, null));
            }

        } else {
            listener.onError(new UiError(Constants.ERROR_PARAM,
                    Constants.MSG_SHARE_TYPE_ERROR, null));
            SLog.e(TAG, "publishToQzone() error--end"
                    + Constants.MSG_SHARE_TYPE_ERROR);
            OpenSdkStatic.getInstance().reportHaboCgi(1, "SHARE_CHECK_SDK", Constants.DEFAULT_UIN,
                    mToken.getAppId(), String.valueOf(4), SystemClock.elapsedRealtime(), 0, 1,
                    "publishToQzone() " + Constants.MSG_SHARE_TYPE_ERROR);
            return;
        }

    }

    private void doPublishToQzone(Activity activity, Bundle params, IUiListener listener) {

        SLog.i(TAG, "doPublishToQzone() --start");

        StringBuffer url = new StringBuffer(PUBLISH_QZONE_SCHEME_URL);
        ArrayList<String> imageUrlArrayList = params.getStringArrayList(PUBLISH_TO_QZONE_IMAGE_URL);
        String summary = params.getString(PUBLISH_TO_QZONE_SUMMARY);
        int shareType = params.getInt(PUBLISH_TO_QZONE_KEY_TYPE, PUBLISH_TO_QZONE_TYPE_PUBLISHMOOD);
        String appName = params.getString(PUBLISH_TO_QZONE_APP_NAME);
        String videoUrl = params.getString(PUBLISH_TO_QZONE_VIDEO_PATH);
        int videoDuration = params.getInt(PUBLISH_TO_QZONE_VIDEO_DURATION);
        long videoSize = params.getLong(PUBLISH_TO_QZONE_VIDEO_SIZE);
        String extStr = "";
        try {
            Bundle extMap = params.getBundle(PUBLISH_TO_QZONE_EXTMAP);
            if (extMap != null) {
                Set<String> keySet = extMap.keySet();
                JSONObject extParams = new JSONObject();
                for (String key : keySet) {
                    if (!TextUtils.isEmpty(extMap.getString(key))) {
                        extParams.put(key, extMap.getString(key));
                    }
                }
                if (extParams.length() > 0) {
                    extStr = extParams.toString();
                }
            }
        } catch (Exception e) {
            SLog.e(TAG, "publishToQzone()  --error parse extmap", e);
        }


        String appId = mToken.getAppId();
        String openId = mToken.getOpenId();

        SLog.v(TAG, "openId:" + openId);
        String type = "";
        if (PUBLISH_TO_QZONE_TYPE_PUBLISHMOOD == shareType && imageUrlArrayList != null) {
        	type = Constants.VIA_SHARE_TYPE_PUBLISHMOOD;
            StringBuffer sb = new StringBuffer();
            int maxNumber = imageUrlArrayList.size() /*> QZONE_SHARE_IMAGE_MAX_NUMBER ? QZONE_SHARE_IMAGE_MAX_NUMBER : imageUrlArrayList.size()*/;
            for (int i = 0; i < maxNumber; i++) {
                sb.append(URLEncoder.encode(imageUrlArrayList.get(i)));
                if (i != maxNumber - 1) {
                    sb.append(";");
                }
            }
            url.append("&image_url=" + Base64.encodeToString(Util.getBytesUTF8(sb.toString()), Base64.NO_WRAP));
        }

        if (PUBLISH_TO_QZONE_TYPE_PUBLISHVIDEO == shareType) {
        	type = Constants.VIA_SHARE_TYPE_PUBLISHVIDEO;
            url.append("&videoPath=" + Base64.encodeToString(Util.getBytesUTF8(videoUrl), Base64.NO_WRAP));
            url.append("&videoDuration=" + Base64.encodeToString(Util.getBytesUTF8(String.valueOf(videoDuration)), Base64.NO_WRAP));
            url.append("&videoSize=" + Base64.encodeToString(Util.getBytesUTF8(String.valueOf(videoSize)), Base64.NO_WRAP));
        }

        if (!TextUtils.isEmpty(summary)) {
            // summary = summary.replaceAll("\r", ""); // 结构化消息需要去掉文本里的\r符号, 不然会出现重复消息; 这里将\r去掉
            url.append("&description=" + Base64.encodeToString(Util.getBytesUTF8(summary), Base64.NO_WRAP));
        }


        if (!TextUtils.isEmpty(appId)) {
            url.append("&share_id=" + appId);
        }

        if (!TextUtils.isEmpty(appName)) {
            url.append("&app_name=" + Base64.encodeToString(Util.getBytesUTF8(appName), Base64.NO_WRAP));
        }

        if (!Util.isEmpty(openId)) {
            url.append("&open_id=" + Base64.encodeToString(Util.getBytesUTF8(openId), Base64.NO_WRAP));
        }

        if (!TextUtils.isEmpty(extStr)) {
            url.append("&share_qzone_ext_str=" + Base64.encodeToString(Util.getBytesUTF8(extStr), Base64.NO_WRAP));
        }

        // zivon: 加上分享类型, 用string类型传入
        url.append("&" + QQShare.SHARE_TO_QQ_KEY_TYPE + "=" + Base64.encodeToString(Util.getBytesUTF8(String.valueOf(shareType)), Base64.NO_WRAP));


        SLog.v(TAG, "doPublishToQzone, url: " + url.toString());

        TencentStat.trackCustomEvent(Global.getContext(), mToken, "requireApi", "shareToNativeQQ");

        Intent activityIntent = new Intent(Intent.ACTION_VIEW);
        activityIntent.setData(Uri.parse(url.toString()));
        //不知道为什么手Q没有登陆态时通过getCallingPackage获取不到packageName，这里传入一下
        activityIntent.putExtra("pkg_name", activity.getPackageName());

        if (hasActivityForIntent(activityIntent)) {
            startAssistActivity(activity, Constants.REQUEST_QZONE_SHARE, activityIntent, false);
            OpenSdkStatic.getInstance().reportHaboCgi(0, "SHARE_CHECK_SDK", Constants.DEFAULT_UIN, mToken.getAppId(),
                    String.valueOf(4), SystemClock.elapsedRealtime(), 0, 1, "hasActivityForIntent success");
            OpenSdkStatic.getInstance().reportVia(mToken.getOpenId(), mToken.getAppId(), Constants.VIA_SHARE_TO_QZONE,
                    Constants.VIA_REPORT_TYPE_SHARE_TO_QZONE, Constants.VIA_ACT_TYPE_THREE, Constants.VIA_RESULT_FAIL,
                    type, Constants.VIA_NO_VALUE, Constants.VIA_CALL_SOURCE_SQ,
                    Constants.VIA_NO_VALUE);
        } else {
        	SLog.e(TAG, "doPublishToQzone() target activity not found");
            OpenSdkStatic.getInstance().reportHaboCgi(1, "SHARE_CHECK_SDK", Constants.DEFAULT_UIN, mToken.getAppId(),
                    String.valueOf(4), SystemClock.elapsedRealtime(), 0, 1, "hasActivityForIntent fail");
            OpenSdkStatic.getInstance().reportVia(mToken.getOpenId(), mToken.getAppId(), Constants.VIA_SHARE_TO_QZONE,
                    Constants.VIA_REPORT_TYPE_SHARE_TO_QZONE, Constants.VIA_ACT_TYPE_THREE, Constants.VIA_RESULT_FAIL,
                    type, Constants.VIA_NO_VALUE, Constants.VIA_CALL_SOURCE_SQ,
                    Constants.VIA_NO_VALUE);
        }

        SLog.i(SLog.TAG, "doPublishToQzone() --end");
    }
}

