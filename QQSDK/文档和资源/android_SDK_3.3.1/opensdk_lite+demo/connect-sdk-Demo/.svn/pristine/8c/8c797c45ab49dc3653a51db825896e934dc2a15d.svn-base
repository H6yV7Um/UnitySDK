package com.tencent.mobileqq.activity;

import java.io.File;
import java.lang.ref.WeakReference;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;

import PushNotifyPack.C2CMsgReadedNotify;
import PushNotifyPack.DisMsgReadedNotify;
import PushNotifyPack.GroupMsgReadedNotify;
import QQService.EVIPSPEC;
import SecurityAccountServer.RespondQueryQQBindingStat;
import android.annotation.TargetApi;
import android.app.Dialog;
import android.app.PendingIntent;
import android.app.PendingIntent.CanceledException;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.PixelFormat;
import android.graphics.Point;
import android.graphics.drawable.Drawable;
import android.media.AudioManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Handler.Callback;
import android.os.Looper;
import android.os.Message;
import android.os.MessageQueue.IdleHandler;
import android.os.Parcelable;
import android.os.StatFs;
import android.os.SystemClock;
import android.preference.PreferenceManager;
import android.telephony.TelephonyManager;
import android.text.Editable;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.TextPaint;
import android.text.TextWatcher;
import android.text.style.ImageSpan;
import android.util.TypedValue;
import android.view.Display;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.Surface;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnKeyListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.Window;
import android.view.WindowManager;
import android.view.animation.AlphaAnimation;
import android.view.animation.AnimationSet;
import android.view.animation.LinearInterpolator;
import android.view.animation.TranslateAnimation;
import android.view.inputmethod.EditorInfo;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;
import android.widget.Toast;

import com.rookery.translate.AITranslator;
import com.tencent.av.VideoConstants;
import com.tencent.av.gaudio.GAudioObserver;
import com.tencent.av.utils.UITools;
import com.tencent.biz.common.util.Util;
import com.tencent.biz.widgets.ShareAioResultDialog;
import com.tencent.common.app.BaseApplicationImpl;
import com.tencent.image.URLDrawable;
import com.tencent.mobileqq.R;
import com.tencent.mobileqq.activity.aio.AIOTipsController;
import com.tencent.mobileqq.activity.aio.AIOUtils;
import com.tencent.mobileqq.activity.aio.BaseBubbleBuilder;
import com.tencent.mobileqq.activity.aio.BaseChatItemLayout;
import com.tencent.mobileqq.activity.aio.ChatAdapter1;
import com.tencent.mobileqq.activity.aio.ChatBackground;
import com.tencent.mobileqq.activity.aio.ChatContext;
import com.tencent.mobileqq.activity.aio.FileTransferManager;
import com.tencent.mobileqq.activity.aio.ForwardUtils;
import com.tencent.mobileqq.activity.aio.ForwardUtils.SectionBase;
import com.tencent.mobileqq.activity.aio.ForwardUtils.Section_Pic;
import com.tencent.mobileqq.activity.aio.ForwardUtils.Section_Text;
import com.tencent.mobileqq.activity.aio.MediaPlayerManager;
import com.tencent.mobileqq.activity.aio.PlusPanel;
import com.tencent.mobileqq.activity.aio.SecretFileContents;
import com.tencent.mobileqq.activity.aio.SessionInfo;
import com.tencent.mobileqq.activity.aio.item.MarketFaceItemBuilder;
import com.tencent.mobileqq.activity.aio.item.PttItemBuilder;
import com.tencent.mobileqq.activity.aio.item.TextTranslationItemBuilder;
import com.tencent.mobileqq.activity.photo.ImageInfo;
import com.tencent.mobileqq.activity.photo.PhotoConst;
import com.tencent.mobileqq.activity.photo.SendPhotoActivity;
import com.tencent.mobileqq.activity.photopreview.CountDownTimer;
import com.tencent.mobileqq.activity.photopreview.PhotoPreviewConstant;
import com.tencent.mobileqq.app.AppConstants;
import com.tencent.mobileqq.app.AppConstants.Key;
import com.tencent.mobileqq.app.AppConstants.VALUE;
import com.tencent.mobileqq.app.BaseActivity;
import com.tencent.mobileqq.app.BizTroopObserver;
import com.tencent.mobileqq.app.CardHandler;
import com.tencent.mobileqq.app.CardObserver;
import com.tencent.mobileqq.app.CheckPttListener;
import com.tencent.mobileqq.app.ConfigObserver;
import com.tencent.mobileqq.app.DiscussionHandler;
import com.tencent.mobileqq.app.DiscussionObserver;
import com.tencent.mobileqq.app.FriendListHandler;
import com.tencent.mobileqq.app.FriendListObserver;
import com.tencent.mobileqq.app.FriendsManagerImp;
import com.tencent.mobileqq.app.LogTag;
import com.tencent.mobileqq.app.MessageHandler;
import com.tencent.mobileqq.app.MessageObserver;
import com.tencent.mobileqq.app.QQAppInterface;
import com.tencent.mobileqq.app.QQMapActivityProxy;
import com.tencent.mobileqq.app.SVIPHandler;
import com.tencent.mobileqq.app.ShieldListHandler;
import com.tencent.mobileqq.app.ShieldListObserver;
import com.tencent.mobileqq.app.message.MsgProxyUtils;
import com.tencent.mobileqq.app.message.QQMessageFacade;
import com.tencent.mobileqq.app.message.QQMessageFacade.MessageNotifyParam;
import com.tencent.mobileqq.app.message.QQMessageFacade.RefreshMessageContext;
import com.tencent.mobileqq.app.proxy.ProxyObserver;
import com.tencent.mobileqq.app.proxy.RecentUserProxy;
import com.tencent.mobileqq.bubble.BubbleAnimationView;
import com.tencent.mobileqq.bubble.BubbleUtils;
import com.tencent.mobileqq.bubble.ChatXListView;
import com.tencent.mobileqq.data.AppShareID;
import com.tencent.mobileqq.data.Card;
import com.tencent.mobileqq.data.ChatMessage;
import com.tencent.mobileqq.data.DiscussionInfo;
import com.tencent.mobileqq.data.DraftTextInfo;
import com.tencent.mobileqq.data.DraftSummaryInfo;
import com.tencent.mobileqq.data.Friends;
import com.tencent.mobileqq.data.MessageForPtt;
import com.tencent.mobileqq.data.MessageRecord;
import com.tencent.mobileqq.data.PhoneContact;
import com.tencent.mobileqq.data.RecentUser;
import com.tencent.mobileqq.data.TroopInfo;
import com.tencent.mobileqq.data.TroopMemberCardInfo;
import com.tencent.mobileqq.emoticonview.EmoticonInfo;
import com.tencent.mobileqq.emoticonview.EmoticonMainPanel;
import com.tencent.mobileqq.emoticonview.EmoticonPanelInfo;
import com.tencent.mobileqq.emoticonview.FavoriteEmoticonInfo;
import com.tencent.mobileqq.emoticonview.PicEmoticonInfo;
import com.tencent.mobileqq.filemanager.app.FMObserver;
import com.tencent.mobileqq.filemanager.data.FMConstants;
import com.tencent.mobileqq.filemanager.data.FileManagerEntity;
import com.tencent.mobileqq.filemanager.data.ForwardFileInfo;
import com.tencent.mobileqq.filemanager.data.ThumbnailInfo;
import com.tencent.mobileqq.filemanager.util.FileManagerUtil;
import com.tencent.mobileqq.managers.DraftTextManager;
import com.tencent.mobileqq.managers.TroopAssistantManager;
import com.tencent.mobileqq.managers.TroopRemindSettingManager;
import com.tencent.mobileqq.model.FriendManager;
import com.tencent.mobileqq.model.PhoneContactManager;
import com.tencent.mobileqq.music.QQPlayerService;
import com.tencent.mobileqq.persistence.EntityManager;
import com.tencent.mobileqq.pic.PicBusiManager;
import com.tencent.mobileqq.pic.PicReq;
import com.tencent.mobileqq.pic.PicUploadInfo;
import com.tencent.mobileqq.service.friendlist.FriendListContants;
import com.tencent.mobileqq.servlet.ReduFriendObserver;
import com.tencent.mobileqq.servlet.ReduFriendServlet;
import com.tencent.mobileqq.startup.step.SetSplash;
import com.tencent.mobileqq.statistics.ReportController;
import com.tencent.mobileqq.statistics.StatisticAssist;
import com.tencent.mobileqq.streamtransfile.StreamDataManager;
import com.tencent.mobileqq.streamtransfile.StreamFileInfo;
import com.tencent.mobileqq.structmsg.AbsShareMsg;
import com.tencent.mobileqq.structmsg.AbsStructMsg;
import com.tencent.mobileqq.structmsg.ImageShareMsg;
import com.tencent.mobileqq.structmsg.StructMsgFactory;
import com.tencent.mobileqq.stt.GuideActivity;
import com.tencent.mobileqq.stt.SttManager;
import com.tencent.mobileqq.systemmsg.SystemMsgController;
import com.tencent.mobileqq.text.QQText;
import com.tencent.mobileqq.text.QQTextBuilder;
import com.tencent.mobileqq.text.TextUtils;
import com.tencent.mobileqq.transfile.BuddyTransfileProcessor;
import com.tencent.mobileqq.transfile.FileMsg;
import com.tencent.mobileqq.transfile.TranDbRecord.PicDbRecord;
import com.tencent.mobileqq.troop.activity.OpenTroopInfoActivity;
import com.tencent.mobileqq.troop.utils.TroopFileError;
import com.tencent.mobileqq.troop.utils.TroopFileError.TroopFileErrorFilter;
import com.tencent.mobileqq.troop.utils.TroopFileUtils;
import com.tencent.mobileqq.util.FaceDrawable;
import com.tencent.mobileqq.util.GlobalConfig;
import com.tencent.mobileqq.util.ProfileCardUtil;
import com.tencent.mobileqq.util.Utils;
import com.tencent.mobileqq.utils.AlbumConstants;
import com.tencent.mobileqq.utils.AppShareIDUtil;
import com.tencent.mobileqq.utils.AudioUtil;
import com.tencent.mobileqq.utils.CameraUtil;
import com.tencent.mobileqq.utils.ContactUtils;
import com.tencent.mobileqq.utils.DialogUtil;
import com.tencent.mobileqq.utils.FileUtils;
import com.tencent.mobileqq.utils.HexUtil;
import com.tencent.mobileqq.utils.ImageUtil;
import com.tencent.mobileqq.utils.PerformanceReportUtils;
import com.tencent.mobileqq.utils.QQRecorder;
import com.tencent.mobileqq.utils.QQRecorder.OnQQRecorderListener;
import com.tencent.mobileqq.utils.SendMessageHandler;
import com.tencent.mobileqq.utils.ShareMsgHelper;
import com.tencent.mobileqq.utils.StringUtil;
import com.tencent.mobileqq.vas.EmojiHomeStrategy;
import com.tencent.mobileqq.vas.EmojiStrategy;
import com.tencent.mobileqq.widget.CameraFrameLayoutProxy;
import com.tencent.mobileqq.widget.CustomAudioPlayDialog;
import com.tencent.mobileqq.widget.CustomAudioPlayDialog.CustomAudioPlayListener;
import com.tencent.mobileqq.widget.CustomRecordDialog;
import com.tencent.mobileqq.widget.CustomRecordDialog.CustomRecordListener;
import com.tencent.mobileqq.widget.QQToast;
import com.tencent.mobileqq.widget.ScrollerRunnable;
import com.tencent.mobileqq.widget.UpScrollHideView.onViewHideListener;
import com.tencent.open.adapter.OpenAppClient;
import com.tencent.qphone.base.util.BaseApplication;
import com.tencent.qphone.base.util.QLog;
import com.tencent.theme.SkinEngine;
import com.tencent.util.SettingCloneUtil;
import com.tencent.util.VersionUtils;
import com.tencent.util.WeakReferenceHandler;
import com.tencent.widget.AbsListView;
import com.tencent.widget.AbsListView.OnScrollListener;
import com.tencent.widget.ListView;
import com.tencent.widget.OverScrollViewListener;
import com.tencent.widget.XPanelContainer;
   
   
      
                                                                           
      
                                                            
      
                                                         
      
                                                                
   
public class ChatActivity extends BaseActivity implements Observer,
		android.view.View.OnClickListener, CheckPttListener,
		View.OnTouchListener, MediaPlayerManager.Listener, Callback,
		TextWatcher, ChatActivityConstants, XPanelContainer.PanelCallback,
		OnScrollListener, OverScrollViewListener, OnQQRecorderListener,
		EmoticonMainPanel.CallBack {
	         
	                                                           

	private final String TAG = "            ";
	
	            
	private final Handler uiHandler = new WeakReferenceHandler(Looper.getMainLooper(), this);

	                                                                                
	
	protected XPanelContainer root;
	protected RelativeLayout mContent;
	
	protected RelativeLayout mTipsContainer;
	protected RelativeLayout mTipsLayout;	
	
	               
	private View mTitleView;
	protected TextView mTitleBtnLeft;
	protected ImageView mTitleBtnRight;
	protected TextView mTitleText;
	protected TextView mSubTilteText;
	                           
	private boolean mSingleTitle;
	private boolean mTitleShowUnread;

	             
	protected ChatXListView listView;
	private ChatAdapter1 listAdapter;
	private View listFooter;
	            
	private ScrollerRunnable mScrollerRunnable;
	                     
	public BubbleAnimationView bubbleAnimationView;
	
	            
	protected LinearLayout mInputBar;
	         
	private ImageView mEmoBtn;
	       
	private ImageView mPlusBtn;
	            
	protected EditText input;
	
	                     
	private TextView mPttBtn;
	
	                           
	private TextView mFunBtn;
	
	                                                                        
	private boolean isSimpleBar;

	                                                            
	
	                                                                                    
	
    private final int VER_ANIM_DURATION = 300;
                            
	private Button mMsgbox;
	View horMoveView;
	ViewGroup playDelAnimContainer;
	                     
	private View speakerPhoneLayout;
	private TextView speakerPhoneTextView;
	
	                  
	private TextView mUnReadTxt;
	                                                               
	private int mReadedCnt = 0;
	
	             
	private PlusPanel mPlusPanel;
	               
	private EmoticonMainPanel mEmoPanel;
	
	                     
    private View mMultiVideoStatus;
	
	                                                                       

	                
	protected SessionInfo sessionInfo = new SessionInfo();
	
	protected float mDensity;
	                                      
	protected boolean isBack2Root = false;

	                                        
	public boolean speakerPhoneOn = true;
	
	               
	protected boolean sendOnEnterEnabled;
	private EnterForSend enterForSend;
	
	                                                             
	
	                        
	private RefreshMessageContext refreshMessageContext;
	private View loadingView;

	                     
	private long pullReqTime = -1;
	                                                       
	private boolean canPullRefresh = true;
	
	                                                       
	
	private long recordingUniseq;
	int entrance = ChatActivityConstants.ENTRANCE_OTHER;


	                  
	@Deprecated
	public static CountDownTimer countDownTimer;

	                           
	private boolean mTroopAssistTip = false;
	private View mTroopAssistTipView;

	         
	private FriendListHandler friendListHandler;
	private AIOTipsController aioTipsController;

	                        
	private ShareAioResultDialog shareResultDlg = null;

	                        
	private int firstSendText = 1;
	
	                  
	boolean isOpenFromShare = false;
	                                       
	String no_auto_reply_list;
	byte[] richStateSig = null;                                                                

	                                    
	private boolean isHaveNewAfterIn = false;

	private boolean hasUnread = false;
	
	private ReduFriendObserver hotFriendObserver = null;

	   
                         
                  
                                                                                      
                          
    
	protected int dirty = REFRESH_FLAG_RELOAD_IMMEDIATELLY | SCROLL_FLAG_JUMP_BOTTOM;
	
              
                                                   
	

	                         
	private CustomRecordDialog pttDlg;

	   
                      
    
	private int mInputStat = INPUT_STAT_DEFAULT;
	
	                        
	private SpannableString mKeyboardSpan;
	private SpannableString mVoiceSpan;
	
	private static final int CALLER_ON_CREATE = 1;
	private static final int CALLER_ON_NEW_INTENT = 2;

                           
    private DraftTextManager mDraftManager;
    private String mDraftText;
    	
                                                    
    private long inOpenTroopTime;

                                                                                   
    boolean needUpload = false;
	
	public QQMapActivityProxy mQQMapActivityProxy;
	   
                      
    
	CameraFrameLayoutProxy mRealtimeBgProxy;
	
	   
                                 
    
	static class TroopFileErrorFilterForChatActivity implements TroopFileErrorFilter {
		private WeakReference<ChatActivity> chatActivity;
		public TroopFileErrorFilterForChatActivity(ChatActivity activity) {
			chatActivity = new WeakReference<ChatActivity>(activity);
		}
		
		@Override
		public long getFilterTroopUin() {
			long troopUin = 0;
			if (chatActivity != null) {
				ChatActivity activity = chatActivity.get();
				if (activity != null
						&& activity.sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_TROOP) {
					try {
						troopUin = Long.parseLong(activity.sessionInfo.curFriendUin);
					} catch (Exception e) {
					}
				}
			}

			return troopUin;
		}
	}
	
	   
                                                                                                                                     
    
                    
    
    
	private class EnterForSend implements OnEditorActionListener, OnKeyListener
	{

		@Override
		public boolean onKey(View paramView, int paramInt, KeyEvent event)
		{
			if (event.getKeyCode() == KeyEvent.KEYCODE_ENTER)
			{
				if (event.getAction() == KeyEvent.ACTION_UP)
				{
					                                                            
					String text = input.getText().toString();
					                           
					if (sendOnEnterEnabled && text.length() > 0)
					{
						                                           
						                            
						if (text.endsWith("  ") || text.endsWith("  "))
						{
							text = text.substring(0, text.length() - 1);
						}
						else if (text.endsWith("    "))
						{
							text = text.substring(0, text.length() - 2);
						}

						if (text.length() > 0)
						{
							send();
						}
					}
				}
				return true;
			}
			return false;
		}

		@Override
		public boolean onEditorAction(TextView v, int actionId, KeyEvent event)
		{
			if (actionId == EditorInfo.IME_ACTION_SEND)
			{
				String text = input.getText().toString();
				if (text.length() > 0)
				{
					ChatActivityFacade.sendMessage(app, ChatActivity.this, sessionInfo, text);
					input.setText("");
					msgReport(entrance, -1);
				}
				return true;
			}
			return false;
		}
	}
	
	@Override
	protected void requestWindowFeature(Intent intent) {
	    requestWindowFeature(Window.FEATURE_CUSTOM_TITLE);
	}

	@Override
	public boolean showPreview() {
        SetSplash.setupSplash(this);
        getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE, R.layout.custom_fake_title);
        try {
            mTitleView = (View)findViewById(R.id.flCustomTitle).getParent();
            mTitleView.setVisibility(View.GONE);
        } catch (Throwable t) {
            t.printStackTrace();
        }
        return true;
    }

	   
                                                                                    
   
    
	private boolean mIsSimpleDestroy = false;
	private boolean mIsCurrentSession = true;
	private MediaPlayerManager mpm;
	@Override
	protected boolean doOnCreate(Bundle savedInstanceState)
	{
		QLog.d(TAG, QLog.DEV, "                      "+BaseApplicationImpl.sActivityOnCreated);
		final long startTime = SystemClock.uptimeMillis();

		getWindow().setFormat(PixelFormat.TRANSLUCENT);
		super.doOnCreate(savedInstanceState);
		
		if(!app.isLogin()) {
			mIsSimpleDestroy = true;
		    startActivity(new Intent("                                 ").addFlags(Intent.FLAG_ACTIVITY_NO_USER_ACTION));
		    finish();
		    return false;
		}
		if (!isValidChat(getIntent())) {
			mIsSimpleDestroy = true;
			finish();
			return false;
		}
		
		mDensity = getResources().getDisplayMetrics().density;

		if(mTitleView != null) {
		    mTitleView.setVisibility(View.VISIBLE);
		}
		setContentView(R.layout.chat2);
		getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE, R.layout.custom_simple_title);
		
		            
		root = (XPanelContainer) findViewById(R.id.root);
		root.setOnPanelChangeListener(this);
		
		mContent = (RelativeLayout) findViewById(R.id.chat_content);
		mTipsContainer = (RelativeLayout) findViewById(R.id.chat_tips_container);
		mTipsLayout = (RelativeLayout) findViewById(R.id.qq_aio_tips_layout);

		                 
		mTitleBtnLeft = (TextView) findViewById(R.id.ivTitleBtnLeft);
		mTitleBtnRight = (ImageView) findViewById(R.id.ivTitleBtnRightImage);

		mTitleBtnLeft.setOnClickListener(this);
		mTitleBtnRight.setOnClickListener(this);
		
		mTitleText = (TextView) findViewById(R.id.title);
		mSubTilteText = (TextView) findViewById(R.id.title_sub);
		listView = (ChatXListView) findViewById(R.id.listView1);
		listView.setStartTime(startTime);
		listView.setActTAG(PerformanceReportUtils.ACT_FPS_AIO);
		listView.setStackFromBottom(true);
		listView.setOnTouchListener(this);
		listView.setOnScrollListener(this);
		listView.setOverScrollListener(this);
		listView.setTranscriptMode(ListView.TRANSCRIPT_MODE_DISABLED);
		listView.setLongClickable(true);
		listView.setDelAnimationDuration(VER_ANIM_DURATION);

		bubbleAnimationView = listView.getBubbleAnimationView();
		
		          
		listAdapter = new ChatAdapter1(app, this, sessionInfo, bubbleAnimationView);
		         
		listFooter = new View(this);
		listFooter.setLayoutParams(new AbsListView.LayoutParams(LayoutParams.MATCH_PARENT, (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 10,
				getResources().getDisplayMetrics())));

		listView.addFooterView(listFooter);
		listView.setAdapter(listAdapter);

		mScrollerRunnable = new ScrollerRunnable(listView);

		            
		mEmoBtn = (ImageView) findViewById(R.id.emo_btn);
		mEmoBtn.setOnClickListener(this);

		mPlusBtn = (ImageView) findViewById(R.id.plus_btn);
		mPlusBtn.setOnClickListener(this);

		input = (EditText) findViewById(R.id.input);
		input.setEditableFactory(QQTextBuilder.EMOCTATION_FACORY);
		input.addTextChangedListener(this);
		
		String model = android.os.Build.MODEL;
		
		                                                        
		if(model != null && (model.startsWith("   ") || model.startsWith("   ") || model.startsWith("   ")))
		{
			try
			{
				Class clz = TextView.class;
				Field field = clz.getDeclaredField("                    ");
				field.setAccessible(true);
				
				TextView empty = new TextView(this);
				
				int defaultValue = (Integer)field.get(empty);
				
				field.set(input, defaultValue);
			}
			catch (Exception e)
			{
				e.printStackTrace();
			}
		}
		
		root.bindInputer(input);

		mFunBtn = (TextView) findViewById(R.id.fun_btn);
		mFunBtn.setOnClickListener(this);
		mInputBar = (LinearLayout) findViewById(R.id.inputBar);

		Intent intent = getIntent();

		                              
		{
			String leftBtnText = null;
			
			                
			isBack2Root = getIntent().getExtras().getBoolean("           ");

			                                                                                 
			                           
			isOpenFromShare = intent.getExtras().containsKey(Key.SHARE_RES_ID);
			if (!isOpenFromShare)
			{
				isOpenFromShare = getIntent().getExtras().getBoolean(Key.SHARE_FLAG);
			}

			                  
			final boolean jumpFromFeed = intent.getBooleanExtra(ForwardRecentActivity.KEY_JUMP_FROM_QZONE_FEED, false);
			                  
			boolean isFromDiscussionFlyTicket = intent.getBooleanExtra("                         ", false);

			                  
			if (isFromDiscussionFlyTicket)
			{
				mTitleShowUnread = true;
			}
			              
			else if (jumpFromFeed)
			{
				leftBtnText = intent.getStringExtra(ForwardRecentActivity.KEY_JUMP_FROM_QZONE_FEED_LEFT_TITLE);
				if (leftBtnText == null)
				{
					leftBtnText = getString(R.string.button_back);
				}
				else
				{
					leftBtnText = getString(R.string.qzone_feed_left_back_title, leftBtnText);
				}
				mTitleShowUnread = false;
			}
			               
			else
			{
				String leftviewString = intent.getExtras().getString(AppConstants.leftViewText.LEFTVIEWTEXT);
				mTitleShowUnread = isBack2Root || (leftviewString != null && leftviewString.contains(getString(R.string.tab_title_chat)));
				leftBtnText = leftviewString;
			}

			if (mTitleShowUnread)
			{
				updateUnreadNumOnTitleBar();
			}
			else
			{
				mTitleBtnLeft.setText(leftBtnText == null ? getString(R.string.button_back) : leftBtnText);
			}

			if (ChatActivityConstants.TALK_BACK)
			{
				String leftText = mTitleBtnLeft.getText().toString();
				if (!getString(R.string.back).equals(leftText))
				{
					leftText = "      " + leftText + "      ";
				}
				mTitleBtnLeft.setContentDescription(leftText);

				mTitleBtnRight.setContentDescription("                        ");
			}
		}

		                        
		updateInputBarBg();
                                                                             
		countDownTimer = new CountDownTimer();


		friendListHandler = (FriendListHandler) app.getBusinessHandler(QQAppInterface.FRIENDLIST_HANDLER);
		aioTipsController = new AIOTipsController(mTipsLayout);
		
		sessionInfo.chatBg = new ChatBackground();

		fmob = new MyFMObserver();
		mGAudioObserver = new MyGAudioObserver();

		speakerPhoneOn = app.getLoudSpeakerState();
		updateSession(getIntent());
		addBusinessObservers();

		
		app.setHandler(this.getClass(), uiHandler);
		mpm = MediaPlayerManager.getInstance(app);
		              
		needUpload = true;
		handleRequest(intent,CALLER_ON_CREATE);
		return true;
	}

	private LinearLayout linearLayout;
	private TextView shieldTV, addFriendTv;
	private void showAddFriendAndShield() {
		String uin = sessionInfo.curFriendUin;
		if(sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_CONTACT_STRANGER_FRIEND){
			uin = sessionInfo.contactUin;
		}
		if(linearLayout == null){
			OnClickListener listener = new OnClickListener() {
				
				@Override
				public void onClick(View v) {
					Object tag = v.getTag();
					if(tag == null || !(tag instanceof Integer)){
						return;
					}
					String uin = sessionInfo.curFriendUin;
					if(sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_CONTACT_STRANGER_FRIEND){
						uin = sessionInfo.contactUin;
					}
					int i = (Integer) tag;
					switch (i) {
					case 1:
						ChatActivityUtils.shieldMsg(app,ChatActivity.this,sessionInfo.curType,uin,sessionInfo.phoneNum,true);
						break;
					case 2:
						ChatActivityUtils.shieldMsg(app,ChatActivity.this,sessionInfo.curType,uin,sessionInfo.phoneNum,false);
						break;
					case 3:
						ChatActivityUtils.addFriend(ChatActivity.this,sessionInfo, setLastActivityName(), 
								getIntent().getStringExtra(AutoRemarkActivity.PARAM_RETURN_ADDR) != null);
						break;

					default:
						break;
					}
				}
			};
			linearLayout = new LinearLayout(this);
			linearLayout.setId(R.id.aio_top_linearlayout);
			linearLayout.setVisibility(View.GONE);
			linearLayout.setOrientation(LinearLayout.HORIZONTAL);
			RelativeLayout.LayoutParams relayoutParams = new RelativeLayout.LayoutParams(
					LayoutParams.MATCH_PARENT,
					(int) getResources().getDimension(R.dimen.float_btn_height));
			relayoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP);
			
			LinearLayout.LayoutParams layoutParams;
			shieldTV = new TextView(this);
			shieldTV.setGravity(Gravity.CENTER);
			if(ChatActivityUtils.isMsgShielded(app, sessionInfo.curType, uin, sessionInfo.phoneNum)){
				shieldTV.setText(getResources().getString(R.string.aio_shield_cancle));
				shieldTV.setTag(1);
			}else{
				shieldTV.setText(getResources().getString(R.string.aio_shield_someone));
				shieldTV.setTag(2);
			}
			
			if((sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_CONTACT_STRANGER_FRIEND)
				&&(sessionInfo.contactUin == null || sessionInfo.contactUin.equals(""))){
				shieldTV.setEnabled(false);
				shieldTV.setClickable(false);
			}else{
				shieldTV.setEnabled(true);
				shieldTV.setClickable(true);
			}
			shieldTV.setTextColor(getResources().getColorStateList(R.color.skin_float_btn));
			shieldTV.setTextSize(TypedValue.COMPLEX_UNIT_PX,getResources().getDimension(R.dimen.aio_text_size_small));
			shieldTV.setBackgroundDrawable(getResources().getDrawable(R.drawable.aio_sheild_friend_btn));
			shieldTV.setContentDescription(shieldTV.getText());
			shieldTV.setOnClickListener(listener);
			layoutParams = new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT);
			layoutParams.weight = 1.0f;
			linearLayout.addView(shieldTV, layoutParams);
			           
			View line = new View(this);
			line.setBackgroundColor(0xFFBABABA);
			layoutParams = new LinearLayout.LayoutParams(1, LayoutParams.MATCH_PARENT);
			linearLayout.addView(line, layoutParams);
			           
			addFriendTv = new TextView(this);
			addFriendTv.setGravity(Gravity.CENTER);
			addFriendTv.setText(getString(R.string.aio_addfriend));
			addFriendTv.setTextColor(getResources().getColorStateList(R.color.skin_float_btn));
			addFriendTv.setTextSize(TypedValue.COMPLEX_UNIT_PX,getResources().getDimensionPixelSize(R.dimen.aio_text_size_small));
			addFriendTv.setBackgroundDrawable(getResources().getDrawable(R.drawable.aio_sheild_friend_btn));
			addFriendTv.setContentDescription(addFriendTv.getText());
			addFriendTv.setOnClickListener(listener);
			addFriendTv.setTag(3);
			layoutParams = new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT);
			layoutParams.weight = 1.0f;
			linearLayout.addView(addFriendTv, layoutParams);
			
			                                                      
			RelativeLayout.LayoutParams layoutParams2 = (RelativeLayout.LayoutParams) listView.getLayoutParams();
			layoutParams2.addRule(RelativeLayout.BELOW, R.id.aio_top_linearlayout);
			mContent.addView(linearLayout, 0, relayoutParams);
		}
		if(ChatActivityUtils.isMsgShielded(app, sessionInfo.curType, uin, sessionInfo.phoneNum)){
			shieldTV.setText(getResources().getString(R.string.aio_shield_cancle));
			shieldTV.setTag(1);
		}else{
			shieldTV.setText(getResources().getString(R.string.aio_shield_someone));
			shieldTV.setTag(2);
		}
		linearLayout.setVisibility(View.VISIBLE);
		
		if(mRealtimeBgProxy!=null){
			mRealtimeBgProxy.setRealtimeBlewView(R.id.aio_top_linearlayout);
		}
	}
	
	private void hideAddFriendAndShield(){
		if(linearLayout!=null){
			linearLayout.setVisibility(View.GONE);
		}
	}
	
	private void updateAddFriendAndShieldView() {
		if (ChatActivityUtils.isTempConv(sessionInfo.curType)) {
			showAddFriendAndShield();
		}else{
			hideAddFriendAndShield();
		}
	}


	   
                                                    
    
	private void updateInputBarBg()
	{
		boolean bigInputBar = (Boolean) SkinEngine.getInstances().getThemeConfig("                 ", Boolean.FALSE);
		if (bigInputBar)
		{
			View bg = mInputBar.findViewById(R.id.skin_input_bg);
			bg.setBackgroundResource(R.drawable.chat_input_bar_bg_big);
			bg.setVisibility(View.VISIBLE);
			mInputBar.getBackground().setVisible(false, false);
		}
		else
		{
			mInputBar.getBackground().setVisible(true, false);
			mInputBar.findViewById(R.id.skin_input_bg).setVisibility(View.GONE);
		}
	}

	public static void initIntent(final SessionInfo sessionInfo, Intent intent){
		if(sessionInfo != null && intent != null){
			intent.putExtra(Key.UIN, sessionInfo.curFriendUin);
			intent.putExtra(Key.UIN_TYPE, sessionInfo.curType);
			intent.putExtra(Key.UIN_NAME, sessionInfo.curFriendNick);
			intent.putExtra(Key.TROOP_UIN, sessionInfo.troopUin);
			intent.putExtra(Key.PHONENUM, sessionInfo.phoneNum);
		}
	}
	
	   
                                        
                 
                     
           
    
	private boolean isValidChat(Intent intent)
	{
		String account = intent.getStringExtra(Key.ACCOUNT);
		                                                      
		if (account != null && !app.getCurrentAccountUin().equals(account)) {
			QLog.e(TAG, QLog.USR, "                                          " + account + "                " + app.getCurrentAccountUin());
			QQToast.makeText(this.getApplicationContext(),
					getString(R.string.account_not_match) + account,
					Toast.LENGTH_SHORT).show(getTitleBarHeight());
			return false;
		}
		
		               
		String friendUin = intent.getStringExtra(Key.UIN);
		int uinType = intent.getIntExtra(Key.UIN_TYPE, -1);
		int entrance = intent.getIntExtra(ChatActivityConstants.KEY_ENTRANCE,
				ChatActivityConstants.ENTRANCE_OTHER);
		if (friendUin == null) {
			QLog.e(TAG, QLog.USR, "                     " + "         "
					+ uinType + "          " + entrance);
			return false;
		}
		if (uinType == -1) {
			QQToast.makeText(this, getString(R.string.shortcut_invalid),
					Toast.LENGTH_SHORT).show(getTitleBarHeight());
			return false;
		}
		if (intent.getBooleanExtra("        ", false))
		{
			FriendManager fm = (FriendManager) app.getManager(QQAppInterface.FRIEND_MANAGER);
			                                    
			if (!fm.isFriend(friendUin))
			{
				QQToast.makeText(this.getApplicationContext(), getString(R.string.shortcut_invalid_msg), Toast.LENGTH_SHORT).show(getTitleBarHeight());
				return false;
			}
		}
		return true;
	}
	
	   
                                                                                       
    
                 
    
	protected void updateSession(final Intent intent)
	{
		            
		aioTipsController.hideHeaderTips();
		                                 
		saveTextDraft();

		final boolean forwardToCurrent = intent.getExtras().containsKey(Key.FORWARD_TYPE) && sessionInfo.curFriendUin != null
				&& sessionInfo.curFriendUin.equals(intent.getStringExtra(Key.UIN));
		sessionInfo.curFriendUin = intent.getStringExtra(Key.UIN);
		sessionInfo.curType = intent.getIntExtra(Key.UIN_TYPE, -1);
		sessionInfo.phoneNum = intent.getStringExtra(Key.PHONENUM);
		
		if(sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_TROOP){
			                                                

			if (troopFileErrorHandlerObserver == null) {
				TroopFileErrorFilter filter = new TroopFileErrorFilterForChatActivity(this);
				troopFileErrorHandlerObserver = new TroopFileError.TroopFileErrorObserver(
						this, filter, app);
			}
			
			TroopFileError.addErrorHandleObserver(app, troopFileErrorHandlerObserver);
		} else if (troopFileErrorHandlerObserver != null) {
			TroopFileError.removeErrorHandleObserver(app, troopFileErrorHandlerObserver);
		}

		         
		entrance = intent.getIntExtra(ChatActivityConstants.KEY_ENTRANCE, ChatActivityConstants.ENTRANCE_OTHER);

		refreshMessageContext = new RefreshMessageContext();
		refreshMessageContext.context = new ChatContext(sessionInfo.curFriendUin);

		         
		sessionInfo.troopUin = intent.getStringExtra(AppConstants.Key.TROOP_UIN);
		sessionInfo.contactUin = null;
		                                                                                                                                      
		                                                                                
		                                                                                                                                       
		if ((sessionInfo.troopUin == null || sessionInfo.troopUin.length() == 0) && (sessionInfo.curType == VALUE.UIN_TYPE_TROOP))
		{
			FriendManager fm = (FriendManager) app.getManager(QQAppInterface.FRIEND_MANAGER);
			TroopInfo troopInfo = fm.findTroopInfo(sessionInfo.curFriendUin);
			if (troopInfo != null)
			{
				sessionInfo.troopUin = troopInfo.troopcode;
			}
		}
		if (QLog.isColorLevel())
		{
			QLog.d(TAG, QLog.CLR, "             " + sessionInfo.curFriendUin + "         " + sessionInfo.curType + "          " + sessionInfo.troopUin);
		}
		
		                                           
		sessionInfo.realTroopUin = null;
		                  
		if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_GROUP_MEMBER_STRANGER || 
		        sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_OPEN_TROOP_MEMBER_STRANGER)
		{
			sessionInfo.realTroopUin = intent.getStringExtra(Key.TROOP_CODE);
			if (sessionInfo.realTroopUin == null || sessionInfo.realTroopUin.trim().length() == 0)
			{
				FriendManager fm = (FriendManager) app.getManager(QQAppInterface.FRIEND_MANAGER);
				sessionInfo.realTroopUin = fm.getTroopUin(sessionInfo.troopUin);
			}
		}
		                        
		else if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_DISCUSSION_FRIEND)
		{
			sessionInfo.realTroopUin = sessionInfo.troopUin;
		}
		               
		else if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_CONTACT_STRANGER_FRIEND)
		{
			PhoneContactManager mgr = (PhoneContactManager) app.getManager(QQAppInterface.CONTACT_MANAGER);
			RespondQueryQQBindingStat stat = mgr.getSelfBindInfo();
			                                              
			sessionInfo.phoneNum = stat.nationCode + stat.mobileNo;
			                                                  
			                             
			sessionInfo.contactUin = ContactUtils.getUinByPhoneNum(app, sessionInfo.curFriendUin);
			if (sessionInfo.contactUin == null)
			{
				if (QLog.isColorLevel())
				{
					QLog.e(TAG, QLog.CLR, "                  ");
				}
			}
		}
		
		                                
		{
			if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_SAME_STATE)
			{
				byte[] richStateSig = intent.getByteArrayExtra(Key.KYE_RICH_STATUS_SIG);
				if (QLog.isColorLevel())
				{
					QLog.d(TAG, QLog.CLR, "                                     " + HexUtil.bytes2HexStr(richStateSig));
				}
				if (richStateSig != null)                                                               
											                                         
				{
					app.getMsgCache().addSameStateMsgKey(sessionInfo.curFriendUin, richStateSig);
				}
			}
	
			                                          
			ChatActivityFacade.insertSignMsgIfNeeded(app, sessionInfo);
			
			instantUpdate(true);
		}
		
		if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_LBS_FRIEND) {
			richStateSig = intent.getByteArrayExtra(Key.KYE_RICH_ACCOST_SIG);
			if (QLog.isColorLevel()) {
				QLog.d(TAG, QLog.CLR, "                                  "
						+ HexUtil.bytes2HexStr(richStateSig));
			}
			if (richStateSig != null)                                                               
										                                         
			{
				app.getMsgCache()
						.addAccostMsgKey(sessionInfo.curFriendUin, richStateSig);
				QLog.d("            ", QLog.DEV, "                        ");
			}
		}

		                       
		
		               
		String nick = intent.getStringExtra(Key.UIN_NAME);
                                                                       
		if(nick != null)
		{
			sessionInfo.curFriendNick = nick;
		}
		else
		{
			updateFriendNick();
		}
		
		if (AppConstants.VALUE.UIN_TYPE_DISCUSSION == sessionInfo.curType)
		{
			genDiscussTitle(sessionInfo.curFriendNick, sessionInfo.curFriendUin, mTitleText);
		}
		else
		{
			mTitleText.setText(sessionInfo.curFriendNick);
		}

		                           
		mSingleTitle = !(sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_FRIEND && Boolean.valueOf(GlobalConfig.getConfig(this, app.getCurrentAccountUin(), GlobalConfig.CONFIG_ITEM_DISPLAY_STATUS)));
		if(!mSingleTitle)
		{
			updateOnlineStatus();
		}
		else if(mSubTilteText.getVisibility() == View.VISIBLE)
		{
			setSubTitleVisable(false);
		}
		
		updateAddFriendAndShieldView();
		
		                             
		setInputStat(INPUT_STAT_DEFAULT);
		SharedPreferences sp = getSharedPreferences(ChatTextSizeSettingActivity.SETTING_TEXT_SIZE, Context.MODE_PRIVATE);
		int typeTextSize = sp.getInt(ChatTextSizeSettingActivity.KEY_CHAT_TEXT_SIZE_TYPE, ChatTextSizeSettingActivity.TYPE_TEXT_SIZE＿SMALL);
		int maxlines = 3;
		sessionInfo.textSizeForTextItem = ChatTextSizeSettingActivity.getChatTextSize(this);
		switch (typeTextSize)
		{
			case ChatTextSizeSettingActivity.TYPE_TEXT_SIZE＿MIDDLE:
				maxlines = 3;
				break;
			case ChatTextSizeSettingActivity.TYPE_TEXT_SIZE＿LARGE:
				maxlines = 2;
				break;
			case ChatTextSizeSettingActivity.TYPE_TEXT_SIZE＿EXTRA_LARGE:
				maxlines = 2;
				break;
			default:
				maxlines = 3;
				break;
		}
		input.setMaxLines(maxlines);
		input.setTextSize(TypedValue.COMPLEX_UNIT_PX, sessionInfo.textSizeForTextItem);
		
		            
		isSimpleBar = (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_GROUP_MEMBER_STRANGER
		        || sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_OPEN_TROOP_MEMBER_STRANGER
				|| sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_STRANGER_FRIEND 
				|| sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_WPA_3PARTY
				|| sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_PUBLIC_ACCOUNT 
				|| sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_DISCUSSION_FRIEND
                                                                                    
				|| sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_SAME_STATE);
		
		if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_STRANGER_FRIEND)
		{
			mPlusBtn.setVisibility(View.GONE);
		}
		else
		{
			mPlusBtn.setVisibility(View.VISIBLE);
		}

		String prompt = intent.getStringExtra(ChatActivityConstants.EXTRA_INPUT_TEXT);
		intent.removeExtra(ChatActivityConstants.EXTRA_INPUT_TEXT);
		
		if (prompt != null)
		{
			input.setText(prompt);
		}
		else 
		{
			loadTextDraft();
		}
		
		               
		root.reset();
		if(mPlusPanel != null)
		{
			mPlusPanel.reload();
		}

	    final Intent fIntent = intent;	

	             
		if (intent.getExtras().containsKey(Key.FORWARD_TYPE))
		{

			int forwardType = intent.getIntExtra(Key.FORWARD_TYPE, ForwardUtils.FORWARD_TYPE.INVALID_TYPE);
			                
			if (forwardType == ForwardUtils.FORWARD_TYPE.FILE)
			{
				                        
				mTitleBtnLeft.setText(R.string.tab_title_chat);
				isBack2Root = true;
			}
			else if (forwardType == ForwardUtils.FORWARD_TYPE.PLUGIN_SHARE_STRUCT_MSG_TYPE)
			{
				                        
			    handleAppShareAction(app, this, sessionInfo, msgObserver, intent);
			}

			uiHandler.postDelayed(new Runnable()
			{                                  
				                                                                                                
				@Override
				public void run()
				{
					handleForwardData(fIntent);
					jumpToBottom();
					                                     
					if (intent.getBooleanExtra("           ", false))
					{
						intent.removeExtra(Key.FORWARD_TYPE);
						intent.getExtras().remove(Key.FORWARD_TYPE);
						intent.removeExtra("           ");

						String str = intent.getExtras().getString("            ");
						                        
						                                               
						if (str == null || "".equals(str))
							str = getString(R.string.button_back);
						mTitleBtnLeft.setText(str);

					}
				}
			}, 500);
		}
		
		
		if (AppConstants.CSPECIAL_FLAG_ROBOT == intent.getExtras().getInt(Key.CSPECIAL_FLAG))
		{
			ChatActivityFacade.recordAccostLog(app, sessionInfo);
		}
		else if (sessionInfo.curType == VALUE.UIN_TYPE_LBS_FRIEND || sessionInfo.curType == VALUE.UIN_TYPE_STRANGER_FRIEND)
		{ 
			FriendManager fm = (FriendManager) app.getManager(QQAppInterface.FRIEND_MANAGER);
			Card card = fm.findFriendCardByUin(sessionInfo.curFriendUin);
			                        
			                     
                          
			if (card == null)
			{
				sendGetFriendCardRequest();
			}
			else if (card != null && card.strCertificationInfo != null && !card.strCertificationInfo.equals(""))
			{
				ChatActivityFacade.recordAccostLog(app, sessionInfo);
			}
		}

		if (recorder != null)
		{
			recorder.setOnQQRecorderListener(null);
		}
		
		                              
		FriendManager fm = (FriendManager) app
				.getManager(QQAppInterface.FRIEND_MANAGER);
		
		if (TroopRemindSettingManager.getInstance().isFirstInTroop(
				sessionInfo.curFriendUin, app)
				&& !fm.isOpenTroop(sessionInfo.curFriendUin))
		{
			ChatActivityUtils.showGroupMaskTip(ChatActivity.this, getString(R.string.aio_group_new_tip), ChatActivityConstants.TIP_NEW_GROUP_DELAY);
			TroopRemindSettingManager.getInstance().setTroopIsOpened(sessionInfo.curFriendUin, app);                                                         
		}
		else if (!forwardToCurrent && sessionInfo.curType == VALUE.UIN_TYPE_TROOP
				&& app.getTroopMask(sessionInfo.curFriendUin) == AppConstants.MSG_FILTER_VALUE.MSG_FILTER_CLOSE
				&& !fm.isOpenTroop(sessionInfo.curFriendUin))
		{
			ChatActivityUtils.showGroupMaskTip(ChatActivity.this, getString(R.string.aio_group_mask_tip), ChatActivityConstants.TIP_GROUP_MASK_DELAY);
		}
		
		                                             
		if ( sessionInfo.curType == VALUE.UIN_TYPE_TROOP && fm.isOpenTroop(sessionInfo.curFriendUin))
        {
		    fm.updateFavOpenTroopInfo(sessionInfo.curFriendUin);
        }
		
		
		long appShareId = intent.getLongExtra(Key.SHARE_RES_ID, 0);
		if (appShareId > 0)
		{
			uiHandler.postDelayed(new Runnable()
			{
				                                                            
				@Override
				public void run()
				{
					handleAppShareAction(app, ChatActivity.this, sessionInfo, msgObserver, intent);
				}
			}, 20);
		}

		if (sessionInfo.curType == VALUE.UIN_TYPE_DISCUSSION)
		{
			fm.initDiscussionMemberInfoListByUin(sessionInfo.curFriendUin);
			              
			refreshMultiVideoStatus(sessionInfo.curFriendUin);
            app.getGAudioNotifyCenter().addObserver(mGAudioObserver);
		} else {
		                  
		    refreshMultiVideoStatus(sessionInfo.curFriendUin);
		    app.getGAudioNotifyCenter().deleteObserver(mGAudioObserver);
        }

		if (QLog.isColorLevel())
		{
			QLog.d(TAG, QLog.CLR, "                                                    " + sessionInfo.troopUin + "              " + sessionInfo.curFriendUin
					+ "      " + sessionInfo.curType);
		}

		                           
                                                                       

		if (!isOpenFromShare)
		{
			isOpenFromShare = intent.getExtras().getBoolean(Key.SHARE_FLAG);
		}

		                                                            
		if (isOpenFromShare)
		{
			mTitleBtnRight.setVisibility(View.GONE);
		}
		else
		{
			updateTitleRightView();
		}

		final boolean refuseDialog = intent.getExtras().getBoolean(ChatActivityConstants.REFUSE_SHOW_SHARE_RESULT_DIALOG, false);
		                                                 
		                                             
		String shareAppName = null;
		if (isOpenFromShare && !refuseDialog)
		{
		    Bundle data = intent.getExtras();
			shareAppName = data.getString(Key.SHARE_REQ_APP_NAME);
			                                                             
			AbsStructMsg structMsg = StructMsgFactory.getStructMsg(data);
			AbsShareMsg shareMsg = null;
			if (structMsg != null && (structMsg instanceof AbsShareMsg))
			{
				shareMsg = (AbsShareMsg) structMsg;
			}
			qbShowShareResultDialog(shareMsg, shareAppName);
		}



		                              
		showTroopAssistTip();

		                        
		firstSendText = 1;
		
		                               
		canPullRefresh = true;
		setOverScrollHandleVisable(false);
	}

	private void loadTextDraft()
	{
        mDraftManager = DraftTextManager.getInstance(app);
        mDraftText = mDraftManager.getDraftText(sessionInfo.curFriendUin, sessionInfo.curType);

		input.setText(mDraftText == null ? "" : mDraftText);
		input.setSelection(input.getText().toString().length());
		input.setSelection(input.getText().toString().length());
	}

	private void saveTextDraft()
	{
		if (sessionInfo.curFriendUin != null && app.getMessageFacade() != null)
		{
                                                  
            if(mDraftManager == null) {
                mDraftManager = DraftTextManager.getInstance(app);
            }

                                                                                         
            if(StringUtil.isEmpty(mDraftText) && StringUtil.isEmpty(String.valueOf(input.getText()))) {
                return;
            }
            if(mDraftText != null && mDraftText.equals(String.valueOf(input.getText()))){
                return;
            }
            CharSequence text = input.getText();

            if (text != null && text.length() > 0)
			{
                DraftTextInfo info = new DraftTextInfo();
                info.uin = sessionInfo.curFriendUin;
                info.type = sessionInfo.curType;
                info.text = text.toString();
                info.time = System.currentTimeMillis();
                mDraftManager.saveDraftText(info);
			}
			else
			{
                mDraftManager.deleteDraftText(sessionInfo.curFriendUin, sessionInfo.curType);
			}

                             
            QQMessageFacade facade = app.getMessageFacade();
            DraftSummaryInfo summaryInfo = mDraftManager.getDraftSummaryInfo(sessionInfo.curFriendUin, sessionInfo.curType);
            if(summaryInfo != null) {
                facade.notifyDraftUpdated(sessionInfo.curFriendUin,sessionInfo.curType,summaryInfo.getSummary(),summaryInfo.getTime());
            }
            else {
                facade.notifyDraftUpdated(sessionInfo.curFriendUin,sessionInfo.curType,"",0);
            }
		}
	}

	@Override
	public boolean handleMessage(Message msg)
	{
		switch (msg.what)
		{
		case HANDLE_WHAT_READCONFIRM:
			if (QLog.isColorLevel())
			{
				QLog.d(TAG, QLog.CLR, "                             ");
			}
			                      
			uiHandler.sendEmptyMessageDelayed(HANDLE_WHAT_READCONFIRM, READ_CONFIRM_INTERVAL);
			ChatActivityFacade.sendReadConfirm(app, sessionInfo);
			break;
		case ChatActivityConstants.MSG_DEL_FRIEND:
			                                                                  
			String friendUin = (String) msg.obj;
			if (sessionInfo.curFriendUin.equals(friendUin))
			{
				finish();
			}
			break;
		case ChatActivityConstants.MSG_CUR_FILE_TRANSFERING:
			QQToast.makeText(ChatActivity.this, R.string.send_file_is_tranfering, Toast.LENGTH_LONG).show(getTitleBarHeight());
			break;
		case ChatActivityConstants.MSG_UPDATE_REFRESH_MUSIC_PLAY:
			refreshMusicItem();
			break;
		case ChatActivityConstants.MSG_VOICE_MAX_STOP:                            
			stopAudioRecord();
			break;
		case ChatActivityConstants.MSG_VOICE_DELAY_STOP:
			if (QLog.isColorLevel())
			{
			    QLog.d(QQRecorder.TAG, QLog.CLR, "                                    " + System.currentTimeMillis());
			}
			recorder.stop();
			                                          
			AudioUtil.muteAudioFocus(ChatActivity.this, false);
			break;
		case ChatActivityConstants.MSG_PTT_RESET_STANDBY:
			checkOrUpdatePttRecord(RecordStatus.standby, null, -1);
			break;
		case ChatActivityConstants.MSG_UPDATE_EMO_PANEL:
			if(mEmoPanel != null)
			{
				mEmoPanel.update();
			}
			break;
		case ChatActivityConstants.MSG_REFRESH_LIST:
			refreshListAdapter();
			break;
		case MSG_REFRESH_LIST_UNREAD:
			updateListUnRead(msg.arg1);
			break;
		case MSG_ON_PANEL_UPDATE:
			doPanelChanged(msg.arg1, msg.arg2);
			break;
		case ChatActivityConstants.MSG_START_VER_ANIM:
			if(QLog.isColorLevel()){
				QLog.d(LogTag.DEL_MSG, QLog.CLR, "                                                "+System.currentTimeMillis());
			}
			listAdapter.removeRow((ChatMessage)msg.obj);
			uiHandler.sendEmptyMessageDelayed(ChatActivityConstants.MSG_HANDLE_AFTER_DEL_ANIM, VER_ANIM_DURATION);
			break;
		                     
		case ChatActivityConstants.MSG_HANDLE_AFTER_DEL_ANIM:
            if (QLog.isColorLevel())
            {
                QLog.d(LogTag.DEL_MSG, QLog.CLR, "                                            " + System.currentTimeMillis());
            }
            if (horMoveView != null)
            {
                horMoveView.setVisibility(View.VISIBLE);
            }
            if (playDelAnimContainer != null)
            {
                if (playDelAnimContainer.getParent() != null)
                {
                    ((ViewGroup) playDelAnimContainer.getParent()).removeView(playDelAnimContainer);
                }
            }
            horMoveView = null;
            playDelAnimContainer = null;

            refresh(REFRESH_FLAG_RELOAD | SCROLL_FLAG_NEVER_SCROLL);
		    break;
		case ChatActivityConstants.MSG_UPDATE_FOR_NEWEST_FEED:
			instantUpdate(false);
			break;
		default:
			break;
		}
		return true;
	}
	
	boolean isShowGuide = false;
	boolean isShowPlusPanel = false;
	
	   
                                                  
    
    
	private void handleGuideAndTips()
	{
		if (!isFinishing()) {
			handleGuide();
			handlePlusPanel();
			handleTips();
		}
	}

	private void handleGuide() {
		if(SttManager.isSttSession(sessionInfo.curType)){
		    int guide = SttManager.showGuide(app, false);
		    if (guide != SttManager.GUIDE_EMPTY) {
		    	isShowGuide = true;
				if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_FRIEND) {
					SharedPreferences callSp = BaseApplication.getContext()
							.getSharedPreferences(AppConstants.CALL_PREF,
									Context.MODE_PRIVATE);
					SharedPreferences.Editor editor = callSp.edit();
					editor.putBoolean(
							AppConstants.Key.FREE_CALL_FIRST_ENTER_AIO_SHOW_EXT_PANEL,
							false);
					editor.commit();
				}
		        Intent i = new Intent(this, GuideActivity.class);
		        i.putExtra(GuideActivity.KEY_GUIDE, guide);
		        startActivity(i);
		        setInputStat(INPUT_STAT_PTT);
		    }
		    else
		    {
		    	isShowGuide = SttManager.sUpdating;
		    }
		}
		else
		{
			isShowGuide = SttManager.sUpdating;
		}
	}

	private void handlePlusPanel() {
		if(sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_FRIEND)
		{
			if (!isShowGuide) {
				SharedPreferences callSp = BaseApplication.getContext()
						.getSharedPreferences(AppConstants.CALL_PREF,
								Context.MODE_PRIVATE);
				isShowPlusPanel = callSp
						.getBoolean(
								AppConstants.Key.FREE_CALL_FIRST_ENTER_AIO_SHOW_EXT_PANEL,
								true);
				if (isShowPlusPanel) {
					SharedPreferences.Editor editor = callSp.edit();
					editor.putBoolean(
							AppConstants.Key.FREE_CALL_FIRST_ENTER_AIO_SHOW_EXT_PANEL,
							false);
					editor.commit();
					root.showExternalPanel(EXT_PANEL_PLUS);
				} else {
					if (hotFriendObserver == null) {
						hotFriendObserver = new ReduFriendObserver() {
							public void onReceive(int type, boolean isSuccess,
									Bundle data) {
								if (isSuccess) {
									handleTips();
								}
							}
						};
						app.registObserver(hotFriendObserver);
					}
				}
			}
		}
		else
		{
			isShowPlusPanel = false;
		}
	}

                                       
    
                                                                               
                               
                                    
    
	
	protected void openOptionActivity() {
		
		                                    
		FriendManager fm = (FriendManager) app.getManager(QQAppInterface.FRIEND_MANAGER);
		if (AppConstants.VALUE.UIN_TYPE_TROOP == sessionInfo.curType
				&& fm.isOpenTroop(sessionInfo.curFriendUin)) {
			Intent intent = new Intent(this, OpenTroopInfoActivity.class);
			intent.putExtra(AppConstants.Key.UIN, sessionInfo.curFriendUin);
			if (AppConstants.VALUE.UIN_TYPE_TROOP == sessionInfo.curType
					|| AppConstants.VALUE.UIN_TYPE_GROUP_MEMBER_STRANGER == sessionInfo.curType
					|| AppConstants.VALUE.UIN_TYPE_OPEN_TROOP_MEMBER_STRANGER == sessionInfo.curType
					|| AppConstants.VALUE.UIN_TYPE_DISCUSSION_FRIEND == sessionInfo.curType) {
				intent.putExtra(AppConstants.Key.TROOP_UIN, sessionInfo.troopUin);
			}
			startActivityForResult(intent, ChatActivityConstants.ENTER_CHATOPTION_REQUEST);
			return;
		}
				
		Intent intent = null;
		if (AppConstants.VALUE.UIN_TYPE_TROOP == sessionInfo.curType){
			intent = new Intent(this, ChatSettingForTroop.class);
			intent.putExtra(AppConstants.Key.TROOP_CODE, sessionInfo.troopUin);
			intent.putExtra(AppConstants.Key.TROOP_UIN, sessionInfo.curFriendUin);
		}else if (AppConstants.VALUE.UIN_TYPE_DISCUSSION == sessionInfo.curType){
			intent = new Intent(this, DiscussionInfoCardActivity.class);
			intent.putExtra(AppConstants.Key.UIN, sessionInfo.curFriendUin);
			intent.putExtra(AppConstants.Key.UIN_NAME, sessionInfo.curFriendNick);
			intent.putExtra(AppConstants.Key.UIN_TYPE, sessionInfo.curType);
			if (AppConstants.VALUE.UIN_TYPE_GROUP_MEMBER_STRANGER == sessionInfo.curType
					|| AppConstants.VALUE.UIN_TYPE_DISCUSSION_FRIEND == sessionInfo.curType) {
				intent.putExtra(AppConstants.Key.TROOP_UIN, sessionInfo.troopUin);
			}
		}else {
			intent = new Intent(this, ChatSettingActivity.class);
			intent.putExtra(AppConstants.Key.UIN, sessionInfo.curFriendUin);
			intent.putExtra(AppConstants.Key.UIN_NAME, sessionInfo.curFriendNick);
			intent.putExtra(AppConstants.Key.UIN_TYPE, sessionInfo.curType);
			if (AppConstants.VALUE.UIN_TYPE_GROUP_MEMBER_STRANGER == sessionInfo.curType
					|| AppConstants.VALUE.UIN_TYPE_DISCUSSION_FRIEND == sessionInfo.curType) {
				intent.putExtra(AppConstants.Key.TROOP_UIN, sessionInfo.troopUin);
			}
		}
		startActivityForResult(intent,
				ChatActivityConstants.ENTER_CHATOPTION_REQUEST);
	}

	   
                         
    
	void updateUnreadNumOnTitleBar()
	{
		if (mTitleShowUnread)
		{
			QQMessageFacade facade = app.getMessageFacade();
			                                                                            
			if (facade != null)
			{
				int unread = facade.getUnreadMsgsNum();
				if (unread > 0)
				{
					String unreadText = "" + unread;
					if (unread > 99)
					{
						unreadText = "   ";
					}
					mTitleBtnLeft.setText(getString(R.string.tab_title_chat) + " " + unreadText + " ");
				}
				else
				{
					mTitleBtnLeft.setText(getString(R.string.tab_title_chat));
				}
			}
		}
	}

	protected void updateTitleRightView()
	{
		int drawableId = R.drawable.skin_header_icon_single;
		switch (sessionInfo.curType)
		{
		case AppConstants.VALUE.UIN_TYPE_DISCUSSION:
		case AppConstants.VALUE.UIN_TYPE_TROOP:
			drawableId = R.drawable.skin_header_icon_group_selector;
			break;
		default:
			drawableId = R.drawable.skin_header_icon_single_selector;
			break;
		}
		
		mTitleBtnRight.setImageResource(drawableId);
	}
	
	protected void updateFriendNick()
	{
		String nick = null;
		if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_GROUP_MEMBER_STRANGER || sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_OPEN_TROOP_MEMBER_STRANGER || 
		        sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_DISCUSSION_FRIEND)
		{
			nick = ContactUtils.getDisplayName(app, sessionInfo.curFriendUin, sessionInfo.realTroopUin, ContactUtils.getEntry(sessionInfo.curType), ContactUtils.POS_AIO_TITLE);
		}
		else if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_CONTACT_STRANGER_FRIEND)
		{
			PhoneContactManager pm = (PhoneContactManager) app.getManager(QQAppInterface.CONTACT_MANAGER);
			PhoneContact contact = pm.queryContactByCodeNumber(sessionInfo.curFriendUin);
			if (contact != null)
			{
				nick = contact.name;
			}
			else if (sessionInfo.contactUin != null)
			{
				nick = ContactUtils.getDisplayName(app, sessionInfo.contactUin, sessionInfo.troopUin, ContactUtils.getEntry(sessionInfo.curType), ContactUtils.POS_AIO_TITLE);
			}
			else
			{
				nick = sessionInfo.curFriendUin;
			}
		}
		else
		{
			nick = ContactUtils.getDisplayName(app, sessionInfo.curFriendUin, sessionInfo.troopUin, ContactUtils.getEntry(sessionInfo.curType), ContactUtils.POS_AIO_TITLE);
			if ((nick == null || nick.equals(sessionInfo.curFriendUin)) && sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_WPA_3PARTY)
			{
				friendListHandler.getFriendInfo(sessionInfo.curFriendUin);
			}
		}
		sessionInfo.curFriendNick = nick;
	}

	Dialog pttMaskDialog;

	public void showPttMaskDialog()
	{
		if (pttMaskDialog == null)
		{
			pttMaskDialog = new Dialog(this, R.style.Dialog_Fullscreen);
			ImageView image = new ImageView(this);
			image.setBackgroundResource(R.drawable.aio_image_shade);
			AlphaAnimation alphaAnimation = new AlphaAnimation(0.1f, 1.0f);
			alphaAnimation.setDuration(500);
			image.startAnimation(alphaAnimation);
			pttMaskDialog.setContentView(image, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
		}
		pttMaskDialog.show();
	}

	public void dismissPttMaskDialog()
	{
		if (pttMaskDialog != null && pttMaskDialog.isShowing() && pttMaskDialog.getWindow() != null)
		{
			pttMaskDialog.dismiss();
		}
	}

	public int getCurType()
	{
		return sessionInfo.curType;
	}
	
	private void msgReport(int entrance, int entrance2)
	{
		msgReport(entrance, entrance2, "");
	}
	
	   
    
                   
                    
                              
                     
                            
    
	private void msgReport(int entrance, int entrance2, String imageCount)
	{
		if (entrance2 == -1)
		{
			if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_FRIEND)
			{
				String onlineStatus = "";
				String terminal = "";
				if (entrance == ChatActivityConstants.ENTRANCE_CONTACTS_GROUP)
				{
					FriendsManagerImp fmi = (FriendsManagerImp) app.getManager(QQAppInterface.FRIEND_MANAGER);
					Friends friend = fmi.findFriendEntityByUin(sessionInfo.curFriendUin);
					if (friend != null)
					{
						onlineStatus = "" + ContactUtils.getFriendStatus(friend);
						terminal = "" + ContactUtils.getFriendTermType(friend, app);
					}
				}
				StatisticAssist.addMsgReport(app, "   ", app.getAccount(), sessionInfo.curFriendUin, "   ", entrance + "", "", "", onlineStatus, terminal,
						firstSendText + "");
				firstSendText = 0;
			}
		}
		else
		{
			String uinType = null;
			switch (sessionInfo.curType)
			{
			case AppConstants.VALUE.UIN_TYPE_FRIEND:
				uinType = "   ";
				break;
			case AppConstants.VALUE.UIN_TYPE_TROOP:
				uinType = "   ";
				break;

			case AppConstants.VALUE.UIN_TYPE_DISCUSSION:
				uinType = "       ";
				break;

			default:
				break;
			}
			if (uinType != null)
			{
				StatisticAssist.addMsgReport(app, uinType, app.getAccount(), sessionInfo.curFriendUin, "   ", "", entrance2 + "", imageCount, "", "", "");
			}
		}
	}

	   
                               
    
                 
    
	void handleForwardData(Intent intent)
	{
		int forwardType = intent.getIntExtra(Key.FORWARD_TYPE, ForwardUtils.FORWARD_TYPE.INVALID_TYPE);
		if(forwardType == ForwardUtils.FORWARD_TYPE.INVALID_TYPE){
			return;
		}
		intent.removeExtra(Key.FORWARD_TYPE);
		intent.getExtras().remove(Key.FORWARD_TYPE);
		                                                         
		isBack2Root = getIntent().getExtras().getBoolean("           ");
		String forwardFilePath = intent.getStringExtra(Key.FORWARD_FILEPATH);

		switch (forwardType)
		{
		case ForwardUtils.FORWARD_TYPE.TEXT:
			String forwardText = intent.getStringExtra(Key.FORWARD_TEXT);
			ChatActivityFacade.sendMessage(app, ChatActivity.this, sessionInfo, forwardText);
			break;
		case ForwardUtils.FORWARD_TYPE.FILE:
			final ForwardFileInfo mForwardFileInfo = intent.getParcelableExtra(FMConstants.STRING_FORWARD_FILEINFO);
			ChatActivityFacade.forwordForFile(app, ChatActivity.this, sessionInfo, intent, forwardFilePath, mForwardFileInfo);
			break;
		case ForwardUtils.FORWARD_TYPE.PHOTO:
			boolean isFromShare = intent.getBooleanExtra("           ", false);
			boolean sendMultiple = intent.getBooleanExtra("            ", false);

			if (isFromShare)
			{
				if (sendMultiple)
				{
					                           
					                                           
					                                          
					                                                  
					                                             
					                                           
					    
				}
				else
				{
					String forwardTaskKey = intent.getStringExtra(Key.FORWARD_DOWNLOAD_IMAGE_TASK_KEY);
					String forwardImageOrgUin = intent.getStringExtra(Key.FORWARD_DOWNLOAD_IMAGE_ORG_UIN);
					int forwardImageOrgUinType = intent.getIntExtra(Key.FORWARD_DOWNLOAD_IMAGE_ORG_UIN_TYPE, -1);                           
					String forwardImageOrgServerpath = intent.getStringExtra(Key.FORWARD_DOWNLOAD_IMAGE_SERVER_PATH);
					long forwardImageOrgItemId = intent.getLongExtra(Key.FORWARD_DOWNLOAD_IMAGE_ITEM_ID, 0);                         
					msgReport(entrance, 3);
					ChatActivityFacade.sendPic(app, ChatActivity.this, sessionInfo, forwardFilePath, forwardImageOrgServerpath, forwardImageOrgUin,
							forwardImageOrgItemId, forwardImageOrgUinType, forwardTaskKey);
					instantUpdate(true);
				}
			}
			else
			{
				                                
				intent.putExtra(Key.FORWARD_UIN_TYPE, sessionInfo.curType);
				intent.putExtra(Key.SENDER_TROOP_UIN, sessionInfo.troopUin);
				intent.putExtra(Key.FORWARD_PEER_UIN, sessionInfo.curFriendUin);
				intent.putExtra(Key.FORWARD_SELF_UIN, app.getCurrentAccountUin());
				PicReq req = PicBusiManager.createPicReq(PicReq.PIC_CMD_FORWARD, MessageHandler.SEND_MSG_BUSINESS_TYPE_FORWARD_PIC, intent);
				PicBusiManager.launch(req,app);
                                                                          
                                                                
                                  
                                                                  
                                                                   
                                                                       
                                                                         
                                                                         
                                                                    
                                               
       
			}
			break;
		case ForwardUtils.FORWARD_TYPE.PTT:
		case ForwardUtils.FORWARD_TYPE.PTT_CENTER:
			long id = ChatActivityFacade.forwardForPtt(app, sessionInfo, forwardFilePath);
			if (id != -1)
			{
				instantUpdate(true);
			}
			break;
		case ForwardUtils.FORWARD_TYPE.MAP:
			String forwardLat = intent.getStringExtra(Key.FORWARD_LATITUDE);
			String forwardLon = intent.getStringExtra(Key.FORWARD_LONGITUDE);
			String forwardLocation = intent.getStringExtra(Key.FORWARD_LOCATION);
			ChatActivityFacade.forwardForMap(app, sessionInfo, forwardLat, forwardLon, forwardLocation);
			break;
		case ForwardUtils.FORWARD_TYPE.STRUCTING_MSG:
		    handleAppShareAction(app, this, sessionInfo, msgObserver, intent);
			break;
		case ForwardUtils.FORWARD_TYPE.COMPOSITE:                                    
			Bundle bundle = intent.getExtras();
			ArrayList<Parcelable> ItemArrayList = bundle.getParcelableArrayList(Key.FORWARD_COMPOSITE);
			for (Parcelable parcelable : ItemArrayList) {
				switch (((SectionBase)parcelable).mForwardType) {
				case ForwardUtils.FORWARD_TYPE.TEXT:
					ChatActivityFacade.sendMessage(app, ChatActivity.this, sessionInfo, ((Section_Text)parcelable).mTextString);
					break;
				case ForwardUtils.FORWARD_TYPE.PHOTO:
					String forwardTaskKey = intent.getStringExtra(Key.FORWARD_DOWNLOAD_IMAGE_TASK_KEY);
					String forwardImageOrgUin = intent.getStringExtra(Key.FORWARD_DOWNLOAD_IMAGE_ORG_UIN);
					int forwardImageOrgUinType = intent.getIntExtra(Key.FORWARD_DOWNLOAD_IMAGE_ORG_UIN_TYPE, -1);                           
					String forwardImageOrgServerpath = intent.getStringExtra(Key.FORWARD_DOWNLOAD_IMAGE_SERVER_PATH);
					long forwardImageOrgItemId = intent.getLongExtra(Key.FORWARD_DOWNLOAD_IMAGE_ITEM_ID, -1);                         
					ChatActivityFacade.sendPic(app, ChatActivity.this, sessionInfo, ((Section_Pic)parcelable).mBigURL, forwardImageOrgServerpath, forwardImageOrgUin,
							forwardImageOrgItemId, forwardImageOrgUinType, forwardTaskKey);
					instantUpdate(true);
					break;
				default:
					break;
				}
			}
			break;
		case ForwardUtils.FORWARD_TYPE.MARKET_FACE:
			ReportController.reportClickEvent(app, "       ", "", getIntent().getStringExtra(Key.UIN), 
					"       ", 
					"              ", 
				    0, 
				    0, 
				    "", "", "", "");			
			PicEmoticonInfo emoticonInfo = MarketFaceItemBuilder.currentEmocionInfo;
			emoticonInfo.send(app,this.getApplicationContext(),null,sessionInfo);
			break;
		default:
			break;
		}
	}

	   
                                     
    
	private void qbShowShareResultDialog(final AbsShareMsg msg, String shareAppName)
	{
		                              
		if (shareResultDlg != null) {
			shareResultDlg.show();
			return;
		}
		shareResultDlg = new ShareAioResultDialog(this);
		final Context context = this;
		String str = this.getString(R.string.share_aio_dialog_btn_back);
		if (shareAppName != null) {
			str += shareAppName;
		}
		DialogInterface.OnClickListener listener = new DialogInterface.OnClickListener() {
			@Override
            public void onClick(DialogInterface dialog, int which) {
                                                  
                switch (which) {
                case ShareAioResultDialog.WHITCH_BACK:
                    if (QLog.isColorLevel()) {
					QLog.i(TAG, QLog.CLR, "                            ");
				}
                    if (msg != null) {
					               
					Util.reportStructEvent(app, "", "      ", msg.mSourceAppid, msg.mMsgServiceID, "    ");
                                                                     
					ForwardOperations.startSdkCallback(ChatActivity.this, true, ForwardOperations.SDK_SHARE_TO_QQ_ACTION, msg.mSourceAppid);
				}
				Util.setBackResult(context, 0, "", "");
				finish();
                    break;
                case ShareAioResultDialog.WHITCH_STAY:
                    if (msg != null) {
					               
					Util.reportStructEvent(app, "", "      ", msg.mSourceAppid, msg.mMsgServiceID, "    ");
				}
                    break;
			}
            }
        };
		shareResultDlg.setBackButton(str, listener);
		shareResultDlg.setStayButton(listener);
		shareResultDlg.show();
	}

	private void sendGetFriendCardRequest()
	{
		if (StringUtil.verifyUin(sessionInfo.curFriendUin))
		{
			CardHandler cardhandler = (CardHandler) app.getBusinessHandler(QQAppInterface.CARD_HANLDER);
			cardhandler.getHYMakeFriendsCard(app.getCurrentAccountUin(), sessionInfo.curFriendUin, (byte) 1, 0);
		}
	}
	
	   
                                    
               
              
           
    
	private void genDiscussTitle(String name, String uin, TextView view)
	{
		if(name == null){
			if (QLog.isColorLevel()){
				QLog.d(TAG, QLog.CLR, "                             ");
			}
			return;
		}
		FriendManager fm = (FriendManager) app.getManager(QQAppInterface.FRIEND_MANAGER);
		int dissionCount = fm.getDiscussionMemberNum(sessionInfo.curFriendUin);
		if (dissionCount <= 0)
		{
			view.setText(name);
			return;
		}
		int maxTitleWidth = getResources().getDisplayMetrics().widthPixels;
		RelativeLayout.LayoutParams param = (RelativeLayout.LayoutParams) ((View) mTitleText.getParent()).getLayoutParams();
		maxTitleWidth -= param.leftMargin * 2;
		TextPaint fontPaint = mTitleText.getPaint();
		float max = maxTitleWidth - fontPaint.measureText(String.format("       ", dissionCount)) - 4 * getResources().getDisplayMetrics().density;       
																																					      
		if (max > 0)
		{
			float width = fontPaint.measureText(name);
			if (width > max)
			{
				String ext = "   ";
				max = max - fontPaint.measureText(ext);
				String subName = name;
				while (max > 0 && width > max && subName.length() > 0)
				{
					subName = subName.substring(0, subName.length() - 1);
					width = fontPaint.measureText(subName);
					if (width == 0 && subName.length() > 0)
					{
						                                                                     
						width = max + 1;
					}
					if (QLog.isColorLevel())
					{
						QLog.d(TAG, QLog.CLR, "                               " + width);
					}
				}
				if (max > 0 && subName.length() > 0)
				{
					name = subName + ext;
				}
			}
		}
		view.setText(String.format("         ", name, dissionCount));
	}
	
	void updateOnlineStatus()
	{
		if (!mSingleTitle)
		{
			FriendManager fm = (FriendManager) app.getManager(QQAppInterface.FRIEND_MANAGER);
			Friends f = fm.findFriendEntityByUin(sessionInfo.curFriendUin);
			if (f != null
					&& ContactUtils.getFriendStatus(f.status, f.detalStatusFlag, f.isMqqOnLine, f.sqqOnLineState, f.iTermType) != ContactUtils.STATUS_OFFLINE)
			{
				final String statusName = ContactUtils.getStatusName(this, f.status, f.detalStatusFlag, f.isMqqOnLine, f.sqqOnLineState, f.isIphoneOnline == 1, f.iTermType);
				
				setSubTitleVisable(true);
				mSubTilteText.setText(statusName);
				if (TALK_BACK) {
					mSubTilteText.setContentDescription(statusName);
				}
			}
			                                         
			else if(mSubTilteText.getVisibility() == View.VISIBLE)
			{
				setSubTitleVisable(false);
				if (tipsForFreeCall != null && tipsForFreeCall.getVisibility() == View.VISIBLE) {
					ChatActivityFacade.clearShownFreeCallBarFlag();
					handleTips();
				}
			}
		}
	};
	
	   
                                   
                  
    
	private void setSubTitleVisable(boolean visable)
	{
		if(visable && mSubTilteText.getVisibility() == View.GONE)
		{
			mSubTilteText.setVisibility(View.VISIBLE);
			mTitleText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
		}
		else if(!visable && mSubTilteText.getVisibility() == View.VISIBLE)
		{
			mSubTilteText.setVisibility(View.GONE);
			mTitleText.setTextSize(TypedValue.COMPLEX_UNIT_SP, 19);
		}
	}
	
	@Override
	public void onClick(View v)
	{
		int id = v.getId();

		switch (id)
		{
		case R.id.ivTitleBtnLeft:
			
			leftBackEvent();
			break;
		case R.id.ivTitleBtnRightImage:
			
			openOptionActivity();
			                                                         
			if (QLog.isDevelopLevel()){
				QLog.d("           ", QLog.DEV, "           " + sessionInfo.curType);
			}
			ReportController.reportClickEvent(app, "       ", "", "", "   ", "           ", 0, 0, ChatActivityUtils.getAioMoreFlag(sessionInfo.curType), "", "", "");
			
			break;
		case R.id.msg_unread_count:
			mReadedCnt = listAdapter.getCount();
			if(mReadedCnt > 0)
			{
				                    
				                                                                 
				                           
				listView.setSelection(listView.getCount() - 1);
			}
			v.setVisibility(View.GONE);
			break;
			
		case R.id.fun_btn:
			         
			if(mInputStat == INPUT_STAT_DEFAULT && input.getText().length() > 0)
			{
				send();
			}
			else if(mInputStat == INPUT_STAT_PTT)
			{
				root.hideAllPanel();
				setInputStat(INPUT_STAT_DEFAULT);
			}
			else
			{
				setInputStat(INPUT_STAT_PTT);
			}
			break;
		case R.id.msgbox:
			Intent intent = (Intent) v.getTag();
			                                                                 
			int type = intent.getExtras().getInt(Key.UIN_TYPE);
			if (type == VALUE.UIN_TYPE_FRIEND)
			{
				String fUin = intent.getExtras().getString(Key.UIN);
				if (!ChatActivityUtils.checkIsFriend(app, fUin))
				{
					intent.removeExtra(Key.UIN_TYPE);
					intent.putExtra(Key.UIN_TYPE, VALUE.UIN_TYPE_STRANGER_FRIEND);
				}
			}
			                                                               
			                                                                                                                                                         
			                                                                                                       
			intent.putExtra(Key.KEY_MESSAGE_BOX_CLICK, true);
			startActivity(intent);
			v.setVisibility(View.GONE);
			
			                                                                                               
			if(mTroopAssistTip)
			{
                                                 
				aioTipsController.hideHeaderTips();
				TroopAssistantManager.getInstance().setTroopIgnoreTip(app, sessionInfo.curFriendUin);
			}
			
			break;
		case R.id.emo_btn:
			setInputStat(INPUT_STAT_DEFAULT);
			                                               
			if(root.getCurrentPanel() == EXT_PANEL_EMOTCATION)
			{
				root.showExternalPanel(XPanelContainer.SOFT_INPUT_PANEL);
			}
			else
			{
				root.showExternalPanel(EXT_PANEL_EMOTCATION);
			}
			break;
		case R.id.plus_btn:
			if(root.getCurrentPanel() == EXT_PANEL_PLUS)
			{
				root.hideAllPanel();
			}
			else
			{
				root.showExternalPanel(EXT_PANEL_PLUS);
				                                                                                                                   
				setInputStat(INPUT_STAT_DEFAULT);
			}
			break;
		case R.id.aio_speaker_phone_layout:
			app.setLoudSpeakerState(!speakerPhoneOn);
			mpm.updateSpeakPhone();
			break;
		case R.id.msgbox_multi_video:
		case R.id.button_multi_video:
		                   
		    ChatActivityUtils.startGroupAudio(app, this, sessionInfo.curFriendUin);
		    break;
		default:
			break;
		}
	}

	@Override
	protected void doOnDestroy()
	{
	    super.doOnDestroy();
		if (mIsSimpleDestroy) {
			return;
		}
		removeBusinessObservers();
		app.removeHandler(this.getClass());
		sessionInfo.mLastReadMsgId = -1;
		countDownTimer = null;
		if(mpm != null) {
		    mpm.unBindUI();
		    mpm.stop(true);
		}
		if (mScrollerRunnable != null)
		{
			mScrollerRunnable.stop();
		}
		if (app.getMessageFacade() != null)
		{
			app.getMessageFacade().destroyChatActivity();
		}

		if (app.getFileManagerProxy() != null)
		{
			app.getFileManagerProxy().removeMemNotWorkingEntity();
		}
		
		listAdapter.destory();
		if(mEmoPanel != null)
		{
			mEmoPanel.destory();
			mEmoPanel = null;
		}

		stopAudioRecord();

		                           
		AITranslator.getInstance().cancelRequests(ChatActivity.this, true);

		                                                                                   
		               
		                                                             
		               
		BubbleUtils.clearCache();
		
		if(mRealtimeBgProxy != null){
			mRealtimeBgProxy.onDestroy();
		}
		
		if (shareResultDlg != null) {
		    shareResultDlg.dismiss();
		    shareResultDlg = null;
		}
	}

	
	
	@Override
	public void finish()
	{
		saveTextDraft();
		if(app != null){
			FileTransferManager ftfm = FileTransferManager.getsIntances(app);
			if(ftfm != null){
				ftfm.clearCallBacks();
			}
		}
		super.finish();
	}

	@Override
	protected void doOnStart()
	{
		super.doOnStart();
		mpm.bindUI(listView, listAdapter, this);
	}
	
	@Override
	protected void doOnStop()
	{
		if (troopFileErrorHandlerObserver != null) {
			TroopFileError.removeErrorHandleObserver(app, troopFileErrorHandlerObserver);
		}

		super.doOnStop();
		if (countDownTimer != null)
		{
			countDownTimer.stop();
		}
                         
		needUpload = false;
	}

	@Override
	protected void doOnPause()
	{
		super.doOnPause();		
		if(mRealtimeBgProxy != null){
			mRealtimeBgProxy.onPause();
		}
		
		TextTranslationItemBuilder.reportTranslateCountData(sessionInfo.curType, app);
		if (countDownTimer != null)
		{
			countDownTimer.pause();
		}
		app.getMessageFacade().pauseChatActivity();
		if (isHaveNewAfterIn)
		{
			ChatActivityFacade.sendReadConfirm(app, sessionInfo);
		}
		   
		uiHandler.removeMessages(ChatActivityConstants.HANDLE_WHAT_READCONFIRM);
		if (QLog.isColorLevel())
		{
			QLog.d(TAG, QLog.CLR, "                                          ");
		}
		unregisterReceiver(mReceiver);
                          
		if(mEmoPanel != null)
		{
			mEmoPanel.onPause();
		}
		if (listView != null)
		{
			listView.pause();
		}
		if (audioListenDlg != null) {
		    audioListenDlg.onPause();
		}
                                                                                                                                   
		
		                                 
		FriendManager fm = (FriendManager) app
				.getManager(QQAppInterface.FRIEND_MANAGER);
		if (AppConstants.VALUE.UIN_TYPE_TROOP == sessionInfo.curType
				&& fm.isOpenTroop(sessionInfo.curFriendUin)) {
			long expTimeSpan = System.currentTimeMillis() - inOpenTroopTime;
					
			if (expTimeSpan >= 1000)
			{
				ReportController.reportClickEvent(app, "       ", "", "",
						"          ", "               ", 0, 0, sessionInfo.curFriendUin,
						"" + (1 + expTimeSpan / 1000), "", "");
			}
		}
		
		                 
		needUpload = false;
	}

	@Override
	protected void doOnResume()
	{
		super.doOnResume();
		if (countDownTimer != null)
		{
			countDownTimer.resume();
		}
		Looper.myQueue().addIdleHandler(new IdleHandler()
		{

			@Override
			public boolean queueIdle()
			{
				onShow();
				return false;
			}

		});
		app.getMessageFacade().resumeChatActivity(sessionInfo.curFriendUin, sessionInfo.curType);
                                                                                                                                                            
		sendOnEnterEnabled = SettingCloneUtil.readValue(ChatActivity.this, null, 
				getString(R.string.pref_key_send_msg_on_enter), 
				AppConstants.QQSETTING_ENTER_SENDMSG_KEY, false);
		if (sendOnEnterEnabled)
		{
			input.setImeOptions(EditorInfo.IME_ACTION_SEND);
			if (enterForSend == null)
			{
				enterForSend = new EnterForSend();
			}
			input.setOnEditorActionListener(enterForSend);
			input.setOnKeyListener(enterForSend);
		}
		else
		{
			input.setImeOptions(EditorInfo.IME_NULL);
			input.setOnEditorActionListener(null);
			input.setOnKeyListener(null);
		}
		
		                     
		if(ChatBackground.getChatBackground(this, app.getCurrentAccountUin(), sessionInfo.curFriendUin, true,sessionInfo.chatBg))
		{
			root.setBackgroundDrawable(sessionInfo.chatBg.img);
		}
		
		                                                                     
		SharedPreferences pref = BaseApplication.getContext().getSharedPreferences(AppConstants.SHARE_PREFERENCE_NAME, Context.MODE_PRIVATE);
		no_auto_reply_list = pref.getString(AppConstants.Preferences.NO_AUTO_REPLY + app.getCurrentAccountUin(), "");

		refresh(REFRESH_FLAG_RELOAD_IMMEDIATELLY);
		                                                                     
		                   
		                                 
		    

		                                                   
		if (AppConstants.VALUE.UIN_TYPE_DISCUSSION == sessionInfo.curType)
		{
			FriendManager fm = (FriendManager) app.getManager(QQAppInterface.FRIEND_MANAGER);
			DiscussionInfo info = fm.findDiscussionInfoByID(sessionInfo.curFriendUin);
			if (null != info && info.discussionName != null)
			{
				sessionInfo.curFriendNick = info.discussionName;
				genDiscussTitle(sessionInfo.curFriendNick, info.uin, mTitleText);
			}
		}

		                                      
		                                                                       
		            
		                     
		    

		hasUnread = initHaveUnRead();
		if (hasUnread)
		{
			ChatActivityFacade.sendReadConfirm(app, sessionInfo);
		}
		else if (sessionInfo.mLastReadMsgId == -1)
		{
			sessionInfo.mLastReadMsgId = ChatActivityFacade.getLastMsgIdOrTime(app, sessionInfo);
		}
		registerBoradcast();
		app.getMessageFacade().setReaded(sessionInfo.curFriendUin, sessionInfo.curType);
		try{
			if(sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_FRIEND){
				SystemMsgController.getInstance().sendSystemMsgAIODataReadConfirm(Long.parseLong(sessionInfo.curFriendUin), app);
			}else if(sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_TROOP && sessionInfo.troopUin != null){
				SystemMsgController.getInstance().sendSystemMsgAIODataReadConfirm(Long.parseLong(sessionInfo.troopUin), app);
			}
		}catch(Exception e){
			
		}
		                                     
		uiHandler.removeMessages(HANDLE_WHAT_READCONFIRM);
		uiHandler.sendEmptyMessage(HANDLE_WHAT_READCONFIRM);
		
		if (QLog.isColorLevel())
		{
			QLog.d(TAG, QLog.CLR, "                                                       " + hasUnread + "                " + sessionInfo.mLastReadMsgId);
		}
                              
                        
		if(mEmoPanel != null)
		{
			mEmoPanel.onResume();
		}

		if (QLog.isColorLevel())
		{

			QLog.d(TAG, QLog.CLR, "                                            " + sessionInfo.troopUin + "              " + sessionInfo.curFriendUin + "      " + sessionInfo.curType);

		}
		checkAndQueryMsgBubbleId();
                                          
                        
		
		if (troopFileErrorHandlerObserver != null) {
			TroopFileError.addErrorHandleObserver(app, troopFileErrorHandlerObserver);
		}

		                                             
		inOpenTroopTime = System.currentTimeMillis();
	}

	private boolean initHaveUnRead()
	{
		return app.getConversationFacade().getUnreadCount(sessionInfo.curFriendUin, sessionInfo.curType) > 0;
	}

	@Override
	protected void doOnNewIntent(Intent intent)
	{
		super.doOnNewIntent(intent);
		Bundle extras = intent.getExtras();
		if (extras != null && extras.getBoolean(EmojiStrategy.KEY_EMOJIMALL_CLOSE_BACK, false))
		{
			                                                
			QLog.d(TAG, QLog.USR, "                                                    ");
			return;
		}
		if (!isValidChat(intent)) {
			finish();
			return;
		}
		                                                               
		boolean startByMessageBoxClick = intent.getBooleanExtra(Key.KEY_MESSAGE_BOX_CLICK, false);
		if(startByMessageBoxClick){
			isBack2Root = true;
			mTitleBtnLeft.setText(R.string.tab_title_chat);
			mTitleBtnLeft.setContentDescription("                  ");
		}else{
			if (extras != null)
			{
				isBack2Root = extras.getBoolean("           ");
				                                                                                                       
				if(isBack2Root){
					mTitleBtnLeft.setText(R.string.tab_title_chat);
					mTitleBtnLeft.setContentDescription("                  ");
				}
			}
		}
		speakerPhoneOn = app.getLoudSpeakerState();
		
		String uin = intent.getStringExtra(Key.UIN);
		int uinType = intent.getIntExtra(Key.UIN_TYPE, -1);
		boolean isNeedUpdate = intent.getBooleanExtra("            ", false);
		if (sessionInfo.curFriendUin == null) {
			QLog.d(TAG, QLog.USR,
					"                                                                     "
							+ sessionInfo.curType + "          "
							+ sessionInfo.troopUin + "          " + entrance);
		}
		if (!uin.equals(sessionInfo.curFriendUin) || !(sessionInfo.curType == uinType)) {
			mIsCurrentSession = false;
		} else {
			mIsCurrentSession = true;
		}
		                                      
		if (!mIsCurrentSession || extras.containsKey(Key.FORWARD_TYPE))
		{
			                                                         
			updateSession(intent);
			
		}
		else if (dirty != 0 || isNeedUpdate)
		{
			                                             
			instantUpdate(true);
		}
        else if (extras.getLong(Key.SHARE_RES_ID, 0) > 0) {
                                                                  
			handleAppShareAction(app, ChatActivity.this, sessionInfo, msgObserver, intent);
		}
		              
		needUpload = true;
		setIntent(intent);
		handleRequest(intent,CALLER_ON_NEW_INTENT);
	}
	
	
	private void handleRequest(Intent intent,int caller)
	{
		int requestCode = intent.getIntExtra(AlbumConstants.REQUEST_CODE, -1);
		if (QLog.isColorLevel())
		{
			QLog.d(TAG, QLog.CLR, "                          " + requestCode);
		}
		                                                               
		if (requestCode == ChatActivityConstants.SELECT_AND_SEND_PHOTO_REQUEST
				|| requestCode == ChatActivityConstants.UPLOAD_SHOTPHOTO_REQUEST) {
			uploadPreviewPhoto(intent);
		} else if (requestCode == ChatActivityConstants.REQUEST_SECRETFILE_SELECTPHOTO
				|| requestCode == ChatActivityConstants.REQUEST_SECRETFILE_SHOTPHOTO) {
			uploadPreviewPhoto(intent);
		}
		if(caller == CALLER_ON_CREATE){
			ChatActivityFacade.incrementEnterSomeoneAIOTimes(app, sessionInfo.curFriendUin);
		}else if(caller == CALLER_ON_NEW_INTENT){
			if(!mIsCurrentSession){
				ChatActivityFacade.incrementEnterSomeoneAIOTimes(app, sessionInfo.curFriendUin);
			}
		}

	}
	                                                 
	private void getTroopInfoIfNeed() {
		if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_TROOP) {
			FriendManager fm = (FriendManager) app
					.getManager(QQAppInterface.FRIEND_MANAGER);
			if (fm == null) {
				return;
			}
			TroopInfo troopInfo = fm.findTroopInfo(sessionInfo.curFriendUin);
			if (troopInfo != null && troopInfo.wMemberNum == 0) {
				try {
					long troopUin = Long.parseLong(sessionInfo.curFriendUin);
					ArrayList<Long> troop = new ArrayList<Long>();
					troop.add(troopUin);
					FriendListHandler friendListHandler = (FriendListHandler) app
							.getBusinessHandler(QQAppInterface.FRIENDLIST_HANDLER);
					friendListHandler.getMultiTroopInfo(troop);
					if (QLog.isDevelopLevel()) {
						QLog.d(TAG, QLog.CLR,
								"                                               "
										+ sessionInfo.curFriendUin);
					}
				} catch (Exception e) {
					if (QLog.isDevelopLevel()) {
						QLog.d(TAG, QLog.CLR, "                         ");
					}
				}
			}
		}
	}
	

            
                                                                     
    
                                   
                                                      
    

	@Override
	protected void doOnActivityResult(int requestCode, int resultCode, Intent data)
	{
		super.doOnActivityResult(requestCode, resultCode, data);
                                                         
		boolean progressToFinish = false;

		                                                           
		                                   
		updateAddFriendAndShieldView();

		                                                           
		                                   
		updateAddFriendAndShieldView();
		if (data != null && data.getExtras() != null)
		{
			                                             
			progressToFinish = data.getExtras().getBoolean("             ");
		}

		if (requestCode == ChatActivityConstants.REQUEST_SECRETFILE_SHOTPHOTO
				|| (requestCode == PhotoConst.WAIT_UTIL_FINISH))
		{
			                                                                                                            
			mCanLock = false;
		}
		else if (requestCode == ChatActivityConstants.ENTER_CHATOPTION_REQUEST) {
			                                                                                                                  
			if(sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_TROOP && mTroopAssistTip 
					&& TroopAssistantManager.getInstance().checkTroopIgnoreTip(app, sessionInfo.curFriendUin))
			{
				                                            
				mTroopAssistTip = false;
                                                 
				aioTipsController.hideHeaderTips();
			}
		}

                              
                                                           
     
                                 
      
                              
       
                                                                                                                        
       
             
      
         
      
               
      
     
        
		if (requestCode == ChatActivityConstants.REQUEST_CODE_OPEN_EMOJIMALL_HOME)
		{
			                                             
			EmojiHomeStrategy.statisticEmojiHomePageInfo(BaseApplication.getContext(), app.getCurrentAccountUin(), data);
		}
		else if (requestCode == ChatActivityConstants.VIEW_PROCESS && !progressToFinish)
		{
			instantUpdate(false);
		}
		else if (requestCode == ChatActivityConstants.VIEW && resultCode != RESULT_OK)
		{
			instantUpdate(false);
		}
                                                                   
     
                              
     
		else if (resultCode == RESULT_OK)
		{
			switch (requestCode)
			{
			                         
			                            
			         
			case ChatActivityConstants.LBS_REQUEST:
				if (mQQMapActivityProxy != null)
				{
					mQQMapActivityProxy = null;
				}
				
				if (data != null)
				{
					if (QLog.isColorLevel())
					{
						QLog.d("   ", QLog.CLR, "                                                  ");
					}
					Bundle b = data.getExtras();
					if (b != null) {
						String latitude = b.getString("        ");
						String longitude = b.getString("         ");
						String description = b.getString("           ");
						ChatActivityFacade.forwardForMap(app, sessionInfo, latitude, longitude, description);
					}
				}
				break;
			case ChatActivityConstants.ENTER_HISTORY_REQUEST:
				instantUpdate(false);
				break;
                                                              
                                                                                                                      
                                         
            
			                          
			case ChatActivityConstants.REQUEST_SECRETFILE_SHOTPHOTO:
				ChatActivityUtils.enterSecretFilePreivew(app, this, sessionInfo, PhotoPreviewConstant.REQUESTCODE_SECRETFILE_SHOTPHOTO, data,
						"                            ");
				break;
			case ChatActivityConstants.UPLOAD_WATERMARK_SHOTPHOTO_REQUEST:
				Intent intent = new Intent(this, SendPhotoActivity.class);
				ArrayList<String> path = new ArrayList<String>();
				path.add(data.getData().getPath());
				intent.putExtra(Key.UIN, sessionInfo.curFriendUin).putExtra(Key.UIN_TYPE, sessionInfo.curType).putExtra(Key.TROOP_UIN, sessionInfo.troopUin)
						.putExtra(PhotoConst.INIT_ACTIVITY_CLASS_NAME, ChatActivity.class.getName())
						.putExtra(PhotoConst.INIT_ACTIVITY_PACKAGE_NAME, "                    ")
						.putExtra(ChatActivityConstants.IMAGE_SENDER_TAG, "                                                                     ")
						.putStringArrayListExtra(PhotoConst.PHOTO_PATHS, path);
				startActivity(intent);
				break;
			case ChatActivityConstants.UPLOAD_SHOTPHOTO_REQUEST:
				ChatActivityUtils.enterPhotoPreivew(app, this, sessionInfo, PhotoPreviewConstant.REQUESTCODE_AIO_SHOTPHOTO, data, "                        ");
				break;
			case ChatActivityConstants.REQUEST_ADD_CUSTOMEMOTION:              
				ChatActivityUtils.enterPhotoPreivew(app, this, sessionInfo, requestCode, data, "                                               ");
				break;
			case ChatActivityConstants.UPLOAD_PREVIEWPHOTO_REQUEST:
				uploadPreviewPhoto(data);
				break;
                                                   
                                                                                       
                                     
                       
       
                                                                                
                      
        
                             
                                                                                                                 
                                               
              
        
                               
                                                           
                                             
                                             
                               
           
       
            
			case ChatActivityConstants.VIDEO_REQUEST:
				instantUpdate(true);
				getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
				break;
			case ChatActivityConstants.FORWARD_REQUEST:
				                                             
				                                                   
				                                                      
				startChatAndSendMsg(data.getExtras());
				            
				break;
			case ChatActivityConstants.ENTER_CHATOPTION_REQUEST:
				boolean isNeedFinish = data == null ? false : data.getExtras()
						.getBoolean(AppConstants.Key.IS_NEED_FINISH);
				if (isNeedFinish) {
					finish();
				} else {
					instantUpdate(false);
				}
				break;
			case ChatActivityConstants.ENTER_FILE_BROWSER_REQUEST:
				                                                                                    
				switch (resultCode)
				{
				case RESULT_OK:
					jumpToBottom();
					break;
				case RESULT_CANCELED:
					break;
				}
                                                    
            
                                                                   
                                                                                                                   
            
			                                              
			                                                  
			                                                          
			                                                              
			                                                      
			                                                           
			                                                              
			         
			case ChatActivityConstants.SECRETFILE_PREVIEW_REQUEST:
				instantUpdate(false);
				                                               
				                                                              
				                                             
				                                             
				                                            
				                                
				                                           
				                                                
				                          
				                                            
				                                            
				                        
				                                                   
				    
				    
				break;
			case SecretFileUtil.SECRETFILE_MODE_SHOT:                                    
				SecretFileUtil.enterSnapshot(getActivity(),ChatActivityConstants.REQUEST_SECRETFILE_SHOTPHOTO);
				break;			
			case SecretFileUtil.SECRETFILE_MODE_ALBUM:                                    
				SecretFileUtil.enterAlbums(getActivity(),sessionInfo,app);
				break;			
			case ChatActivityConstants.REQUEST_CODE_OPEN_TROOPFILE_VIEW_ACITIVITY:
				
				                              
				Bundle bundle = data.getExtras();
				Boolean bDeleteFile = false;
				String sFileName = "";
				if(bundle.containsKey("                    "))bDeleteFile 	= bundle.getBoolean("                    ");
				if(bundle.containsKey("                  "))sFileName 		= bundle.getString("                  ");
				
				if(bDeleteFile){
					String text = String.format(
							getString(R.string.qb_troop_download_file_not_exist_text_with_name),
							TroopFileUtils.getSimplifyFileName(sFileName));
					TroopFileError.showTipsToast(this, text);
				}
				
				break;
			}
		}
		         
		                        
		    
		
		                   
		                       
		if (resultCode == FMConstants.RESULT_CODE_FORWARD) {
			if(data != null && data.getExtras() != null) {				
				Bundle extra = data.getExtras();
								
				Intent intent = new Intent(this, ChatActivity.class);
				Bundle bundle = new Bundle(extra);
				intent.putExtras(bundle);
				intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
				intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
				startActivity(intent);
			}
			setResult(FMConstants.RESULT_CODE_FORWARD, data);
		}
				
	}

	protected void uploadPreviewPhoto(Intent data)
	{
		if (QLog.isColorLevel())
		{
			QLog.d(TAG, QLog.CLR, "                  ");
		}
		ImageUtil.log(-1, sessionInfo.curType, true, "                  ", "                                        " + data.getIntExtra(AlbumConstants.REQUEST_CODE, -1));
		Bundle bundle = null;
		if (data != null)
		{
			bundle = data.getExtras();
		}
		if (bundle == null)
		{
			return;
		}
		else if (bundle.getBoolean("           ", false))
		{
			instantUpdate(true);
			return;
		}
		else if (data.getExtras().getBoolean("          ", false))
		{
			String filepath = data.getExtras().getString("        ");
			if (FileUtils.fileExistsAndNotEmpty(filepath))
			{
                                                    
				PicUploadInfo.Builder builder = new PicUploadInfo.Builder();
				builder.setLocalPath(filepath);
				builder.setBusiType(MessageHandler.SEND_MSG_BUSINESS_TYPE_DOODLE);
                            
				builder.setPeerUin(sessionInfo.curFriendUin);
				builder.setProtocolType(PicDbRecord.EXTRA_FLAG_SEND_PHOTO);
				builder.setSecondId(sessionInfo.troopUin);
				builder.setSelfUin(app.getCurrentAccountUin());
				builder.setUinType(sessionInfo.curType);
				
				PicReq picReq = PicBusiManager.createPicReq(PicReq.PIC_CMD_SEND, MessageHandler.SEND_MSG_BUSINESS_TYPE_DOODLE);
				picReq.bindReqObj(builder.build());
				PicBusiManager.launch(picReq, app);
				
                                                                                                                          
                                                                                                                                                    
                                                                              
				instantUpdate(true);
			}
			else
			{
				ImageUtil.log(-1, sessionInfo.curType, true, "                          ", "                                                         ");
			}
			         
			ImageUtil.reportImageUpFileEmptyStuff(this, filepath, ImageUtil.BIZTYPE_DOODLE, TAG, "                                          ");
		}
		else
		{
			int requestCode = data.getIntExtra(AlbumConstants.REQUEST_CODE, -1);
			if (requestCode == ChatActivityConstants.SELECT_AND_SEND_PHOTO_REQUEST || requestCode == ChatActivityConstants.UPLOAD_SHOTPHOTO_REQUEST)
			{
				List<ImageInfo> imageInfos = data.getParcelableArrayListExtra(PhotoPreviewConstant.PARAM_IMAGEINFO_LIST);
				if (imageInfos != null && !imageInfos.isEmpty())
				{
					if (imageInfos.size() == 1)
					{
						if (requestCode == ChatActivityConstants.UPLOAD_SHOTPHOTO_REQUEST)
						{
							msgReport(entrance, 1);
						}
						else
						{
							msgReport(entrance, 2);
						}
					}
					else if (imageInfos.size() > 1)
					{
						msgReport(entrance, 4, "" + imageInfos.size());
					}
				}
				handleSendPhoto(imageInfos, data.getStringExtra(ChatActivityConstants.IMAGE_SENDER_TAG));
			}
			else if (requestCode == ChatActivityConstants.REQUEST_SECRETFILE_SELECTPHOTO || requestCode == ChatActivityConstants.REQUEST_SECRETFILE_SHOTPHOTO)
			{
				List<ImageInfo> imageInfos = data.getParcelableArrayListExtra(PhotoPreviewConstant.PARAM_IMAGEINFO_LIST);
				if (imageInfos != null && imageInfos.size() > 0)
				{
					ImageInfo imageInfo = imageInfos.get(0);
					if (imageInfo == null)
					{
						QQToast.makeText(this, R.string.secretfile_aio_not_exist, Toast.LENGTH_SHORT).show(getTitleBarHeight());
						return;
					}
					if (!FileUtils.fileExists(imageInfo.filePath))
					{
						QLog.d(SecretFileContents.TAG, QLog.CLR, "                    " + imageInfo.filePath + "          ");
						QQToast.makeText(this, R.string.secretfile_aio_not_exist, Toast.LENGTH_SHORT).show(getTitleBarHeight());
						return;
					}
					else if (!FileUtils.fileExistsAndNotEmpty(imageInfo.filePath))
					{
						QQToast.makeText(this, R.string.secretfile_aio_not_exist, Toast.LENGTH_SHORT).show(getTitleBarHeight());
						return;
					}
					int timeLimit = data.getIntExtra(PhotoPreviewConstant.PARAM_TIME_LIMIT, PhotoPreviewConstant.TIME_LIMIT[0]);
					byte[] encryptKey = data.getByteArrayExtra(PhotoPreviewConstant.PARAM_ENCRYPT_KEY);
					                                  
					String fileKey = data.getStringExtra(PhotoPreviewConstant.PARAM_SNAP_FILEKEY);
					if (QLog.isColorLevel())
					{
						QLog.d(SecretFileContents.TAG, QLog.CLR,
								"                                        " + imageInfo.uniseq + "      " + app.getCurrentAccountUin() + "    " + sessionInfo.curFriendUin);
					}
					app.getTransFileController().sendSecretfilePhoto(
							sessionInfo.curType, sessionInfo.troopUin,
							sessionInfo.curFriendUin, imageInfo.filePath,
							imageInfo.uniseq,
							MessageHandler.SEND_MSG_BUSINESS_TYPE_SECRETFILE,
							timeLimit, encryptKey, fileKey);
					instantUpdate(true);
				}
			}
		}
	}


	private void startChatAndSendMsg(Bundle extra)
	{
		Intent intent = new Intent(this, ChatActivity.class);
		                                    
		Bundle bundle = new Bundle(extra);
		intent.putExtras(bundle);
		startActivity(intent);
	}

	@Override
	protected boolean onBackEvent()
	{
		if(root.getCurrentPanel() != XPanelContainer.NONE)
		{
			root.hideAllPanel();
			return true;
		}
		if (isBack2Root)
		{
			Intent intent = new Intent(ChatActivity.this, SplashActivity.class);
			intent.putExtra(SplashActivity.TAB_INDEX, SplashActivity.ConversationTab);
			intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
			startActivity(intent);
		}
		
		                                                                                
		if(mTroopAssistTip)
		{
			TroopAssistantManager.getInstance().setTroopIgnoreTip(app, sessionInfo.curFriendUin);
		}
                                                        
        PendingIntent pIntent = getIntent().getParcelableExtra(Key.ACTIVITY_FINISH_RUN_PENDING_INTENT);
        if (pIntent != null) {
            try {
                pIntent.send();
            } catch (CanceledException e) {
                                                  
                QLog.d(TAG, QLog.DEV, e.getMessage());
            }
        }
		return false;
	}


	private void updateSpeakerPhoneLayout(boolean visable, boolean speakerPhoneOn)
	{
		if (visable && !AIOUtils.isRubbishSamsun())
		{
			if (speakerPhoneLayout == null)
			{
				getLayoutInflater().inflate(R.layout.aio_speaker_phone, mContent);
				speakerPhoneLayout = mContent.findViewById(R.id.aio_speaker_phone_layout);
				speakerPhoneTextView = (TextView) mContent.findViewById(R.id.aio_speaker_phone_text);
				speakerPhoneLayout.setOnClickListener(this);
				if(mUnReadTxt == null)
				{
					((RelativeLayout.LayoutParams)speakerPhoneLayout.getLayoutParams()).addRule(RelativeLayout.ABOVE, R.id.inputBar);;
				}
			}
			speakerPhoneLayout.setVisibility(View.VISIBLE);
			if (speakerPhoneOn)
			{
				speakerPhoneTextView.setText(R.string.aio_speaker_phone_text);
			}
			else
			{
				speakerPhoneTextView.setText(R.string.aio_speaker_phone_off_text);
			}
			speakerPhoneLayout.setSelected(speakerPhoneOn);
		}
		else if (speakerPhoneLayout != null)
		{
			speakerPhoneLayout.setVisibility(View.GONE);
		}
	}

	@Override
	public boolean onTouch(View v, MotionEvent event)
	{
		
		if(mRealtimeBgProxy != null && listView == v){
			mRealtimeBgProxy.onTouchEvent(v, event);
		}
		
		int action = event.getAction();
		switch (v.getId())
		{
		case R.id.voice_input_btn:
			if (action == MotionEvent.ACTION_DOWN)
			{
				File externalDir = Environment.getExternalStorageDirectory();
				boolean existAndCanWrite = externalDir.exists() && externalDir.canWrite();
				boolean hasSDCard = Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED) && existAndCanWrite;
				if (hasSDCard)
				{
					if (new StatFs(Environment.getExternalStorageDirectory().getAbsolutePath()).getAvailableBlocks() > 1)
					{

						if (isRecording())
						{
							QQToast.makeText(app.getApp(), "               ", Toast.LENGTH_SHORT).show(getTitleBarHeight());
						}
						else if (app.isVideoChatting()) {
						    QQToast.makeText(app.getApp(), R.string.ptt_play_error_on_video_chatting, Toast.LENGTH_SHORT).show(getTitleBarHeight());
						}
						else
						{
							startAudioRecord();
							pttDlg.onTouch(event);
						}
					}
					else
					{
						QQToast.makeText(app.getApp(), R.string.sdcard_full_no_send, Toast.LENGTH_SHORT).show(getTitleBarHeight());
					}
				}
				else
				{
					QQToast.makeText(app.getApp(), R.string.nosdcardnosend, Toast.LENGTH_SHORT).show(getTitleBarHeight());
				}
			}
			else if (pttDlg != null && isRecording()) {          
			    if (QLog.isColorLevel()) {
                    QLog.d(QQRecorder.TAG, QLog.CLR, "                                      ");
                }
			    pttDlg.onTouch(event);
            }
			return false;
		case R.id.listView1:
			if (action == MotionEvent.ACTION_DOWN)
			{
				root.hideAllPanel();
				mpm.setAutoScroll(false);
			}
			else if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL)
			{
			    mpm.setAutoScroll(true);
			}
			return false;
			
			
		default:
			break;
		}
		return false;
	}

	   
                              
    
	private int preRecordOrientation;

	@TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
	public void setRequestedOrientation4Recording(boolean bStop)
	{
		if (!bStop)
		{
			preRecordOrientation = getRequestedOrientation();
			final int orientation = getResources().getConfiguration().orientation;

			if (!VersionUtils.isrFroyo())
			{
				                                                      
				if (orientation == Configuration.ORIENTATION_PORTRAIT)
				{
					setRequestedOrientation(VersionUtils.isGingerBread() ? ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT
							: ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
				}
				else if (orientation == Configuration.ORIENTATION_LANDSCAPE)
				{
					setRequestedOrientation(VersionUtils.isGingerBread() ? ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE
							: ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
				}
			}else if(VersionUtils.isHoneycombMR2())
			{
				Display display = getWindowManager().getDefaultDisplay();
				int rotation = display.getRotation();
				 
				Point size = new Point();
				display.getSize(size);
				 
				int lock = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
				 
				if (rotation == Surface.ROTATION_0
						|| rotation == Surface.ROTATION_180) {
					                                                                    
					           
					if (size.x > size.y) {
						if (rotation == Surface.ROTATION_0) {
							lock = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
						} else {
							lock = ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
						}
					} else {
						                  
						if (rotation == Surface.ROTATION_0) {
							lock = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
						} else {
							lock = ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;
						}
					}
				} else {
					                                                                
					               
					if (size.x > size.y) {
						if (rotation == Surface.ROTATION_90) {
							lock = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
						} else {
							lock = ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
						}
					} else {
						                   
						if (rotation == Surface.ROTATION_90) {
							lock = ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;
						} else {
							lock = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
						}
					}
				}
				setRequestedOrientation(lock);
			}else
			{
				final int rotation = getWindowManager().getDefaultDisplay().getRotation();

				if (rotation == Surface.ROTATION_0 || rotation == Surface.ROTATION_90)
				{
					if (orientation == Configuration.ORIENTATION_PORTRAIT)
					{
						setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
					}
					else if (orientation == Configuration.ORIENTATION_LANDSCAPE)
					{
						setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
					}
				}
				else if (rotation == Surface.ROTATION_180 || rotation == Surface.ROTATION_270)
				{
					if (orientation == Configuration.ORIENTATION_PORTRAIT)
					{
						setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
					}
					else if (orientation == Configuration.ORIENTATION_LANDSCAPE)
					{
						setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
					}
				}
			}
		}
		else
		{
			setRequestedOrientation(preRecordOrientation);
		}
	}

	private void startAudioRecord()
	{
	    int[] state_pressed = new int[]{android.R.attr.state_pressed};
	    mPttBtn.setBackgroundResource(R.drawable.skin_aio_voice_button_pressed);
        mPttBtn.setTextColor(getResources().getColorStateList(R.color.skin_aio_input_button)
                .getColorForState(state_pressed, getResources().getColor(R.color.skin_aio_input_button)));
        mPttBtn.setText(R.string.aio_up_stop_speak_label);
		                     
		setRequestedOrientation4Recording(false);
		if (pttDlg != null && pttDlg.isShowing()) {
		    pttDlg.dismiss();
		}
		pttDlg = new CustomRecordDialog(getActivity(), mCustomRecordListener);
		View dv = pttDlg.getWindow().getDecorView();
		dv.setOnTouchListener(new View.OnTouchListener()
		{

			@Override
			public boolean onTouch(View v, MotionEvent event)
			{
				int action = event.getAction();
				if ((action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) && isRecording() && pttDlg != null)
				{
				    if (QLog.isColorLevel()) {
				        QLog.d(QQRecorder.TAG, QLog.CLR, "                                         ");
				    }
				    pttDlg.onTouch(event);
					return true;
				}
				return false;
			}
		});
		pttDlg.show();
		startRecord();
	}

	public void addContacStrangerFriendFriend()
	{
		if (sessionInfo.curType == VALUE.UIN_TYPE_CONTACT_STRANGER_FRIEND)
		{
			int type = AppConstants.VALUE.UIN_TYPE_PHONECONTACT;
			int sourceId = AddFriendLogicActivity.SOURCE_ID_CONTACT;
			Intent intent = new Intent(this, AddFriendLogicActivity.class);
			intent.putExtra(FriendListContants.CMD_PARAM_FRIEND_TYPE, type);
			intent.putExtra(FriendListContants.CMD_PARAM_SOURCE_ID, sourceId);
			intent.putExtra(AddFriendLogicActivity.PARAM_LAST_ACTIVITY_NAME, setLastActivityName());
			intent.putExtra(FriendListContants.CMD_PARAM_UIN, "");
			intent.putExtra(FriendListContants.CMD_PARAM_FRIEND_MOBILE_NUMBER, sessionInfo.curFriendUin);
			intent.putExtra(FriendListContants.CMD_PARAM_FRIEND_MOBILE_NAME, sessionInfo.curFriendNick);
			startActivity(intent);
		}
	}

	                     
	Dialog alertDialog;
	Dialog loadingDialog;
	Dialog successDialog;
	Dialog failDialog;

	                                                              

	@Override
	protected Dialog onCreateDialog(int id)
	{
		switch (id)
		{
		case ChatActivityConstants.DIALOG_REPORT:
			alertDialog = new Dialog(ChatActivity.this, R.style.qZoneInputDialog);
			alertDialog.setContentView(R.layout.custom_dialog_temp);
			TextView title = (TextView) alertDialog.findViewById(R.id.dialogTitle);
			TextView text = (TextView) alertDialog.findViewById(R.id.dialogText);
			TextView lBtn = (TextView) alertDialog.findViewById(R.id.dialogLeftBtn);
			TextView rBtn = (TextView) alertDialog.findViewById(R.id.dialogRightBtn);
			title.setText(R.string.report_dialog_report_title);
			text.setText(R.string.report_dialog_report_content);
			rBtn.setText(R.string.report_dialog_report_rbtn);
			rBtn.setOnClickListener(new OnClickListener()
			{

				@Override
				public void onClick(View v)
				{
					dismissDialog(ChatActivityConstants.DIALOG_REPORT);
                                                        
                                                                                                                           
					ProfileCardUtil.safetyReport(ChatActivity.this, "", sessionInfo.curFriendUin, app.getAccount());
				}
			});
			lBtn.setText(R.string.cancel);
			lBtn.setOnClickListener(new OnClickListener()
			{

				@Override
				public void onClick(View v)
				{
					alertDialog.cancel();
				}
			});
			return alertDialog;

		case ChatActivityConstants.REPORT_LOADING:
			loadingDialog = new Dialog(ChatActivity.this, R.style.qZoneInputDialog);
			loadingDialog.setContentView(R.layout.account_wait);
			TextView tv = (TextView) loadingDialog.findViewById(R.id.dialogText);
			tv.setText(R.string.report_loading);
			return loadingDialog;
		case ChatActivityConstants.SUCCESS_DIALOG:
			successDialog = new Dialog(ChatActivity.this, R.style.qZoneInputDialog);
			successDialog.setContentView(R.layout.toast_view);
			TextView sucTV = (TextView) successDialog.findViewById(R.id.textView);
			ImageView suciv = (ImageView) successDialog.findViewById(R.id.imageView);
			sucTV.setText(R.string.card_impeach_success);
			suciv.setImageResource(R.drawable.dialog_sucess);
			return successDialog;
		case ChatActivityConstants.FAIL_DIALOG:
			failDialog = new Dialog(ChatActivity.this, R.style.qZoneInputDialog);
			failDialog.setContentView(R.layout.toast_view);
			TextView failTV = (TextView) failDialog.findViewById(R.id.textView);
			ImageView failiv = (ImageView) failDialog.findViewById(R.id.imageView);
			failTV.setText(R.string.card_impeach_fail);
			failiv.setImageResource(R.drawable.dialog_fail);
			return failDialog;
		default:
			return super.onCreateDialog(id);
		}
	}

	@Override
	protected void onPrepareDialog(int id, Dialog dialog)
	{
		switch (id)
		{
		case ChatActivityConstants.SUCCESS_DIALOG:
		case ChatActivityConstants.FAIL_DIALOG:
			uiHandler.postDelayed(new Runnable()
			{
				
				@Override
				public void run()
				{
					if (successDialog != null && successDialog.isShowing())
					{
						successDialog.dismiss();
					}
					else if (failDialog != null && failDialog.isShowing())
					{
						failDialog.dismiss();
					}
				}
			}, 1000);
		default:
			super.onPrepareDialog(id, dialog);
		}
	}

	public void playFinishSound()
	{
		((BaseApplicationImpl) app.getApp()).mediaPlayerStart(R.raw.ptt_playfinish, false);
		if (bubbleAnimationView != null)
		{
			bubbleAnimationView.end();
		}
	}

	private void registerBoradcast()
	{
		IntentFilter mFilter = new IntentFilter();
		mFilter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
		mFilter.addAction(VideoConstants.ACTION_RECV_VIDEO_REQUEST);
		                    
        mFilter.addAction(TelephonyManager.ACTION_PHONE_STATE_CHANGED);
		registerReceiver(mReceiver, mFilter);
	}

	private BroadcastReceiver mReceiver = new BroadcastReceiver()
	{
		@Override
		public void onReceive(Context context, Intent intent)
		{
			String action = intent.getAction();
			if (ConnectivityManager.CONNECTIVITY_ACTION.equals(action))
			{
				if (QLog.isColorLevel())
				{
					QLog.d(TAG, QLog.CLR, "                          ");
				}
				ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
				NetworkInfo info = connectivityManager.getActiveNetworkInfo();
				if (info != null && info.isAvailable() && isHaveNewAfterIn)
				{
					uiHandler.removeMessages(HANDLE_WHAT_READCONFIRM);
					uiHandler.sendEmptyMessage(HANDLE_WHAT_READCONFIRM);
				}
			}
			else if (VideoConstants.ACTION_RECV_VIDEO_REQUEST.equals(action))
			{
			    QLog.d(TAG, QLog.CLR, "                                 ");
			    fateOfRecorder = RECORD_TO_LISTEN;
			    stopAudioRecord();
			} else if (TelephonyManager.ACTION_PHONE_STATE_CHANGED.equals(action)) {
                TelephonyManager telephony = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
                if (telephony.getCallState() == TelephonyManager.CALL_STATE_RINGING) {
                    QLog.d(TAG, QLog.CLR, "                                                     ");
                    fateOfRecorder = RECORD_TO_LISTEN;
                    stopAudioRecord();
                }
            }
		}
	};

	@Override
	public void update(Observable observable, Object data)
	{
		if (data == null)
		{
			return;
		}
		if (data instanceof MessageRecord)
		{
			if (data instanceof ChatMessage)
			{
				MessageRecord mr = (MessageRecord) data;
				if (QLog.isColorLevel())
				{
					QLog.d(TAG, QLog.CLR, "                " + mr.msgseq);
				}
				if (!mr.isSendFromLocal())
				{
					if (mr.msgtype == MessageRecord.MSG_TYPE_DISCUSS_PUSH && !sessionInfo.curFriendUin.equals(mr.frienduin))
					{
						return;
					}
					if (sessionInfo.curFriendUin.equals(mr.frienduin) &&
							(sessionInfo.curType == mr.istroop || (MsgProxyUtils.isC2CConversation(sessionInfo.curType) && MsgProxyUtils.isC2CConversation(mr.istroop))))
					{ 
						               
						if (isResume())
						{
							app.getMessageFacade().setReaded(sessionInfo.curFriendUin, sessionInfo.curType);
							isHaveNewAfterIn = true;
							hasUnread = true;
							refresh(REFRESH_FLAG_RELOAD | SCROLL_FLAG_SCROLL_NONE);
						}
						if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_LBS_FRIEND && mr.msgtype == MessageRecord.MSG_TYPE_PC_PUSH) {
							                                                                
							QQMessageFacade.Message message = app.getMessageFacade().getIncomingMsg();
							if (message != null && message.istroop == AppConstants.VALUE.UIN_TYPE_LBS_FRIEND && message.msgtype == MessageRecord.MSG_TYPE_PC_PUSH) {
								                                      
								OpenAppClient.onPcPushMsgForground(getApplicationContext(), message.action);
							}
						}
					}
					else if (mr.istroop == AppConstants.VALUE.UIN_TYPE_LBS_FRIEND && sessionInfo.curFriendUin.equals(mr.senderuin) && MsgProxyUtils.isC2CConversation(sessionInfo.curType))
					{
						               
						if ((String.valueOf(AppConstants.SYSTEM_MSG_UIN)).equalsIgnoreCase(mr.frienduin) && !mr.isread)
						{
							messageTips(app.getMessageFacade().getIncomingMsg());
						}
						else
						{
							if (isResume())
							{
								hasUnread = true;
								app.getMessageFacade().setReaded(sessionInfo.curFriendUin, sessionInfo.curType);
								refresh(REFRESH_FLAG_RELOAD | SCROLL_FLAG_SCROLL_NONE);
							}
						}
					}
					else if (isResume() && !mr.isread)
					{
						messageTips(app.getMessageFacade().getIncomingMsg());
					}
					runOnUiThread(new Runnable()
					{
						@Override
						public void run()
						{
							updateUnreadNumOnTitleBar();
						}
					});
				}
				else
				{
					                              
					app.getMessageFacade().setReaded(sessionInfo.curFriendUin, sessionInfo.curType);
					isHaveNewAfterIn = true;
					instantUpdate(true);
				}
			}
			else
			                                                
			{
				runOnUiThread(new Runnable()
				{
					@Override
					public void run()
					{
						updateUnreadNumOnTitleBar();
					}
				});
			}
		}
		else if (data instanceof RefreshMessageContext)
		{
			refreshMessageContext = (RefreshMessageContext) data;
			if (refreshMessageContext.context instanceof ChatContext)
			{

				ChatContext context = (ChatContext) refreshMessageContext.context;
				if (sessionInfo.curFriendUin != null && sessionInfo.curFriendUin.equals(context.getCurrentFriendUin()) && pullReqTime == context.getRequestTime()
						&& refreshMessageContext.needRefreshAIO)
				{
					canPullRefresh = !refreshMessageContext.isComplete;
					long delay = pullReqTime + REFRESH_DELAY - SystemClock.uptimeMillis();
					delay = delay > 0 ? delay : 0;
					uiHandler.postDelayed(new Runnable()
					{
						@Override
						public void run()
						{
							refresh(REFRESH_FLAG_RELOAD_IMMEDIATELLY | SCROLL_FLAG_PULL_DOWN);
						}
					}, delay);
				}
			}
		}
		else if (data instanceof MessageNotifyParam)
		{
			MessageNotifyParam param = (MessageNotifyParam) data;
			if (param.uin.equals(sessionInfo.curFriendUin))
			{
				if (param.operation == MessageNotifyParam.OPERATION_DELETE)
				{
					instantUpdate(false);
				}
			}
		}
	}

	   
                            
    
                   
                                          
    
	public void instantUpdate(boolean toBottom)
	{
		refresh(REFRESH_FLAG_RELOAD_IMMEDIATELLY | (toBottom ? SCROLL_FLAG_JUMP_BOTTOM : SCROLL_FLAG_SCROLL_NONE));
	}

	                        
	private long lastRefreshTime = -1;

	public void refresh(int dirty)
	{
		
		int refreshFlag = dirty & REFRESH_FLAG_MASK;
		                  
		int scrollFlag = (dirty & SCROLL_FLAG_MASK) > (this.dirty & SCROLL_FLAG_MASK) 
				? dirty & SCROLL_FLAG_MASK : this.dirty & SCROLL_FLAG_MASK;
		
		this.dirty = refreshFlag | scrollFlag;
		
		                                      
		if(isResume())
		{
			            
			if(refreshFlag >= REFRESH_FLAG_RELOAD)
			{
				if(!uiHandler.hasMessages(ChatActivityConstants.MSG_REFRESH_LIST))
				{
					long now = SystemClock.uptimeMillis();
					if(now - lastRefreshTime > 1000)
					{
						uiHandler.sendEmptyMessage(ChatActivityConstants.MSG_REFRESH_LIST);
					}
					else
					{
						uiHandler.sendEmptyMessageDelayed(ChatActivityConstants.MSG_REFRESH_LIST, 1000 - (now - lastRefreshTime));
					}
				}
			}
			else
			{
				uiHandler.removeMessages(ChatActivityConstants.MSG_REFRESH_LIST);
				uiHandler.sendEmptyMessage(ChatActivityConstants.MSG_REFRESH_LIST);
			}
		}
	}

	private void refreshListAdapter()
	{
		cancelDelAnim();
		if(dirty == 0)
		{
			return;
		}
		List<ChatMessage> oldList = listAdapter.getList();
		List<ChatMessage> newList;
		int oldScorllY = listView.getScrollY();
		int oldFirst = listView.getFirstVisiblePosition() - listView.getHeaderViewsCount();
		int oldLast = listView.getLastVisiblePosition() - listView.getHeaderViewsCount();
		switch (dirty & REFRESH_FLAG_MASK)
		{
			            
			case REFRESH_FLAG_INVALIDATE:
				newList = oldList;
				listAdapter.notifyDataSetChanged();
				break;
			                  
			case REFRESH_FLAG_RELOAD:
			case REFRESH_FLAG_RELOAD_IMMEDIATELLY:
				newList = app.getMessageFacade().getAIOList(sessionInfo.curFriendUin, sessionInfo.curType);
				
				if (hasUnread && newList.size() > 0)
				{
					newList.get(newList.size() - 1).mAnimFlag = true;
				}
                MessageRecord messageRecord = ChatActivityUtils
                        .getMessageRecordForSource(newList, sessionInfo, app);
                if (mSingleTitle) {
                	String messageSource = ChatActivityUtils.generateMsgSourceForTitle(
                			ChatActivity.this, messageRecord);
                	if (messageSource != null) {
                		setSubTitleVisable(true);
                		mSubTilteText.setText(messageSource);
                		if (TALK_BACK) {
                			mSubTilteText.setContentDescription(messageSource);
                		}
                	} else {
                		setSubTitleVisable(false);
                	}
				}
                CharSequence messageSourceForList = ChatActivityUtils
                        .generateMsgSource(app, ChatActivity.this, sessionInfo,
                                messageRecord);
                listAdapter.setList(newList, messageSourceForList);
				break;
			default:
				newList = oldList;
				break;
		}
		
		int readed = 0;
		
		final int oldSize = oldList.size();
		final int newSize = newList.size();
		boolean isIncompleteMsg = false;
		
		int dirtyFlag = dirty & SCROLL_FLAG_MASK;
		
		if(dirtyFlag == SCROLL_FLAG_SCROLL_NONE && oldLast >= (oldList.size() - 1))
		{
			dirtyFlag = SCROLL_FLAG_SCROLL_BOTTOM;
		}
		switch (dirtyFlag)
		{
			               
			case SCROLL_FLAG_JUMP_BOTTOM:
                                                                  
                                                                                                                                       
			    listView.setSelectionFromBottom(listView.getCount()-1, 0);
				readed = newSize;
				break;
			            
			case SCROLL_FLAG_SCROLL_BOTTOM:
				mScrollerRunnable.start(listView.getCount() - 1);
				readed = newSize;
				break;
			          
			case SCROLL_FLAG_PULL_DOWN:
				if(oldSize > 0 && oldFirst >= 0)
				{
					                        
					int newTop = -1;
					               
					if(newSize > 0)
					{
						long oldTopId = oldList.get(oldFirst).uniseq;
						for (int i = 0; i < newSize; i++) {
							long newId = newList.get(i).uniseq;
							if (newId == oldTopId) {
								newTop = i;
								break;
							}
						}
						                                                                                                                             
						if (newTop < 0 && oldList.size() > oldFirst + 1) {
							long oldSecondId = oldList.get(oldFirst + 1).uniseq; 
							for (int i = 0; i < newSize; i++) {
								long newId = newList.get(i).uniseq;
								if (newId == oldSecondId) {
									newTop = i;
									isIncompleteMsg = true;
									break;
								}
							}
						}
					}
					
					                                
					if(newTop>=0)
					{
						readed = mReadedCnt + newTop;
						                                                                                        
						if (isIncompleteMsg) {
							readed --;
						}
						            
						if(oldScorllY < 0 && newTop == 0)
						{
							listView.springBackOverScrollHeaderView();
						}
						else if(oldScorllY < 0)
						{
							int bottom = listView.getHeight() - listView.getChildAt(listView.getHeaderViewsCount()).getBottom();
							listView.hideOverScrollHeaderView();
							listView.setSelectionFromBottom(listView.getHeaderViewsCount() + newTop, bottom + oldScorllY);
						}
						else
						{
							int bottom = listView.getHeight() - listView.getChildAt(listView.getHeaderViewsCount()).getBottom();
							listView.setSelectionFromBottom(listView.getHeaderViewsCount() + newTop, bottom);
						}
					}
					else
					{
						listView.hideOverScrollHeaderView();
						readed = newSize;
					}
				}
				break;
	
			default:
				if(oldList != newList)
				{
					int newBtm = -1;
					if(oldSize > 0 && newSize > 0)
					{
						long oldLastId = oldList.get(oldSize - 1).uniseq;
						for (int i = newSize - 1; i >= 0; i--) {
							long newId = newList.get(i).uniseq;
							if (newId == oldLastId) {
								newBtm = i;
								break;
							}
						}
					}
					
					if(newBtm >= 0)
					{
                                                   
                                                   
                                                    
                                                    
						                                          
						readed = newSize - (oldSize - mReadedCnt + newSize - 1 - newBtm);
					}
					else
					{
						readed = newSize;
					}
				}
				break;
		}
		setOverScrollHandleVisable(canPullRefresh && newSize != 0);
		dirty = 0;
		lastRefreshTime = SystemClock.uptimeMillis();
		mReadedCnt = readed;
	}

	   
                   
                  
    
	private void messageTips(final com.tencent.mobileqq.app.message.QQMessageFacade.Message message)
	{
		if (message == null || message.isread || message.isSendFromLocal() || app.isTroopMark(message))
		{                        
			return;
		}

		   
                                         
     
		                                                                  
		          
		    

		final Intent intent = app.getIntentByUin(ChatActivity.this, message, false);
		                                                                             
		runOnUiThread(new Runnable()
		{
			@Override
			public void run()
			{
				
				if (!sessionInfo.curFriendUin.equals(message.frienduin) && (message.senderuin == null || !message.senderuin.equalsIgnoreCase(app.getCurrentAccountUin()))
						&& !isOpenFromShare)
				{
					if(mMsgbox == null)
					{
						mMsgbox = new Button(ChatActivity.this);
						mMsgbox.setId(R.id.msgbox);
						mMsgbox.setBackgroundResource(R.drawable.chat_msg_tip_bg_selector);
						mMsgbox.setSingleLine();
						mMsgbox.setTextColor(getResources().getColorStateList(R.color.skin_black));
						mMsgbox.setGravity(Gravity.CENTER);
						
						mMsgbox.setPadding((int) (10 * mDensity), mMsgbox.getPaddingTop(), (int) (10 * mDensity), mMsgbox.getPaddingBottom());
						mTipsContainer.addView(mMsgbox, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
						mMsgbox.setOnClickListener(ChatActivity.this);
					}
					mMsgbox.setVisibility(View.VISIBLE);

					CharSequence msg;
					if (message.msgtype == MessageRecord.MSG_TYPE_MEDIA_SECRETFILE)
					{
						msg = " " + message.msg + " ";           
					}
					else if (message.msgtype == MessageRecord.MSG_TYPE_STRUCT_MSG)
					{
						byte[] msgData = message.msgData;
						AbsStructMsg structMsg = StructMsgFactory.getFromBytes(msgData);
						if (structMsg != null)
						{
							msg = structMsg.mMsgBrief;
						}
						else
						{
							msg = message.msg;
						}
					}
					else
					{
						msg = message.getMessageText();
					}

					StringBuilder prefix = new StringBuilder();
					if (message.nickName != null)
					{
						prefix.append(intent.getStringExtra(Key.UIN_NAME));
						prefix.append(" ");
						prefix.append(message.nickName);
						prefix.append(" ");
					}
					else
					{
						String uin_name = intent.getStringExtra(Key.UIN_NAME);
						if (uin_name == null || uin_name.length() == 0)
						{
							prefix.append(message.frienduin);
							prefix.append(" ");
						}
						else
						{
							prefix.append(uin_name);
							prefix.append(" ");
						}
					}
					
					                                
					if(msg instanceof QQText)
					{
						mMsgbox.setText(((QQText) msg).append(prefix.toString(), true));
					}
					else
					{
						prefix.append(msg);
						mMsgbox.setText(prefix.toString());
					}
					mMsgbox.requestLayout();
					
					mMsgbox.setTag(intent);
					Handler handler = mMsgbox.getHandler();
					if (handler != null)
					{
						                                
						handler.removeCallbacks(cancelMessageBox);
						handler.postDelayed(cancelMessageBox, 10000);
					}
				}
			}

		});
	}
	
	Runnable cancelMessageBox = new Runnable()
	{
		@Override
		public void run()
		{
			if (mMsgbox != null) {
				mMsgbox.setVisibility(View.GONE);
			}
		}
	};
	private View tipsForFreeCall;
	private View tipsForReader;
	private String mBookTips;
	private long mBookId;
	
	private int handleTips() {
		boolean isShowFreeCallBar = false;
		if(QLog.isColorLevel()){
			QLog.d(ReduFriendServlet.TAG, QLog.CLR, "               "+isShowGuide+"                    "+isShowPlusPanel+"            "+sessionInfo.curType);
		}
		if(!isShowGuide && !isShowPlusPanel && sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_FRIEND){
			isShowFreeCallBar = ChatActivityFacade.isShowFreeCallBar(app,
				sessionInfo.curFriendUin, true);
		}
		int tipType = AIO_TIP_NONE;
		if (!isShowGuide && !isShowPlusPanel && isShowFreeCallBar
				&& sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_FRIEND) {
			showFreeCallTips();
			tipType = AIO_TIP_FREE_CALL;
		} else if (needShowReaderTips()) {
			showReaderTips();
			tipType = AIO_TIP_READER;
		}else if (mTroopAssistTip) {
			if(mTroopAssistTipView == null)
			{
				String tip = getString(R.string.troopassit_guide_aio_tip);
				String btnText = getString(R.string.troopassit_guide_aio_topbar_btn);
				mTroopAssistTipView = ChatActivityUtils.showChatTopBar(ChatActivity.this, tip, btnText, 
						mTopBarClickListener,mHideListener);
			}
			
			aioTipsController.showHearerTips(mTroopAssistTipView);
			tipType = AIO_TIP_TROOP_ASSISTANT;
		} else {
			aioTipsController.hideHeaderTips();
		}
		return tipType;
	}
	
	private void showFreeCallTips() {
		if (tipsForFreeCall == null) {
			tipsForFreeCall = LayoutInflater.from(this).inflate(R.layout.qq_aio_tips_free_call, null);
			View startCallView = tipsForFreeCall.findViewById(R.id.qq_aio_tips_free_call_btn);
			startCallView.setOnClickListener(new OnClickListener() {
				
				@Override
				public void onClick(View v) {
					ReportController.reportClickEvent(app, "       ", "", ""
							, "         ", "                  "
							, 0, 0, "", "", "", "");
					ChatActivityFacade.clearShownFreeCallBarFlag();
					handleTips();
					                      
	                String peerUin = null;
	                String phoneNum = null;
	                if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_CONTACT_STRANGER_FRIEND) {
	                    phoneNum = sessionInfo.curFriendUin;
                    } else {
                        peerUin = sessionInfo.curFriendUin;
                    }
					ChatActivityUtils.startVideo(app, ChatActivity.this,
					        sessionInfo.curType, peerUin,
							sessionInfo.curFriendNick, phoneNum, true, sessionInfo.troopUin, 
							true, true);
					                 
			        ReportController.reportClickEvent(app, "       ", "", "",
			                "        ", "               ", 0, 0, " ", "", "", "");
				}
			});
		}
		aioTipsController.showHearerTips(tipsForFreeCall);
		ChatActivityFacade.afterShowFreeCallBar(app, sessionInfo.curFriendUin);
	}
	
	private boolean needShowReaderTips() {
		Bundle data = getIntent().getExtras();
		if (data == null) {
			return false;
		}
		
		   
                                                                         
                                                                                      
     
		final String bookName = data.getString("        ");
		if (android.text.TextUtils.isEmpty(bookName)) {
			if (mBookTips != null && mIsCurrentSession) {
				return true;
			}
			return false;
		} else {
			String formatTips = "                    ";
			mBookTips = String.format(formatTips, bookName);
			mBookId = data.getLong("      ");
		}
		return true;
	}
	
	private void showReaderTips() {
		if (tipsForReader == null) {
			tipsForReader = LayoutInflater.from(this).inflate(R.layout.aio_tips_reader, null);
			tipsForReader.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					handleTips();
					                  
					Intent intent = new Intent();
					intent.setAction("                           ");
					intent.putExtra("      ", mBookId);
					sendBroadcast(intent);
				}
			});
		}
		TextView readerTipsView = (TextView) tipsForReader.findViewById(R.id.aio_tips_reader_text);
		readerTipsView.setText(mBookTips);

		aioTipsController.showHearerTips(tipsForReader);
	}
	
                                                                                                         
                                                 
                                                  
                            
                                                             
                         
                                                                                                  
                                                
             
                                          
      
     
  
                
    

	@Override
	public void doOnConfigurationChanged(Configuration newConfig)
	{
		super.doOnConfigurationChanged(newConfig);
		                          
		if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_DISCUSSION)
		{
			if (sessionInfo.curFriendNick != null)
			{
				genDiscussTitle(sessionInfo.curFriendNick, sessionInfo.curFriendUin, mTitleText);
			}
		}
		
	}

	@Override
	public boolean isRecordingOrPlaying()
	{
		                                  
                      
     
                 
     
                                                              
                   
        
		return isRecording();
	}

	void jumpToBottom()
	{
		listView.setSelection(listView.getAdapter().getCount() - 1);
	}

	private void leftBackEvent()
	{
		if(root.getCurrentPanel() == XPanelContainer.SOFT_INPUT_PANEL)
		{
			root.hideAllPanel();
		}
		if (isBack2Root)
		{
			Intent intent = new Intent(ChatActivity.this, SplashActivity.class);
			intent.putExtra(SplashActivity.TAB_INDEX, SplashActivity.ConversationTab);
			intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
			startActivity(intent);
		}
                                                        
        Intent intent = getIntent();
        long appShareId = intent.getLongExtra(Key.SHARE_RES_ID, 0);
        if (isOpenFromShare && appShareId > 0) {
            ForwardOperations.startSdkCallback(this, true, ForwardOperations.SDK_SHARE_TO_QQ_ACTION, AppShareIDUtil.shareID2sdkID(appShareId));
        }
		finish();
	}

	@Deprecated
	public QQAppInterface getApp()
	{
		return app;
	}

	@Deprecated
	public String getCurFriendUin()
	{
		return sessionInfo.curFriendUin;
	}
	@Deprecated
	public String getCurFriendNick()
	{
		return sessionInfo.curFriendNick;
	}

	   
                            
    
                 
    
	public void handleAppShareAction(QQAppInterface app, Context context, SessionInfo sessionInfo,
	        MessageObserver msgObserver, Intent intent) {
	    byte[] data = intent.getByteArrayExtra(Key.STRUCT_MSG_BYTES);                                            
        AbsStructMsg structMsg = StructMsgFactory.getFromBytes(data);
        if (structMsg == null || structMsg instanceof ImageShareMsg) {
                                             
            return;
        } else {
                                                  
            ShareMsgHelper.sendStructingMsg(app, sessionInfo.curFriendUin, sessionInfo.curType, structMsg, msgObserver);
        }
        Bundle params = intent.getExtras();
        String textMsg = params.getString(Key.SHARE_RES_COMMENT_MESSAGE);
        if (!android.text.TextUtils.isEmpty(textMsg)) {
            ChatActivityFacade.sendMessage(app, context, sessionInfo, textMsg);
        }
                      
		intent.removeExtra(Key.FORWARD_TYPE);
		intent.getExtras().remove(Key.FORWARD_TYPE);
        intent.removeExtra(Key.SHARE_RES_ID);
        params.remove(Key.SHARE_RES_ID);
	}

	   
               
                                            
    
	private void setOverScrollHandleVisable(boolean visable)
	{
		if (visable)
		{
			if (listView.getOverScrollHeaderView() == null)
			{
				if (loadingView == null)
				{
					                      
					loadingView = LayoutInflater.from(this).inflate(R.layout.common_progressbar, null);
				}
				listView.setOverScrollHeader(loadingView);
			}
			if (listView.getOverscrollHeader() == null)
			{
				listView.setOverscrollHeader(getResources().getDrawable(R.drawable.qq_aio_loading_handle));
			}
		}
		else
		{
			listView.setOverscrollHeader((Drawable) null);
			listView.setOverScrollHeader((View) null);
		}
	}

	public void handleSendPhoto(List<ImageInfo> imageInfos, String from)
	{
                            
     
                                                                      
     
                           
     
                                           
      
                                                                                   
       
                              
                                                                       
                                                                                  
                                                                          
        
                                                                                         
                                             
                                                                   
                           
                                   
          
                
                                                                 
                               
          
                                         
          
         
        
                                                                                                                                                
       
                                                                                                                                                   
                                                                                                  
                           
                          
       
      
                                                                               
     
	}

	void checkAndQueryMsgBubbleId()
	{

		SVIPHandler svipHandler = (SVIPHandler) app.getBusinessHandler(QQAppInterface.SVIP_HANDLER);
		if (svipHandler.isRequestTimeOut())
		{
			svipHandler.updateSelfMsgBubbleId();
		}
	}

	public void onDrawComplete(long duration)
	{
		                                    
		if (QLog.isColorLevel())
		{
			String from = this.getIntent().getStringExtra(ChatActivityConstants.KEY_FROM);
			if (from == null)
			{
				ComponentName componentName = this.getCallingActivity();
				if (componentName != null)
				{
					from = componentName.getClassName();
				}
			}
			QLog.d(com.tencent.mobileqq.app.LogTag.PERFORMANCE_TRACE, QLog.CLR, "                          " + duration + "      " + from);
		}
		         
		PerformanceReportUtils.reportUISwitch(this, app.getCurrentAccountUin(), sessionInfo.curType, duration);
	}

	@Override
	public void onPostThemeChanged()
	{
		super.onPostThemeChanged();
		updateInputBarBg();
	}

	private void refreshMusicItem()
	{
		if (QLog.isColorLevel())
		{
			QLog.d(QQPlayerService.TAG, QLog.CLR, "                             ");
		}
		listAdapter.notifyDataSetChanged();
	}

	@Override
	public void onPlayStart()
	{
		updateSpeakerPhoneLayout(true, speakerPhoneOn);
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
	}

	@Override
	public void onPlayStop()
	{
		setVolumeControlStream(AudioManager.STREAM_MUSIC);
		updateSpeakerPhoneLayout(false, false);
		dismissPttMaskDialog();

		getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
	}

	@Override
	public void onPlayFailed(int code)
	{
		setVolumeControlStream(AudioManager.STREAM_MUSIC);
		updateSpeakerPhoneLayout(false, false);
	}
	
    @Override
    public void onVolumeStreamChanged(int streamType) {
        setVolumeControlStream(streamType);
    }

	@Override
	public void onHeadsetChanged(boolean wiredHeadsetConnect, boolean btHeadsetConnect, boolean speakerPhoneOn)
	{
		showPttToast(this, speakerPhoneOn, wiredHeadsetConnect, btHeadsetConnect);

		if (mpm.isPlaying())
		{
			updateSpeakerPhoneLayout(!wiredHeadsetConnect && !btHeadsetConnect, speakerPhoneOn);
		}
		this.speakerPhoneOn = speakerPhoneOn;
	}

	@Override
	public void onNearToEar(boolean nearEear, boolean speakerPhoneOn)
	{
		if (isResume())
		{
			if (nearEear)
			{
				showPttMaskDialog();
			}
			else
			{
				dismissPttMaskDialog();
			}
			showPttToast(this, speakerPhoneOn, false, false);
			updateSpeakerPhoneLayout(true, speakerPhoneOn);
		}
		this.speakerPhoneOn = speakerPhoneOn;
	}

	
	
	@Override
	public void onScrollStateChanged(final AbsListView view, int scrollState)
	{
		if (scrollState == OnScrollListener.SCROLL_STATE_IDLE)
		{
			URLDrawable.resume();
			                     
		}
		else
		{
			URLDrawable.pause();
			                     
		}
	}

	@Override
	public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount)
	{
		final int headerCnt = listView.getHeaderViewsCount();
		final int footerCnt = listView.getFooterViewsCount();
		final int listSize = totalItemCount - headerCnt - footerCnt;
		final int unReadCnt;
		if (mReadedCnt < listSize)
		{
			int lastVisable = firstVisibleItem + visibleItemCount - footerCnt;
			                     
			if (lastVisable >= totalItemCount - headerCnt - footerCnt)
			{
				lastVisable = listSize - 1;
			}

			if (lastVisable >= mReadedCnt)
			{
				mReadedCnt = lastVisable + 1;
			}
			                                                                                         
			                              
			                      
			unReadCnt = listSize - mReadedCnt;
		}
		else
		{
			unReadCnt = 0;
		}
		
		Message.obtain(uiHandler, MSG_REFRESH_LIST_UNREAD, unReadCnt, 0).sendToTarget();
	}
	
	private void updateListUnRead(int unReadCnt)
	{
		if(unReadCnt == 0 && mUnReadTxt != null)
		{
			mUnReadTxt.setVisibility(View.GONE);
		}
		else if(unReadCnt > 0)
		{
			if(mUnReadTxt == null)
			{
                     
                                                 
                                                  
                                                   
                                                   
                                                     
                                                
                                                
                                                           
                                                  
                                       
                                        
                                          
                                                      
				TextView text = new TextView(this);
				text.setId(R.id.msg_unread_count);
				text.setBackgroundResource(R.drawable.aio_unread_bg);
				text.setGravity(Gravity.CENTER_HORIZONTAL);
				text.setPadding(0, (int) (3 * mDensity + 0.5f), 0, 0);
				text.setSingleLine();
				text.setTextColor(Color.WHITE);
				text.setTextSize(TypedValue.COMPLEX_UNIT_SP, 12);
				text.setOnClickListener(this);
				
				RelativeLayout.LayoutParams p = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
				p.addRule(RelativeLayout.ABOVE, R.id.inputBar);
				p.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
				p.bottomMargin = (int) (5 * mDensity + 0.5f);
				p.rightMargin = (int) (25 * mDensity + 0.5f);
				
				mContent.addView(text, p);
				mUnReadTxt = text;
				
				if(speakerPhoneLayout != null)
				{
					((RelativeLayout.LayoutParams)speakerPhoneLayout.getLayoutParams()).addRule(RelativeLayout.ABOVE, R.id.msg_unread_count);
				}
			}
			
			mUnReadTxt.setText(unReadCnt > 99 ? "  " : Integer.toString(unReadCnt));
			mUnReadTxt.setVisibility(View.VISIBLE);
		}
	}
	
	                                                                                              

	@Override
	public void onNotCompleteVisable(int overScrollPosition, View overScrollerView, com.tencent.widget.ListView listView)
	{
	}

	@Override
	public void onViewCompleteVisable(int overScrollPosition, View overScrollerView, com.tencent.widget.ListView listView)
	{
	}

	@Override
	public boolean onViewCompleteVisableAndReleased(int overScrollPosition, View overScrollerView, com.tencent.widget.ListView listView)
	{
		if (QLog.isColorLevel())
		{
			QLog.d(TAG, QLog.CLR, "                                         ");
		}
		QQMessageFacade facade = app.getMessageFacade();
		pullReqTime = SystemClock.uptimeMillis();
		((ChatContext) refreshMessageContext.context).setRequestTime(pullReqTime);
				
		if (listAdapter.getCount() >0)
		{
			facade.refreshMessageListHead(sessionInfo.curFriendUin, sessionInfo.curType, 15, refreshMessageContext);
		}
		else
		{
			setOverScrollHandleVisable(false);
		}
		return true;
	}

	@Override
	public void onViewNotCompleteVisableAndReleased(int overScrollPosition, View overScrollerView, com.tencent.widget.ListView listView)
	{

	}

	                                    
	                                                   
	private QQRecorder recorder;

	public enum RecordStatus
	{
		standby, recoding, invalid
	}

	void checkOrUpdatePttRecord(RecordStatus status, String path, long uniseq)
	{
		switch (status)
		{
		case standby:
			                              
			if (path != null && uniseq != 0)
			{
				if (QLog.isColorLevel())
				{
					QLog.i(QQRecorder.TAG, QLog.CLR, "                                           " + path);
				}
				ChatActivityFacade.updatePttRecordMessage(app, sessionInfo, path, MessageForPtt.PTT_SIZE_UI_SEND, uniseq);
				instantUpdate(true);
			}
			break;
		case recoding:

			break;
		case invalid:
			             
			if (path != null)
			{
				File f = StreamDataManager.getFile(path);
				if (null != f && f.exists())
				{
					f.delete();
				}
			}
			if (!uiHandler.hasMessages(ChatActivityConstants.MSG_PTT_RESET_STANDBY))
			{
				uiHandler.sendEmptyMessageDelayed(ChatActivityConstants.MSG_PTT_RESET_STANDBY, 1000);
			}
			           
			app.getMessageFacade().removeMsgByUniseq(sessionInfo.curFriendUin, sessionInfo.curType, uniseq);
			instantUpdate(true);
			break;
		}
	}

	public void startRecord()
	{
		if (uiHandler != null)
		{
			if (uiHandler.hasMessages(ChatActivityConstants.MSG_PTT_RESET_STANDBY))
			{
				uiHandler.removeMessages(ChatActivityConstants.MSG_PTT_RESET_STANDBY);
				checkOrUpdatePttRecord(RecordStatus.standby, null, -1);
			}
			uiHandler.removeMessages(ChatActivityConstants.MSG_PTT_RESET_STANDBY);
			uiHandler.removeMessages(ChatActivityConstants.MSG_VOICE_DELAY_STOP);
			uiHandler.removeMessages(ChatActivityConstants.MSG_VOICE_MAX_STOP);
			                                                    
		}
		mpm.stop(true);
		               
		if (QLog.isColorLevel())
		{
			QLog.d(TAG, QLog.CLR, "                       ");
		}

		if (recorder == null)
		{
			recorder = new QQRecorder(getActivity());
		}
		String path = BuddyTransfileProcessor.getTransferFilePath(app.getCurrentAccountUin(), null, FileMsg.TRANSFILE_TYPE_PTT, null);
		if (QLog.isColorLevel())
		{
			QLog.i(QQRecorder.TAG, QLog.CLR, "      " + path);
		}
		recorder.setOnQQRecorderListener(this);
		                                       
		AudioUtil.muteAudioFocus(this, true);
		if (QLog.isColorLevel())
		{
			QLog.d(TAG, QLog.CLR, "                                     " + System.currentTimeMillis());
		}
		fateOfRecorder = RECORD_TO_SEND;
		recorder.start(path);
	}

	 public void stopAudioRecord()
	    {
		if (recorder != null && !recorder.isStop() && !uiHandler.hasMessages(ChatActivityConstants.MSG_VOICE_DELAY_STOP))
		{
			                                                    
			uiHandler.removeMessages(ChatActivityConstants.MSG_PTT_RESET_STANDBY);
			uiHandler.removeMessages(ChatActivityConstants.MSG_VOICE_DELAY_STOP);
			uiHandler.removeMessages(ChatActivityConstants.MSG_VOICE_MAX_STOP);
			               
			if (QLog.isColorLevel())
			{
				QLog.d(TAG, QLog.CLR, "                               " + System.currentTimeMillis());
			}
			if (recorder != null)
			{
			    Message msg = uiHandler.obtainMessage(ChatActivityConstants.MSG_VOICE_DELAY_STOP);
                                                   
                uiHandler.sendMessageDelayed(msg, 200);
			}
			getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
		}
	}
	 
	 public void dismissRecordDialog() {
	     runOnUiThread(new Runnable(){
            @Override
            public void run() {
                if (pttDlg != null && pttDlg.isShowing() && pttDlg.getWindow() != null && !isFinishing()) {
                    try {
                        if (QLog.isColorLevel()) {
                            QLog.d(QQRecorder.TAG, QLog.CLR, "              ");
                        }
                        pttDlg.dismiss();
                    } catch (IllegalStateException e) {
                        
                    } catch (IllegalArgumentException e){
                    	
                    }
                    pttDlg = null;
                }
                               
                setRequestedOrientation4Recording(true);
                mPttBtn.setText(R.string.aio_press_speak_label);
                mPttBtn.setBackgroundResource(R.drawable.skin_aio_voice_button_normal);
                mPttBtn.setTextColor(getResources().getColor(R.color.skin_aio_input_button));
            }
	     });
	 }
	 
	 int fateOfRecorder = RECORD_TO_SEND;
	 static final int RECORD_TO_SEND = 0;
	 static final int RECORD_TO_CANCEL = 1;
	 static final int RECORD_TO_LISTEN = 2;
	 private CustomRecordListener mCustomRecordListener = new CustomRecordListener() {
        
        @Override
        public void onRecordToSend() {
            if (QLog.isColorLevel()) {
                QLog.d(CustomRecordDialog.TAG, QLog.CLR, "                 ");
            }
            stopAudioRecord();
            fateOfRecorder = RECORD_TO_SEND;
        }
        
        @Override
        public void onRecordToListen() {
            if (QLog.isColorLevel()) {
                QLog.d(CustomRecordDialog.TAG, QLog.CLR, "                   ");
            }
            stopAudioRecord();
            fateOfRecorder = RECORD_TO_LISTEN;
        }
        
        @Override
        public void onRecordToCancel() {
            if (QLog.isColorLevel()) {
                QLog.d(CustomRecordDialog.TAG, QLog.CLR, "                   ");
            }
            stopAudioRecord();
            fateOfRecorder = RECORD_TO_CANCEL;
        }
    };

	@Override
	public void onRecorderPrepare(final String path)
	{
		if (QLog.isColorLevel())
		{
			QLog.d(QQRecorder.TAG, QLog.CLR, "                         " + path);
		}
		StreamDataManager.addStreamTaskToMemoryPool(path, StreamFileInfo.TYPE_STREAM_SEND, (int) (System.currentTimeMillis() / 1000));
		StreamDataManager.addByteArraryToMemoryPool(path, "       ".getBytes(), "       ".getBytes().length, (short) 0);
		                                                                
                                                                          
		                           
		                              
		if (path != null)
		{
			MessageRecord mr = ChatActivityFacade.createPttMessageToShow(app, path, sessionInfo, MessageForPtt.PTT_SIZE_ANIM_START);
			if (sessionInfo.curType == VALUE.UIN_TYPE_FRIEND) {
				mr.extInt = MessageRecord.EXTRA_STREAM_PTT_FLAG;
			}
			recordingUniseq = mr.uniseq;
			instantUpdate(true);
		}
		runOnUiThread(new Runnable(){
            @Override
            public void run() {
                getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
                if (pttDlg != null) {
                    pttDlg.prepare();
                }
            }
        });
	    playPersonalSound(R.raw.ptt_startrecord);
	    
		int timeOut = PttItemBuilder.getPttMaxTime(app, PttItemBuilder.KEY_MAX_TIME_NORMAL_USER) * 1000;
	    FriendManager fm = (FriendManager) app.getManager(QQAppInterface.FRIEND_MANAGER);
	    if (fm != null) {
	        Friends self = fm.findFriendEntityByUin(app.getCurrentAccountUin());
	        if(self != null) {
	            if(self.isServiceEnabled(EVIPSPEC.E_SP_SUPERVIP)) {
	            	timeOut = PttItemBuilder.getPttMaxTime(app, PttItemBuilder.KEY_MAX_TIME_SVIP) * 1000;
	            } else if(self.isServiceEnabled(EVIPSPEC.E_SP_QQVIP)) {
	            	timeOut = PttItemBuilder.getPttMaxTime(app, PttItemBuilder.KEY_MAX_TIME_VIP) * 1000;
	            }
	        }
	    }
		uiHandler.sendEmptyMessageDelayed(ChatActivityConstants.MSG_VOICE_MAX_STOP, timeOut);
		                                                                 
	}
	
    @Override
    public void onRecorderStart() {
        if (QLog.isColorLevel())
        {
            QLog.d(QQRecorder.TAG, QLog.CLR, "               ");
        }
        runOnUiThread(new Runnable(){
            @Override
            public void run() {
            	if(pttDlg != null){
                    pttDlg.start();
            	}
            }
        });
    }

	@Override
	public void onRecorderSilceEnd(String path, byte[] sliceData)
	{
		StreamDataManager.addByteArraryToMemoryPool(path, sliceData, sliceData.length, (short) 0);
		                                   
		                                                                           
		if (sessionInfo.curType == VALUE.UIN_TYPE_FRIEND)
		{
			StreamDataManager.StreamSend(path, app, sessionInfo.curFriendUin, recordingUniseq);
		}
		runOnUiThread(new Runnable()
		{
			@Override
			public void run()
			{
				int amplitude = recorder.getMaxAmplitude() / 10;
				if (pttDlg != null) {
					pttDlg.setVoicePreasure(amplitude);
				}
			}
		});
	}

	@Override
	public void onRecorderNotReady(String path)
	{
		if (QLog.isColorLevel())
		{
			QLog.d("          ", QLog.CLR, "                        " + path);
		}
	}

	@Override
	public void onRecorderError(String path, String errorCode)
	{
		if (QLog.isColorLevel())
		{
			QLog.d("          ", QLog.CLR, "                     " + path + "           " + errorCode);
		}
		dismissRecordDialog();
		                           
		checkOrUpdatePttRecord(RecordStatus.invalid, path, recordingUniseq);
		cancelSendPtt(path, recordingUniseq);
		runOnUiThread(new Runnable(){
            @Override
            public void run() {
                QQToast.makeText(ChatActivity.this, R.string.alert_record_error, Toast.LENGTH_LONG).show(getTitleBarHeight());
            }
        });
	}

	@Override
	public void onRecorderEnd(final String path)
	{
                                                                            

	    dismissRecordDialog();
		int time = StreamDataManager.getStreamMinLen(path);
		if (QLog.isColorLevel())
		{
			QLog.d(QQRecorder.TAG, QLog.CLR, "                      " + time + "       " + fateOfRecorder);
		}
		if (time < ChatActivityConstants.RECORDER_PACKAGE_MIN_SIZE)
		{
			checkOrUpdatePttRecord(RecordStatus.invalid, path, recordingUniseq);
			runOnUiThread(new Runnable(){
                @Override
                public void run() {
                    QQToast.makeText(ChatActivity.this, R.string.alert_short_record_time, Toast.LENGTH_LONG).show(getTitleBarHeight());
                }
			});
			return;
		}
		else
		{
            if (fateOfRecorder == RECORD_TO_LISTEN) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        audioListenDlg = new CustomAudioPlayDialog(ChatActivity.this, path,
                                new AudioPlayListener(recordingUniseq));
                        audioListenDlg.setCancelable(false);
                        audioListenDlg.show();
                    }
                });
            } else if (fateOfRecorder == RECORD_TO_SEND){
                                  
                playPersonalSound(R.raw.ptt_sendover);
                confirmSendPtt(path, recordingUniseq);
            } else {
                               
                playPersonalSound(R.raw.ptt_sendover);
                cancelSendPtt(path, recordingUniseq);
            }
		}
	}
	
	private CustomAudioPlayDialog audioListenDlg;
    class AudioPlayListener implements CustomAudioPlayListener {
        
        private long recordingId;
        
        public AudioPlayListener(long id) {
            this.recordingId = id;
        }

        @Override
        public void onAudioConfirmed(String path) {
            confirmSendPtt(path, recordingId);
            if (audioListenDlg != null && audioListenDlg.isShowing()) {
                audioListenDlg.cancel();
            }
            audioListenDlg = null;
        }

        @Override
        public void onAudioCanceled(String path) {
            cancelSendPtt(path, recordingId);
            if (audioListenDlg != null && audioListenDlg.isShowing()) {
                audioListenDlg.cancel();
            }
            audioListenDlg = null;
        }

        @Override
        public void onAudioError(String path) {
            onAudioCanceled(path);
        }
        
    }
    
    public void confirmSendPtt(String path, long recordingUniseq) {
        int time = StreamDataManager.getStreamMinLen(path);
        StreamDataManager.closeOutputStream(path);
        StreamDataManager.SetSendStreamPackNum(path);
        if (sessionInfo.curType != VALUE.UIN_TYPE_FRIEND)
        {
            StreamDataManager.removeStreamTaskToMemoryPool(path);
        }
        if (time >= ChatActivityConstants.RECORDER_PACKAGE_MIN_SIZE)
        {
            sendPtt(path, recordingUniseq);
        }
                              
        checkOrUpdatePttRecord(RecordStatus.standby, path, recordingUniseq);
    }

    public void cancelSendPtt(String path, long recordingUniseq) {
                       
        checkOrUpdatePttRecord(RecordStatus.invalid, path, recordingUniseq);
        StreamDataManager.closeOutputStream(path);
        StreamDataManager.SetSendStreamPackNum(path);
        StreamDataManager.StreamSend(path, app, sessionInfo.curFriendUin, recordingUniseq, true);
    }

	public void sendPtt(String path, long recordingUniseq)
	{
		String pathStr = (path == null || path.length() < 10) ? "" : path.substring(path.length() - 10, path.length());
		if (QLog.isColorLevel())
		{
			QLog.d(QQRecorder.TAG, QLog.CLR, "                      " + pathStr);
		}
		ChatActivityFacade.uploadPtt(app, sessionInfo.curType, sessionInfo.curFriendUin, path, recordingUniseq, false);
	}

	public void playPersonalSound(int resouceId)
	{
		((BaseApplicationImpl) app.getApp()).mediaPlayerStart(resouceId, false);
	}

	public boolean isRecording()
	{
        return recorder != null && recorder.isRecording();
	};

	private void showPttToast(Context context, boolean speakerPhoneOn, boolean wiredHeadsetOn, boolean btHeadsetOn)
	{
		int modeResId = 0;
		if (btHeadsetOn) {
		    modeResId = R.string.str_ptt_bt_hs_mode;
		}
		else if (wiredHeadsetOn)
		{
			modeResId = R.string.str_ptt_ear_phone_mode;
		}
		else if (speakerPhoneOn)
		{
			modeResId = R.string.str_ptt_speaker_phone_mode;
		}
		else
		{
			modeResId = R.string.str_ptt_ear_mode;
		}
		QQToast.makeText(context, modeResId, Toast.LENGTH_SHORT).show(context.getResources().getDimensionPixelSize(R.dimen.title_bar_height));
	}
	
	   
                                  
                                                                                                                               
                                                              
    
	private TroopFileError.TroopFileErrorObserver troopFileErrorHandlerObserver;
	
	BizTroopObserver bizTroopObserver = new BizTroopObserver() {
		@Override
		protected void onTroopFileStatusUpdate(Object data){
			
			if (listAdapter != null)
				listAdapter.notifyDataSetChanged();
		}
	};
	
	                  
	private void showTroopAssistTip()
	{
		if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_TROOP && TroopAssistantManager.getInstance().getTroopAssistTipInRange(app))
		{
			Intent intent = getIntent();
			if (intent != null)
			{
				                              
				FriendManager fm = (FriendManager) app
						.getManager(QQAppInterface.FRIEND_MANAGER);
                                                                                        
				int num = app.getConversationFacade().getUnreadCount(sessionInfo.curFriendUin, sessionInfo.curType);
				if(num > TroopAssistantManager.TROOP_ASSIST_TIP_NUM_LIMIT
					&& !TroopAssistantManager.getInstance().checkTroopIgnoreTip(app, sessionInfo.curFriendUin)
					&& app.getTroopMask(sessionInfo.curFriendUin) == AppConstants.MSG_FILTER_VALUE.MSG_FILTER_OPEN
					&& !fm.isOpenTroop(sessionInfo.curFriendUin))
				{
					mTroopAssistTip = true;
				}
				else {
					mTroopAssistTip = false;
				}
				if (mTroopAssistTip)
				{
					TroopAssistantManager.getInstance().addTroopAssistTipTime(app);
					                                                                           
					ReportController.reportClickEvent(app, "       ", "", "",
							"          ", "              ", 0, 0, "", "", "", "");
				}
			}
		}
	}
	
	private OnClickListener mTopBarClickListener = new OnClickListener() {
		
		@Override
		public void onClick(View v) {
			                                  
			app.setTroopMsgFilterToServer(sessionInfo.curFriendUin, 2);
			
                                                
			aioTipsController.hideHeaderTips();
			mTroopAssistTip = false;
			
			TroopAssistantManager.getInstance().setTroopIgnoreTip(app, sessionInfo.curFriendUin);

			QQToast.makeText(ChatActivity.this,QQToast.ICON_SUCCESS, 
					R.string.troopassit_guide_option_tip,
					Toast.LENGTH_SHORT).show(getTitleBarHeight());
			
			                                                                                     
			ReportController.reportClickEvent(app, "       ", "", "",
					"          ", "                 ", 0, 0, "", "", "", "");
		}
	};
	
	private onViewHideListener mHideListener = new onViewHideListener() {
		
		@Override
		public void onViewHide() {
			                                   
			if(mTroopAssistTip)
			{
				                                                              
				TroopAssistantManager.getInstance().setTroopIgnoreTip(app, sessionInfo.curFriendUin);
				
				mTroopAssistTip = false;
			}
		}
	};

	   
                                                                                                                                                  
    
                       
                                  
    
	private void onShow()
	{
		getTroopInfoIfNeed();
		                       
		if(isResume()){
			if(CameraUtil.isAioRealTimeBgSupport(app, this) && mRealtimeBgProxy == null){
				mRealtimeBgProxy = new CameraFrameLayoutProxy(this, mContent);
				mRealtimeBgProxy.onCreate();
				if(QLog.isColorLevel()){
					QLog.d(TAG, QLog.CLR, "                    ");
				}
			}else if(mRealtimeBgProxy != null){
				if(QLog.isColorLevel()){
					QLog.d(TAG, QLog.CLR, "           ");
				}
				mRealtimeBgProxy.onResume();
			}
		}

		ChatActivityFacade.insertFriendNewestFeedIfNeeded(app, sessionInfo, listAdapter);

		if(mRealtimeBgProxy!=null && ChatActivityUtils.isTempConv(sessionInfo.curType)){
			mRealtimeBgProxy.setRealtimeBlewView(R.id.aio_top_linearlayout);
		}
		if(isResume()) {
			handleGuideAndTips();
		}
		
		        
		aioEventReport(getIntent());
	}
	
	@Override
	public void onTextChanged(CharSequence s, int start, int before, int count)
	{

	}

	@Override
	public void beforeTextChanged(CharSequence s, int start, int count, int after)
	{

	}

	@Override
	public void afterTextChanged(Editable s)
	{
		if (mInputStat == INPUT_STAT_DEFAULT)
		{
			if (isSimpleBar)
			{
                                                             
				mFunBtn.setSelected(true);
				mFunBtn.setText(R.string.chat_send);
				mFunBtn.setEnabled(s.length() > 0);
			}
			else
			{
				mFunBtn.setEnabled(true);
				if (s.length() > 0)
				{
					mFunBtn.setText(R.string.chat_send);
					mFunBtn.setSelected(true);
				}
				else
				{
					if (mVoiceSpan == null)
					{
						ImageSpan span = new ImageSpan(this, R.drawable.aio_voice);
						SpannableString txt = new SpannableString("                        ");
						txt.setSpan(span, 0, txt.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
						mVoiceSpan = txt;
					}
					mFunBtn.setText(mVoiceSpan);
					mFunBtn.setSelected(false);
				}
			}
		}
	}
	
	         
	protected void setInputStat(int stat)
	{
		if(stat != mInputStat)
		{
			if(stat == INPUT_STAT_PTT)
			{
				if(mPttBtn == null)
				{
                             
                                                       
                                                         
                                                          
                                                           
                                                          
                                                       
                                                    
                                                                
                                                              
                                                                  
                                                                      
                                             
                                               
                                                                  
					final Button btn = new Button(this);
					btn.setId(R.id.voice_input_btn);
					btn.setBackgroundResource(R.drawable.skin_aio_voice_button_normal);
					btn.setTextSize(TypedValue.COMPLEX_UNIT_SP, 14);
					btn.setTextColor(getResources().getColorStateList(R.color.skin_aio_input_button));
					btn.setText(R.string.aio_press_speak_label);
					btn.setOnTouchListener(this);
					int insert = ((ViewGroup)input.getParent()).indexOfChild(input);
					LinearLayout.LayoutParams p = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
					p.weight =  1;
					mInputBar.addView(btn, insert, p);
					mPttBtn = btn;
				}
				mPttBtn.setVisibility(View.VISIBLE);
				input.setVisibility(View.GONE);
                                                               
				mFunBtn.setSelected(false);
				if (mKeyboardSpan == null)
				{
					ImageSpan span = new ImageSpan(this, R.drawable.aio_keyboard);
					SpannableString txt = new SpannableString("                        ");
					txt.setSpan(span, 0, txt.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
					mKeyboardSpan = txt;
				}
				mFunBtn.setText(mKeyboardSpan);
				root.hideAllPanel();
			}
			else
			{
				if(mPttBtn != null)
				{
					mPttBtn.setVisibility(View.GONE);
				}
				input.setVisibility(View.VISIBLE);
				mFunBtn.setSelected(input.getText().length() > 0);
                                                                                                                        
				if (mVoiceSpan == null)
				{
					ImageSpan span = new ImageSpan(this, R.drawable.aio_voice);
					SpannableString txt = new SpannableString("                        ");
					txt.setSpan(span, 0, txt.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
					mVoiceSpan = txt;
				}
				mFunBtn.setText(mVoiceSpan);
			}
			mInputStat = stat;
                          
		}
	}

	   
                                             
    
	public void appendInputer(CharSequence text)
	{
		                           
		setInputStat(INPUT_STAT_DEFAULT);
		input.getEditableText().append(text);
		root.showExternalPanel(XPanelContainer.SOFT_INPUT_PANEL);
	}
	
	@Override
	public void onPanelChanged(int oldPanel, int newPanel)
	{
		                                              
		                         
		uiHandler.obtainMessage(MSG_ON_PANEL_UPDATE, oldPanel, newPanel).sendToTarget();
	}
	
	private void doPanelChanged(int oldPanel, int newPanel)
	{
		switch (newPanel)
		{
			case EXT_PANEL_EMOTCATION:
				mEmoBtn.setImageResource(R.drawable.aio_keyboard);
				mPlusBtn.setImageResource(R.drawable.aio_fold);
				break;
			case EXT_PANEL_PLUS:
				mEmoBtn.setImageResource(R.drawable.qzone_edit_face_drawable);
				mPlusBtn.setImageResource(R.drawable.aio_collapse);
				break;
			default:
				mEmoBtn.setImageResource(R.drawable.qzone_edit_face_drawable);
				mPlusBtn.setImageResource(R.drawable.aio_fold);
				break;
		}
	}
	
	@Override
	public View onCreatePanel(int panelId)
	{
		if(panelId == EXT_PANEL_PLUS)
		{
			long time = System.currentTimeMillis();
			mPlusPanel = (PlusPanel) getLayoutInflater().inflate(R.layout.aio_plus_panel, null);
			mPlusPanel.init(this, sessionInfo);
			QLog.d("         ", QLog.CLR,
					"              " + (System.currentTimeMillis() - time));
			return mPlusPanel;
		}
		else if(panelId == EXT_PANEL_EMOTCATION)
		{
			long time = System.currentTimeMillis();
			mEmoPanel = (EmoticonMainPanel) getLayoutInflater().inflate(R.layout.emoticon_aio_panel, null);
			mEmoPanel.setCallBack(this);
			mEmoPanel.init(getApp(), sessionInfo.curType, this, getTitleBarHeight());
			QLog.d("         ", QLog.CLR,
					"                      " + (System.currentTimeMillis() - time));
			return mEmoPanel;
		}
		return null;
	}
	
	public void send(EmoticonInfo info) {
		info.send(app, ChatActivity.this, input, sessionInfo);
	}

	@Override
	public void delete() {
		TextUtils.backspace(input);
	}

	@Override
	public boolean onLongClick(EmoticonInfo info) {
		if(info instanceof FavoriteEmoticonInfo){
			FavoriteEmoticonInfo tempInfo = (FavoriteEmoticonInfo) info;
			tempInfo.onLongClick(ChatActivity.this,app,this);
			return true;
		}
		return false;
	}

	@Override
	public void onShowPopup(EmoticonInfo oldInfo, EmoticonInfo newInfo, Drawable d)
	{
		                                         
		if(newInfo.type == EmoticonPanelInfo.PIC_EMO && newInfo instanceof PicEmoticonInfo && ((PicEmoticonInfo)newInfo).isSound())
		{
		    mpm.stop(true);
		}
	}

	@Override
	public void onHidePopup(EmoticonInfo info)
	{
		
		
	}

	                                                                                             

	private void addBusinessObservers()
	{
		addObserver(msgObserver);
		addObserver(cardObserver);
		addObserver(friendListObserver);
		addObserver(discussionObserver);
		addObserver(configObserver);
		addObserver(bizTroopObserver);
		addObserver(shieldListObserver);
		addProxyObserver(proxyObserver);
		app.setCheckPttListener(this);
		app.getFileManagerNotifyCenter().addObserver(fmob);
		app.getMessageFacade().addObserver(this);
		
	}

	
	
	
	private void removeBusinessObservers()
	{
		if(app==null){
			return;
		}
		removeObserver(msgObserver);
		msgObserver = null;
		removeObserver(cardObserver);
		removeObserver(friendListObserver);
		removeObserver(discussionObserver);
		removeObserver(configObserver);
		removeObserver(bizTroopObserver);
		removeObserver(shieldListObserver);
		removeProxyObserver(proxyObserver);
		app.setCheckPttListener(null);
		app.getFileManagerNotifyCenter().deleteObserver(fmob);
		if (app.getMessageFacade() != null)
		{
			app.getMessageFacade().deleteObserver(this);
		}
		              
		if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_DISCUSSION) {
            app.getGAudioNotifyCenter().deleteObserver(mGAudioObserver);
        }
		if(hotFriendObserver != null){
			app.unRegistObserver(hotFriendObserver);
		}
	}

	protected MessageObserver msgObserver = new MessageObserver()
	{
		@Override
		protected void onPushReadedNotify(boolean isSuccess, Object data)
		{
			Object[] objs = (Object[]) data;
			for (Object js : objs)
			{
				if (js instanceof C2CMsgReadedNotify)
				{
					C2CMsgReadedNotify cr = (C2CMsgReadedNotify) js;
					if (QLog.isColorLevel())
					{
						QLog.i("                  ", QLog.CLR, cr.lPeerUin + "         " + cr.lLastReadTime);
					}
				}
				else if (js instanceof GroupMsgReadedNotify)
				{
					GroupMsgReadedNotify gmr = (GroupMsgReadedNotify) js;
					if (QLog.isColorLevel())
					{
						QLog.i("                  ", QLog.CLR, gmr.lGroupCode + "           " + gmr.lGroupMsgSeq + "      " + gmr.lMemberSeq);
					}
				}
				else if (js instanceof DisMsgReadedNotify)
				{
					DisMsgReadedNotify dr = (DisMsgReadedNotify) js;
					if (QLog.isColorLevel())
					{
						QLog.i("                  ", QLog.CLR, dr.lDisUin + "         " + dr.lMemberSeq);
					}
				}
			}
		}

		private OpenTroopChatLogic mOpenTroopLogic = null;
		protected void onUpdateSendMsgError(final String uin, final int type, int errorCode, SendMessageHandler sendMessageHandler, long timeOut, long uniseq, String errMsg)
		{
			if (uin == null || !uin.equals(sessionInfo.curFriendUin) || type != sessionInfo.curType)
			{
				if (QLog.isColorLevel())
				{
					QLog.d(TAG, QLog.CLR, "                                   " + uin + "      " + type + "        " + uniseq);
				}
				return;
			}
			if (QLog.isColorLevel())
			{
				QLog.d(TAG, QLog.CLR, "                         " + uin + "      " + type + "        " + uniseq);
			}
			if (type == AppConstants.VALUE.UIN_TYPE_TROOP)
			{
				                             
				FriendManager fm = (FriendManager) app.getManager(QQAppInterface.FRIEND_MANAGER);
				if(fm.isOpenTroop(uin)) {
					                             
					if (errorCode == 108) {
						if (mOpenTroopLogic == null) {
							mOpenTroopLogic = new OpenTroopChatLogic(
									sessionInfo, ChatActivity.this);
						}
						ChatMessage lastSendMessage = (ChatMessage)
								listAdapter.getItem(listAdapter.getCount() - 1);
						mOpenTroopLogic.saveMessage(lastSendMessage);
						if (mOpenTroopLogic.needJoinTroop()){
							mOpenTroopLogic.joinTroop();
						}
					}
					                       
					else if (errorCode == 102) {
						finish();
						QQToast.makeText(ChatActivity.this.getApplicationContext(),
								R.string.alert_open_troop_not_exist, Toast.LENGTH_LONG)
								.show(getTitleBarHeight());
					}
					else if(errMsg.length() > 0){
						QQToast.makeText(ChatActivity.this,
								errMsg, Toast.LENGTH_LONG)
								.show(getTitleBarHeight());
					}
				} else {
					switch (errorCode) {
					case 1:
					case 2:
					case 101:
					case 102:
						QQToast.makeText(ChatActivity.this,
								R.string.alert_troop_not_exist, Toast.LENGTH_LONG)
								.show(getTitleBarHeight());
						break;
					case 3:
					case 103:
						QQToast.makeText(ChatActivity.this,
								R.string.alert_not_troop_member, Toast.LENGTH_LONG)
								.show(getTitleBarHeight());
						break;
					}
				}
			}
			else if (type == AppConstants.VALUE.UIN_TYPE_DISCUSSION)
			{
				switch (errorCode)
				{
				case 101:
					QQToast.makeText(ChatActivity.this, R.string.send_discussion_msg_failed, Toast.LENGTH_LONG).show(getTitleBarHeight());
					break;
				case 102:
					QQToast.makeText(ChatActivity.this, R.string.send_discussion_msg_failed_troop_not_exist, Toast.LENGTH_LONG).show(getTitleBarHeight());
					break;
				case 103:
					                    
					                     
					                                                            
					                                                
					DialogUtil.createCustomDialog(ChatActivity.this, DialogUtil.ALERT_DIALOG, "            ", getString(R.string.discussion_not_exist),
							new DialogInterface.OnClickListener()
							{

								@Override
								public void onClick(DialogInterface dialog, int which)
								{

									EntityManager em = app.getEntityManagerFactory().createEntityManager();
									DiscussionInfo info = (DiscussionInfo) em.find(DiscussionInfo.class, uin);
									if (null != info)
									{
										em.remove(info);
									}
									if (RecentUserProxy.DOES_USER_RECENT_USER_PROXY)
									{
										FriendManager fm = (FriendManager) app.getManager(QQAppInterface.FRIEND_MANAGER);
										if (null != fm)
										{
											RecentUser r = (RecentUser) fm.findRecentUser(uin, AppConstants.VALUE.UIN_TYPE_DISCUSSION);
											if (r != null)
											{
												fm.delRecentUser(r);
											}
										}
									}
									else
									{
										RecentUser r = (RecentUser) em.find(RecentUser.class, uin);
										if (r != null)
										{
											em.remove(r);
										}
									}
									em.close();
									finish();
								}
							}, null).show();

					break;
				case 104:
					                                      
					                                                  
					                                                
					DialogUtil.createCustomDialog(ChatActivity.this, DialogUtil.ALERT_DIALOG, "            ",
							getString(R.string.send_discussion_msg_failed_not_member), new DialogInterface.OnClickListener()
							{

								@Override
								public void onClick(DialogInterface dialog, int which)
								{
									EntityManager em = app.getEntityManagerFactory().createEntityManager();
									DiscussionInfo info = (DiscussionInfo) em.find(DiscussionInfo.class, uin);
									if (null != info)
									{
										em.remove(info);
									}
									FriendManager fm = (FriendManager) app.getManager(QQAppInterface.FRIEND_MANAGER);
									RecentUser r = fm.findRecentUserByUin(uin, type);
									if (r != null)
									{
										em.remove(r);
									}
									em.close();

									DiscussionHandler discussionHandler = (DiscussionHandler) app.getBusinessHandler(QQAppInterface.DISCUSSION_HANDLER);
									discussionHandler.sendDelDiscussionNotify();
									finish();
								}
							}, null).show();
					break;
				default:
					break;
				}
			}
			else if (type == AppConstants.VALUE.UIN_TYPE_WPA_3PARTY)
			{
				switch (errorCode)
				{
				                                                              
				case ShieldListHandler.SHIELD_LIST_SEND_MSG_ERROR_CODE:
					break;
				                                 
				case 1603:
					QQToast.makeText(ChatActivity.this, getString(R.string.wpa_permission_reject), Toast.LENGTH_SHORT).show(getTitleBarHeight());
					break;
				default:
					QQToast.makeText(ChatActivity.this, getString(R.string.wpa_sig_timeout), Toast.LENGTH_SHORT).show(getTitleBarHeight());
					break;
				}
			}
			else if (type == AppConstants.VALUE.UIN_TYPE_DISCUSSION_FRIEND)
			{
				switch (errorCode)
				{
				case 102:
				case 103:
				case 104:
					String msg = String.format(getString(R.string.discuss_friend_send_fail_not_friend), sessionInfo.curFriendNick);
					QQToast.makeText(ChatActivity.this, msg, Toast.LENGTH_SHORT).show(getTitleBarHeight());
					break;
				}
			}
			else if (type == AppConstants.VALUE.UIN_TYPE_GROUP_MEMBER_STRANGER)
			{
				switch (errorCode)
				{
				case 102:
				case 103:
				case 104:
					String msg = String.format(getString(R.string.group_temp_send_fail_not_friend), sessionInfo.curFriendNick);
					QQToast.makeText(ChatActivity.this, msg, Toast.LENGTH_SHORT).show(getTitleBarHeight());
					break;
				}
			}
			else if (type == AppConstants.VALUE.UIN_TYPE_OPEN_TROOP_MEMBER_STRANGER)                       
            {
			      
                            
                                                                                                             
                                                                         
                                                                                             
                    
                                 
                                                                                                           
                                                                                  
                                                                                    
                  
                switch (errorCode)
                {
                    case 40:
                    case 102:
                    case 103:
                    case 104:
                        String msg = String.format(getString(R.string.qb_troop_send_error_msg), sessionInfo.curFriendNick);
                        QQToast.makeText(ChatActivity.this, msg, Toast.LENGTH_SHORT).show(getTitleBarHeight());
                        break;
                }
            }
			else if (type == AppConstants.VALUE.UIN_TYPE_SAME_STATE)
			{
				switch (errorCode)
				{
				case 3:                  
				case 21:                                                                  
				case 22:                     
				case 23:                  
				case 28:                                             
				case 48:               
					QQToast.makeText(ChatActivity.this, getString(R.string.same_state_sig_error), Toast.LENGTH_SHORT).show(getTitleBarHeight());
					break;
				default:
					break;
				}
			}
			else if (type == AppConstants.VALUE.UIN_TYPE_CONTACT_STRANGER_FRIEND)
			{
				                                
				switch (errorCode)
				{
				case 1600:
					QQToast.makeText(ChatActivity.this, getString(R.string.error_tips_version_dis_support), Toast.LENGTH_SHORT).show(getTitleBarHeight());
					break;
				case 1601:
					QQToast.makeText(ChatActivity.this, getString(R.string.error_tips_version_dis_support), Toast.LENGTH_SHORT).show(getTitleBarHeight());
					break;
				case 1602:
					QQToast.makeText(ChatActivity.this, getString(R.string.error_tips_no_contact_user), Toast.LENGTH_SHORT).show(getTitleBarHeight());
					break;
				}
			}
			refresh(REFRESH_FLAG_RELOAD | SCROLL_FLAG_SCROLL_NONE);
		};

		@Override
		protected void onUpdateMsgDelFriend(String uin, int uinType, int replyCode)
		{
			if (uin == null || !uin.equals(sessionInfo.curFriendUin) || uinType != sessionInfo.curType)
			{
				return;
			}
			if (uinType == AppConstants.VALUE.UIN_TYPE_TROOP)
			{
				switch (replyCode)
				{
				case 1:
				case 2:
					QQToast.makeText(ChatActivity.this, R.string.alert_troop_not_exist, Toast.LENGTH_LONG).show(getTitleBarHeight());
					break;
				case 3:
					QQToast.makeText(ChatActivity.this, R.string.alert_not_troop_member, Toast.LENGTH_LONG).show(getTitleBarHeight());
					break;
				default:
					return;
				}
				finish();
			}
		}

		@Override
		protected void onSendResult(boolean isSuccess, String uin)
		{
			if (uin == null || uin.length() == 0)
				return;
			if (uin.equals(sessionInfo.curFriendUin))
			{
				refresh(REFRESH_FLAG_RELOAD_IMMEDIATELLY | SCROLL_FLAG_SCROLL_NONE);
			}
		}

		@Override
		protected void onUpdateSecretfileStatus()
		{
			refresh(REFRESH_FLAG_RELOAD_IMMEDIATELLY);
		}
		
		@Override
		protected void onInsertIntoBlackList(boolean isSuccess, String uin) {
			if (uin != null && sessionInfo.curFriendUin != null && sessionInfo.curFriendUin.equals(uin)) {
				ChatActivityUtils.shielMsgResult(ChatActivity.this,isSuccess, false);
				if(isSuccess){
					updateAddFriendAndShieldView();
				}
			}
		}

		@Override
		protected void onRemoveFromBlackList(boolean isSuccess, String uin) {
			if (uin != null && sessionInfo.curFriendUin != null && sessionInfo.curFriendUin.equals(uin)) {
				ChatActivityUtils.shielMsgResult(ChatActivity.this,isSuccess, true);
				if(isSuccess){
					updateAddFriendAndShieldView();
				}
			}
		}

	};

	
	private ShieldListObserver shieldListObserver = new ShieldListObserver() {

		@Override
		protected void onAddShieldList(boolean isSuccess, List<Long> addUinList) {
			if (sessionInfo == null) {
				return;
			}
			boolean bIn = false;
			String uin = sessionInfo.curFriendUin;
			if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_CONTACT_STRANGER_FRIEND) {
				uin = sessionInfo.contactUin;
			}
			int size = addUinList == null ? 0 : addUinList.size();
			for (int i = 0; !bIn && i < size; i++) {
				String key = String.valueOf(addUinList.get(i));
				if (Utils.equalsWithNullCheck(key, uin)) {
					bIn = true;
				}
			}

			if (bIn) {
				ChatActivityUtils.shielMsgResult(ChatActivity.this,isSuccess, false);
				if(isSuccess){
					updateAddFriendAndShieldView();
				}
			}
		}

		@Override
		protected void onDeleteShieldList(boolean isSuccess,
				List<Long> addUinList) {
			if (sessionInfo == null) {
				return;
			}
			boolean bIn = false;
			String uin = sessionInfo.curFriendUin;
			if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_CONTACT_STRANGER_FRIEND) {
				uin = sessionInfo.contactUin;
			}
			int size = addUinList == null ? 0 : addUinList.size();
			for (int i = 0; !bIn && i < size; i++) {
				String key = String.valueOf(addUinList.get(i));
				if (Utils.equalsWithNullCheck(key, uin)) {
					bIn = true;
				}
			}

			if (bIn) {
				ChatActivityUtils.shielMsgResult(ChatActivity.this,isSuccess, true);
				if(isSuccess){
					updateAddFriendAndShieldView();
				}
			}
		}
	};
	
	private FriendListObserver friendListObserver = new FriendListObserver()
	{
		@Override
		protected void onSetGenralSettingsTroopFilter(boolean issuc, Map<String, Integer> data)
		{
			                   
			if(!issuc)
			{
				if (isResume())
				{
					QQToast.makeText(app.getApp(), R.drawable.dialog_fail, getString(R.string.troop_message_setting_fail), Toast.LENGTH_SHORT).show(
							getTitleBarHeight());
				}
			}
		}

		protected void onUpdateOnlineFriend(boolean isSuccess, String[] uin)
		{
			updateOnlineStatus();
		}

		protected void onSetComment(boolean isSuccess, String uin, String name, byte cResult)
		{
			if (isSuccess)
			{
				switch (sessionInfo.curType)
				{
				case AppConstants.VALUE.UIN_TYPE_FRIEND:
					if (uin.equals(sessionInfo.curFriendUin))
					{
						if (name != null && name.length() > 0)
						{
							sessionInfo.curFriendNick = name;
						}
						else
						{
							FriendManager fm = (FriendManager) app.getManager(QQAppInterface.FRIEND_MANAGER);
							sessionInfo.curFriendNick = fm.getFriendDisplayName(sessionInfo.curFriendUin);
							sessionInfo.curFriendNick = sessionInfo.curFriendNick != null ? sessionInfo.curFriendNick : sessionInfo.curFriendUin;
						}
						sessionInfo.curFriendNick = sessionInfo.curFriendNick;
						mTitleText.setText(sessionInfo.curFriendNick);
					}
					break;
				case AppConstants.VALUE.UIN_TYPE_TROOP:
					instantUpdate(false);
					break;
				case AppConstants.VALUE.UIN_TYPE_DISCUSSION:
					instantUpdate(false);
					break;
				default:
					break;
				}
			}
		}

		@Override
		protected void onModifyTroopInfo(boolean isSuccess, long troopuin, int nModifyFlag, 
	   			 TroopInfo troopInfo)
		{
			if (isSuccess && sessionInfo.curType == VALUE.UIN_TYPE_TROOP && troopInfo != null && sessionInfo.curFriendUin.equals(troopInfo.troopuin))
			{
				sessionInfo.curFriendNick = troopInfo.troopname;
				sessionInfo.curFriendNick = sessionInfo.curFriendNick;
				mTitleText.setText(sessionInfo.curFriendNick);
			}
		}

		@Override
		protected void onGetTroopMemberCardInfoResult(boolean isSuc, ArrayList<TroopMemberCardInfo> list)
		{

			if (!isSuc || list == null || list.size() == 0)
			{
				return;
			}

			if (sessionInfo.curType == VALUE.UIN_TYPE_GROUP_MEMBER_STRANGER || sessionInfo.curType == VALUE.UIN_TYPE_OPEN_TROOP_MEMBER_STRANGER)
			{
				for (int i = 0; i < list.size(); i++)
				{
					TroopMemberCardInfo info = list.get(i);
					if (info != null && sessionInfo.curFriendUin.equals(info.memberuin))
					{
						String name = info.name;
						if (name == null || "".equals(name))
						{
							name = info.nick;
						}
						if (name != null && !"".equals(name))
						{
							sessionInfo.curFriendNick = name;
							sessionInfo.curFriendNick = sessionInfo.curFriendNick;
							mTitleText.setText(sessionInfo.curFriendNick);
						}
						break;
					}
				}
			}
		}

		@Override
		protected void onUpdateDelFriend(boolean isSuccess, Object uin)
		{
			if (isSuccess && sessionInfo.curFriendUin.equals(uin + ""))
			{
				if (QLog.isColorLevel())
				{
					QLog.d("        ", QLog.CLR, "                                              " + uin);
				}
				finish();
			}
		}

		@Override
		protected void onUpdateSignature(boolean isSuccess, String[] uinArray)
		{
			if (!isSuccess)
			{
				return;
			}
			if (uinArray == null || uinArray.length == 0)
			{
				return;
			}
			for (int i = 0; i < uinArray.length; i++)
			{
				if (sessionInfo.curFriendUin != null && sessionInfo.curFriendUin.equals(uinArray[i]))
				{
					ChatActivityFacade.insertSignMsgIfNeeded(app, sessionInfo);
					break;
				}
			}
		}

		protected void onUpdateFriendInfo(String uin, boolean isSuccess)
		{
			if (!isSuccess || uin == null)
			{
				return;
			}
			                                                                         
			if ((sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_CONTACT_STRANGER_FRIEND && uin.equals(sessionInfo.contactUin)) || sessionInfo.curFriendUin.equals(uin))
			{
				FriendManager fm = (FriendManager) app.getManager(QQAppInterface.FRIEND_MANAGER);
				String title = fm.getFriendDisplayName(uin);
				sessionInfo.curFriendNick = title;
				sessionInfo.curFriendNick = sessionInfo.curFriendNick;
				mTitleText.setText(sessionInfo.curFriendNick);
			}
		}

		@Override
		protected void onUpdateC2ChatStatus(boolean isSuccess, HashMap<String, String> uinMap)
		{
			if (!uinMap.containsKey(sessionInfo.curFriendUin))
			{
				return;
			}
			for (int i = 0; i < listView.getChildCount(); i++)
			{
				View view = listView.getChildAt(i);
				if (view != null && view instanceof BaseChatItemLayout)
				{
					BaseBubbleBuilder.ViewHolder holder = (BaseBubbleBuilder.ViewHolder) AIOUtils.getHolder(view);
					ChatMessage message = AIOUtils.getMessage(view);
					if (holder != null && message != null && !message.isSendFromLocal() && message.istroop != AppConstants.VALUE.UIN_TYPE_TROOP
							&& message.istroop != AppConstants.VALUE.UIN_TYPE_DISCUSSION
					                                   )
					{
						FriendManager fm = (FriendManager) app.getManager(QQAppInterface.FRIEND_MANAGER);
						                       
						                   
						                                                 
						                                               
						holder.mChatLayout.setHeaderIcon(FaceDrawable.getFaceDrawable(app, FaceDrawable.TYPE_USER_AVATAR, message.senderuin));

					}
				}
			}
		};

		@Override
		protected void onUpdateCustomHead(boolean isSuccess, String uin)
		{
			if (listView == null || uin == null)
			{
				return;
			}
			for (int i = 0; i < listView.getChildCount(); i++)
			{
				View view = listView.getChildAt(i);
				if (view != null && view instanceof BaseChatItemLayout)
				{
					BaseBubbleBuilder.ViewHolder tmpHolder = (BaseBubbleBuilder.ViewHolder) AIOUtils.getHolder(view);
					ChatMessage message = AIOUtils.getMessage(view);
					if (tmpHolder != null && message.senderuin != null && uin.equals(message.senderuin))
					{
						String faceUin = null;
						if (message.istroop == AppConstants.VALUE.UIN_TYPE_GROUP_MEMBER_STRANGER
						       || message.istroop == AppConstants.VALUE.UIN_TYPE_OPEN_TROOP_MEMBER_STRANGER
								|| message.istroop == AppConstants.VALUE.UIN_TYPE_DISCUSSION_FRIEND)
						{
							faceUin = message.frienduin;
						}
						else
						{
							faceUin = message.senderuin;
						}
						tmpHolder.mChatLayout.setHeaderIcon(FaceDrawable.getFaceDrawable(app, FaceDrawable.TYPE_USER_AVATAR, faceUin));
					}
				}
			}
		};
	};

	private DiscussionObserver discussionObserver = new DiscussionObserver()
	{

		@Override
		protected void updateDiscussionInfo(boolean isSuccess, Object[] obj)
		{
			String uin = (String) obj[0];
			boolean isUpdate = (Boolean) obj[1];
			if (sessionInfo.curFriendUin.equals(uin) && isSuccess)
			{
				if (isUpdate) {
					instantUpdate(false);
				}
				if (sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_DISCUSSION) {
					FriendsManagerImp fmi = (FriendsManagerImp) app.getManager(QQAppInterface.FRIEND_MANAGER);
					DiscussionInfo info = fmi.findDiscussionInfoByID(uin);
					if (info != null &&  info.discussionName != null) {
						sessionInfo.curFriendNick = info.discussionName;
						genDiscussTitle(sessionInfo.curFriendNick, info.uin, mTitleText);
					}
				}			
			}

		}

		protected void onChangeDiscussionName(boolean isSuccess, String discussionUin)
		{
			if (sessionInfo.curFriendUin.equals(discussionUin) && sessionInfo.curType == AppConstants.VALUE.UIN_TYPE_DISCUSSION)
			{
				FriendsManagerImp fmi = (FriendsManagerImp) app.getManager(QQAppInterface.FRIEND_MANAGER);
				DiscussionInfo info = fmi.findDiscussionInfoByID(discussionUin);
				if (info != null && info.discussionName != null)
				{
					sessionInfo.curFriendNick = info.discussionName;
					genDiscussTitle(sessionInfo.curFriendNick, info.uin, mTitleText);
				}
			}
		};

	};

	private ConfigObserver configObserver = new ConfigObserver()
	{
		@Override
		protected void onGetAppShareInfo(boolean isSuccess, AppShareID appShareID)
		{
			if (isSuccess)
			{
				if (listAdapter != null)
				{
					listAdapter.notifyDataSetChanged();
				}
			}
		}
	};

	private CardObserver cardObserver = new CardObserver()
	{
		@Override
		protected void onCardDownload(boolean isSuccess, Object data)
		{
			Card card = null;
			if (data instanceof Card)
			{
				card = (Card) data;
			}
			                              
			if (isSuccess && sessionInfo.curFriendUin != null && card != null && sessionInfo.curFriendUin.equals(card.uin)
					&& (sessionInfo.curType == VALUE.UIN_TYPE_LBS_FRIEND || sessionInfo.curType == VALUE.UIN_TYPE_STRANGER_FRIEND))
			{                        
				                     
				                        
                                    
				if (card != null && card.strCertificationInfo != null && !card.strCertificationInfo.equals(""))
				{
					ChatActivityFacade.recordAccostLog(app, sessionInfo);
				}
			}
			                                                         
			if (isSuccess && card != null)
			{
				switch (sessionInfo.curType)
				{
				case AppConstants.VALUE.UIN_TYPE_TROOP:
				case AppConstants.VALUE.UIN_TYPE_DISCUSSION:
				case VALUE.UIN_TYPE_PUBLIC_ACCOUNT:                                                  
					instantUpdate(false);
					break;
				default:
					if (sessionInfo.curFriendUin != null && sessionInfo.curFriendUin.equals(card.uin))
					{
						updateFriendNick();
						mTitleText.setText(sessionInfo.curFriendNick );
						if (AppConstants.VALUE.UIN_TYPE_DISCUSSION == sessionInfo.curType)
						{
							genDiscussTitle(sessionInfo.curFriendNick, sessionInfo.curFriendUin, mTitleText);
						}
					}
					break;
				}
			}
		};

		@Override
		protected void onImpeach(boolean isSuccess, String uin)
		{
			if (loadingDialog != null && loadingDialog.isShowing())
			{
				dismissDialog(ChatActivityConstants.REPORT_LOADING);
			}
			if (isSuccess)
			{
				showDialog(ChatActivityConstants.SUCCESS_DIALOG);
			}
			else
			{
				showDialog(ChatActivityConstants.FAIL_DIALOG);
			}
		};
	};

	private ProxyObserver proxyObserver = new ProxyObserver()
	{
		public void onProxyUpdataTroopMember()
		{
			instantUpdate(false);
		};
	};

	private FMObserver fmob = null;
	private class MyFMObserver extends FMObserver {
			@Override
			protected void OnFileCome(long uniseq, long nSessionId, String strUin, int peerType)
			{
				listAdapter.notifyDataSetChanged();
			}
	
			@Override
			protected void OnFileTransferProgress(boolean bShowCancel, long uniseq, long nSessionId, String strUin, int peerType)
			{
				listAdapter.notifyDataSetChanged();
			}
	
			@Override
			protected void OnFileTransferStart(long uniseq, long nSessionId, String strUin, int peerType)
			{
				listAdapter.notifyDataSetChanged();
			}
	
			@Override
			protected void OnFileTransferEnd(boolean isSuccess, long uniseq, long nSessionId, String strUin, int peerType, int errCode, String retMsg)
			{
				if (QLog.isColorLevel())
				{
					QLog.d(TAG, QLog.CLR, "                              " + isSuccess + "          " + uniseq + "              " + nSessionId + strUin
							+ "            " + peerType + " ");
				}
	
				FileManagerEntity entity = app.getFileManagerDataCenter().QueryFileEntityBySessionId(nSessionId);
	
				if (isSuccess)
				{
					FileManagerUtil.dealWithTransFileSuc(nSessionId);
				}
				else if (entity.nOpType == FMConstants.OPERATION_TYPE_OF2WY || entity.nOpType == FMConstants.OPERATION_TYPE_UPLOAD_WEIYUN)
				{
					FileManagerUtil.dealWithTransFileFaild(nSessionId, errCode, retMsg);
				}
	
				listAdapter.notifyDataSetChanged();
			}
	
			@Override
			protected void OnWeiYunSendToOfflineSuccess()
			{
				if (listAdapter != null)
					listAdapter.notifyDataSetChanged();
			}
	
			@Override
			protected void OnWeiYunSendToOfflineFaild(Integer retCode, long nSessionId, String errMsg)
			{
	
				if (listAdapter != null)
					listAdapter.notifyDataSetChanged();
			}
	
			@Override
			protected void OnOfflineSendToWeiYunFaild(int retCode, long nSessionId, String retMsg) {
				FileManagerUtil.dealWithTransFileFaild(nSessionId, retCode, retMsg);
	
				if (listAdapter != null)
					listAdapter.notifyDataSetChanged();
			}
	
			@Override
			protected void OnOfflineSendToWeiYunSuccess(long nSessionId, String strFileId, int retCode, String retMsg) {
				if( retMsg != null && retMsg.length() > 0 )
					FileManagerUtil.dealWithErrCode(retMsg);
				else
				FileManagerUtil.dealWithTransFileSuc(nSessionId);
			}
	
			@Override
			protected void OnThumbDownLoadSuccess(ThumbnailInfo thumbInfo)
			{
				                                                                            
				if( thumbInfo == null )
					return;
				if (thumbInfo.context instanceof FileManagerEntity) {
					FileManagerEntity entity = (FileManagerEntity) thumbInfo.context;
					if (thumbInfo.filePath != null	&& thumbInfo.filePath.length() > 0)
				{
					entity.strThumbPath = thumbInfo.filePath;
					app.getFileManagerDataCenter().updateFileEntity(entity);
				}
				}
	
				if (listAdapter != null)
					listAdapter.notifyDataSetChanged();
			}
		};
	
	
	
	public void startDelAnimAndDelMsg(final ChatMessage cm){
		if(QLog.isColorLevel()){
			QLog.d(LogTag.DEL_MSG, QLog.CLR, "                         "+cm.uniseq+"       "+cm.getId()+"         "+System.currentTimeMillis());
		}
		if(playDelAnimContainer != null){
			                                         
			cancelDelAnim();
		}
		long startTime = System.currentTimeMillis();
		app.getMessageFacade().removeMsgByMessageRecord(cm, false);

	
	
		long endTime = System.currentTimeMillis();
		if(QLog.isColorLevel()){
			QLog.d(LogTag.DEL_MSG, QLog.CLR, "                                      "+(endTime-startTime));
		}
		int pos = listAdapter.getPositionByData(cm);
		if(QLog.isColorLevel()){
			QLog.d(LogTag.DEL_MSG, QLog.CLR, "       "+pos);
		}
		if(pos<0){
			return;
		}
		int firstPos = listView.getFirstVisiblePosition();
		
		final long HOR_ANIM_DURATION = 400;
		int childIndex = pos-firstPos;
		horMoveView = listView.getChildAt(childIndex);
		                                                    
		if (horMoveView == null) {
			if(QLog.isColorLevel()){
				QLog.d(LogTag.DEL_MSG, QLog.CLR, "                                  "+childIndex+"             "+firstPos+"        "+pos);
			}
			refresh(REFRESH_FLAG_RELOAD | SCROLL_FLAG_NEVER_SCROLL);
			return;
		}
		
		boolean oldCacheEnable = horMoveView.isDrawingCacheEnabled();
		boolean oldWillNotCache = horMoveView.willNotCacheDrawing();
		horMoveView.setDrawingCacheEnabled(true);
		horMoveView.setWillNotCacheDrawing(false);
		
		Bitmap viewShot = horMoveView.getDrawingCache();
		playDelAnimContainer = new FrameLayout(this);
		Bitmap  viewShotCopy = null;
		if(viewShot != null){
			try{
				viewShotCopy = Bitmap.createBitmap(viewShot);
			}catch(OutOfMemoryError oom){
				
			}
		}
		if(QLog.isColorLevel()){
			QLog.d(LogTag.DEL_MSG, QLog.CLR, "                "+viewShotCopy);
		}
		if(viewShotCopy != null){
			ViewGroup msgListParent = (ViewGroup)findViewById(R.id.chat_content);
			RelativeLayout.LayoutParams rootFLParams = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
			rootFLParams.bottomMargin = (int)(50*mDensity);
			rootFLParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM, RelativeLayout.TRUE);
			msgListParent.addView(playDelAnimContainer, 1, rootFLParams);
			playDelAnimContainer.setOnTouchListener(new View.OnTouchListener() {
				@Override
				public boolean onTouch(View v, MotionEvent event) {
					return true;
				}
			});
			
			
			ImageView shotIV = new ImageView(this);
			shotIV.setImageBitmap(viewShotCopy);
			
			
			final FrameLayout fl = new FrameLayout(this);
			FrameLayout.LayoutParams flParams = new FrameLayout.LayoutParams(horMoveView.getWidth(),horMoveView.getHeight());
			flParams.gravity = Gravity.LEFT|Gravity.TOP;
			playDelAnimContainer.addView(fl, flParams);
			horMoveView.setVisibility(View.INVISIBLE);
			fl.addView(shotIV, new FrameLayout.LayoutParams(
					ViewGroup.LayoutParams.MATCH_PARENT,
					ViewGroup.LayoutParams.MATCH_PARENT));
			
			
			flParams.leftMargin = horMoveView.getLeft();
			flParams.topMargin = horMoveView.getTop();
			flParams.rightMargin = 0;
			flParams.bottomMargin = 0;
			
			LinearInterpolator li = new LinearInterpolator();
			AnimationSet animSet = new AnimationSet(true);
    		AlphaAnimation aa = new AlphaAnimation(1f, 0f);
    		aa.setDuration(HOR_ANIM_DURATION);
    		aa.setInterpolator(li);
    		animSet.addAnimation(aa);
    		TranslateAnimation ta = null;
    		if(cm.isSend()){
    			ta = new TranslateAnimation(0, horMoveView.getRight(), 0, 0);
    		}else{
    			ta = new TranslateAnimation(0, -horMoveView.getRight(), 0, 0);
    		}
    		ta.setDuration(HOR_ANIM_DURATION);
    		ta.setInterpolator(li);
    		animSet.addAnimation(ta);
    		shotIV.startAnimation(animSet);
            uiHandler.postDelayed(new Runnable()
            {

                @Override
                public void run()
                {
                    if (QLog.isColorLevel())
                    {
                        QLog.d(LogTag.DEL_MSG, QLog.CLR, "                                            " + System.currentTimeMillis());
                    }
                    fl.setVisibility(View.GONE);
                    horMoveView.setVisibility(View.VISIBLE);

                }
            }, HOR_ANIM_DURATION);
		}
		horMoveView.setDrawingCacheEnabled(oldCacheEnable);
		horMoveView.setWillNotCacheDrawing(oldWillNotCache);
		
		long delayStartVerAnim = 0;
		                             
		if(viewShotCopy != null){
			delayStartVerAnim = 200;
			Message startVerAnimMsg = uiHandler.obtainMessage(ChatActivityConstants.MSG_START_VER_ANIM);
			startVerAnimMsg.obj = cm;
			uiHandler.sendMessageDelayed(startVerAnimMsg, delayStartVerAnim);
		}else
		{
			listAdapter.removeRow(cm);
			uiHandler.sendEmptyMessageDelayed(ChatActivityConstants.MSG_HANDLE_AFTER_DEL_ANIM, VER_ANIM_DURATION);
		}
	}
	
	
    private void cancelDelAnim()
    {
        if (QLog.isColorLevel())
        {
            QLog.d(LogTag.DEL_MSG, QLog.CLR, "                                  " + System.currentTimeMillis());
        }
        uiHandler.removeMessages(ChatActivityConstants.MSG_START_VER_ANIM);
        uiHandler.removeMessages(ChatActivityConstants.MSG_HANDLE_AFTER_DEL_ANIM);
        listView.clearDelAnim();
        if (horMoveView != null)
        {
            horMoveView.setVisibility(View.VISIBLE);
        }
        if (playDelAnimContainer != null)
        {
            if (playDelAnimContainer.getParent() != null)
            {
                ((ViewGroup) playDelAnimContainer.getParent()).removeView(playDelAnimContainer);
            }
        }
        horMoveView = null;
        playDelAnimContainer = null;
    }


	@Override
	protected void doOnUserLeaveHint() {
	    if(mpm != null) {
	        mpm.stop(true);
	    }
		super.doOnUserLeaveHint();
	}
	
	private GAudioObserver mGAudioObserver = null;
	private class MyGAudioObserver extends GAudioObserver {
        @Override
        protected void OnRecvInvite(long discussId, long memberUin) {
            try {
                if (discussId == Long.parseLong(sessionInfo.curFriendUin)) {
                    refreshMultiVideoStatus(sessionInfo.curFriendUin);
                }
            } catch (NumberFormatException e) {
                if (QLog.isColorLevel()) {
                    QLog.d(TAG, QLog.CLR, "            ", e);
                }
            }
            super.OnRecvInvite(discussId, memberUin);
        }

        @Override
        protected void OnMemberInfo(long discussId, long memberNum) {
            try {
                if (discussId == Long.parseLong(sessionInfo.curFriendUin)) {
                    refreshMultiVideoStatus(sessionInfo.curFriendUin);
                }
            } catch (NumberFormatException e) {
                if (QLog.isColorLevel()) {
                    QLog.d(TAG, QLog.CLR, "            ", e);
                }
            }
            super.OnMemberInfo(discussId, memberNum);
        }

        @Override
        protected void OnMemberJoin(long discussId, long memberUin) {
            try {
                if (discussId == Long.parseLong(sessionInfo.curFriendUin)) {
                    refreshMultiVideoStatus(sessionInfo.curFriendUin);
                }
            } catch (NumberFormatException e) {
                if (QLog.isColorLevel()) {
                    QLog.d(TAG, QLog.CLR, "            ", e);
                }
            }
            super.OnMemberJoin(discussId, memberUin);
        }
        
        @Override
        protected void OnMemberQuit(long discussId, long memberUin) {
            try {
                if (discussId == Long.parseLong(sessionInfo.curFriendUin)) {
                    refreshMultiVideoStatus(sessionInfo.curFriendUin);
                }
            } catch (NumberFormatException e) {
                if (QLog.isColorLevel()) {
                    QLog.d(TAG, QLog.CLR, "            ", e);
                }
            }
            super.OnMemberQuit(discussId, memberUin);
        }
    };
    
    private void refreshMultiVideoStatus(String discussUin) {
        if (sessionInfo.curType == VALUE.UIN_TYPE_DISCUSSION) {
            long discussId = 0;
            try {
                discussId = Long.parseLong(discussUin);
            } catch (NumberFormatException e) {
                discussId = 0;
            }
            long memberNum = app.getGAudioNotifyCenter().getMultiRoomMemberNum(discussId);
            if (memberNum > 0) {
                                              
                TextView multiVideoText = null;
                Button multiVideoButton = null;
                ImageView multiVideoArrow = null;
                if (mMultiVideoStatus == null) {
                    LayoutInflater inflater = (LayoutInflater)getSystemService(LAYOUT_INFLATER_SERVICE);
                    mMultiVideoStatus = inflater.inflate(R.layout.aio_multi_video_status, null);
                    mMultiVideoStatus.setId(R.id.msgbox_multi_video);
                    mMultiVideoStatus.setPadding(0, (int) (2 * mDensity), 0, (int) (2 * mDensity));
                    mMultiVideoStatus.setBackgroundResource(R.color.qav_black_99);
                    mMultiVideoStatus.setClickable(true);
                    mContent.addView(mMultiVideoStatus, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
                    multiVideoText = (TextView) mMultiVideoStatus.findViewById(R.id.text_multi_video);
                    multiVideoButton = (Button) mMultiVideoStatus.findViewById(R.id.button_multi_video);
                    multiVideoArrow = (ImageView) mMultiVideoStatus.findViewById(R.id.icon_multi_video_arrow);
                    
                    multiVideoButton.setOnClickListener(this);
                    UITools.SetAccText(multiVideoButton, getString(R.string.gaudio_enter_acc_txt));
                    UITools.SetAccText(mMultiVideoStatus, getString(R.string.gaudio_return_to_gaudio_user_interface_acc_txt));
                } else {
                    multiVideoText = (TextView) mMultiVideoStatus.findViewById(R.id.text_multi_video);
                    multiVideoButton = (Button) mMultiVideoStatus.findViewById(R.id.button_multi_video);
                    multiVideoArrow = (ImageView) mMultiVideoStatus.findViewById(R.id.icon_multi_video_arrow);
                }
                
                String text = null;
                if (app.getGAudioNotifyCenter().isChating(discussId)) {
                    text = getString(R.string.aio_multi_videoing);
                    multiVideoText.setText(text);
                    mMultiVideoStatus.setOnClickListener(this);
                    int color = getResources().getColor(R.color.qav_blue_d8);
                    mMultiVideoStatus.setBackgroundColor(color);
                    multiVideoButton.setVisibility(View.INVISIBLE);
                    multiVideoArrow.setVisibility(View.VISIBLE);
                } else {
                    text = getString(R.string.aio_multi_videoing_number);
                    multiVideoText.setText(String.format(text, memberNum));
                    mMultiVideoStatus.setOnClickListener(null);
                    int color = getResources().getColor(R.color.qav_black_99);
                    mMultiVideoStatus.setBackgroundColor(color);
                    multiVideoButton.setVisibility(View.VISIBLE);
                    multiVideoArrow.setVisibility(View.INVISIBLE);
                }
                mMultiVideoStatus.setVisibility(View.VISIBLE);
            } else if (mMultiVideoStatus != null && mMultiVideoStatus.isShown()) {
                mMultiVideoStatus.setVisibility(View.INVISIBLE);
            }
        } else if (mMultiVideoStatus != null && mMultiVideoStatus.isShown()) {
            mMultiVideoStatus.setVisibility(View.INVISIBLE);
        }
    }
    
    public void hidePanel(){
    	root.hideAllPanel();
    }

       
                                              
    
	public void send() {
        if(input.getText().length() > 0)
        {
            String msgStr = input.getText().toString();
            final int MAX_LEN = 3478;
            if (msgStr != null && msgStr.length() > MAX_LEN) {
                ChatActivityUtils.toast(this, R.string.send_string_out_of_length, Toast.LENGTH_LONG);
                return;
            }
            ChatActivityFacade.sendMessage(app, ChatActivity.this, sessionInfo, input.getText().toString());
            input.getEditableText().clear();
            input.setText("");
            msgReport(entrance, -1);
        }
    }
	
	   
                            
                 
    
	private void aioEventReport(Intent intent){
		
		Bundle extras = intent.getExtras();
		if( extras != null && needUpload ){

			extras.getBoolean(AppConstants.START_FROM_NOTIFICATION, false);
			int aFlag = extras.getInt(ChatActivityConstants.KEY_AIO_MSG_SOURCE, ChatActivityConstants.TYPE_OTHER);
			
			if (QLog.isDevelopLevel()){
				QLog.d("           ", QLog.DEV, "                  " + aFlag);
			}
			
			ReportController.reportClickEvent(app, "       ", "", "", "   ", "          ", 0, 0, ChatActivityUtils.getAioMoreFlag(sessionInfo.curType), String.valueOf(aFlag), "", "");
			
		}
	}


	   
                                        
                                                    
    
	public void onEnterCamera(){
		if(mRealtimeBgProxy != null){
			mRealtimeBgProxy.onEnterCamera();
		}
	}
}

