<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	文件名： build_common.xml
	创建日期： 2010/4/8
	描述：
		 实际构建过程的定义。
-->

<project name="build_common" default="" basedir=".">

	<!-- ######属性定义部分###### -->
	<!-- 项目的目录属性定义 -->
	<property name="src" value="${sample_project_path}/src" />
	<!-- 源代码 -->
	<property name="tempsrc" value="${sample_project_path}/tempsrc" />
	<!-- 源代码目录 -->
	<property name="res" value="${sample_project_path}/res" />
	<!-- 资源 -->
	<property name="lib" value="${sample_project_path}/libs" />
	<!-- 库 -->
	<property name="assets" value="${sample_project_path}/assets" />
	<!-- assets -->
	<property name="bin" value="${sample_project_path}/bin" />
	<!-- 包目录 -->
	<property name="classes" value="${bin}/classes" />
	<!-- classes -->
	<property name = "code_dog_sample_classes" value="${basedir}/codedog/sampleclasses" />
	<!-- codedog sample classes-->
	<property name="gen" value="${sample_project_path}/gen" />
	<!-- 生成R.java -->

	<!-- 时间戳属性定义，用于包的文件名 -->
	<tstamp>
		<format property="timestamp" pattern="yyyyMMddHHmmss" />
	</tstamp>

	<!-- 编码设置 -->
	<property name="encoding" value="UTF-8" />

	<!-- Android相关属性定义-->
	<property name="android_framework" value="${android_home}/platforms/android-19/framework.aidl" />
	<property name="dex" value="${bin}/classes.dex" />
	<property name="aapt" value="${android_home}/build-tools/19.1.0/aapt" />
	<property name="aidl" value="${android_home}/build-tools/19.1.0/aidl" />
	<property name="adb" value="${android_home}/platform-tools/adb" />
	<property name="dx" value="${android_home}/build-tools/19.1.0/dx${bat}" />
	<property name="apkbuilder" value="${android_home}/tools/apkbuilder${bat}" />
	<property name="signer" value="jarsigner" />
	<!-- 注意，这里的android sdk的版本，请参考Android-versions.txt对应表进行设置-->
	<property name="androidjar" value="${android_home}/platforms/android-19/android.jar" />
	<!-- ######属性定义部分结束###### -->

	<!-- ###### Target定义部分 ###### -->
	<target name="clean">
		<echo>清理中...</echo>
		<delete dir="${classes}" />
		<delete dir="${bin}" />
		<delete dir="${tempsrc}" />		
		<delete file="${sampledir}/${sdk_file_name}_insertlog.jar" failonerror="false"/>
		<delete file="${code_dog_sample_classes}" /> <!-- delete codedog sample classes-->
		<echo>完成清理：</echo>
	</target>
	
	<!-- 清空原生的jar包 -->
	<target name="clean_native_sdk_jar">
		<echo>清理中...</echo>
		<delete dir="${classes}" />
		<delete dir="${bin}" />
		<delete dir="${tempsrc}" />
		<delete file="${sampledir}/${sdk_file_name}.jar" failonerror="false"/>
		<delete file="${code_dog_sample_classes}" /> <!-- delete codedog sample classes-->
		<echo>完成清理：</echo>
	</target>

	<target name="init">
		<echo>初始化中...</echo>
		<mkdir dir="${bin}" />
		<mkdir dir="${lib}" />
		<mkdir dir="${classes}" />
		<mkdir dir="${gen}" />
		<mkdir dir="${tempsrc}" />
		<mkdir dir="${code_dog_sample_classes}"/> <!-- mkdir codedog sample classes-->

		<echo>copy source code to tempsrc...</echo>
		<copy todir="${tempsrc}" filtering="true">
			<fileset dir="${src}">
				<include name="**/*.java" />
				<include name="**/*.aidl" />
			</fileset>
		</copy>
	</target>

	<!-- 为该项目资源生成R.java文件 -->
	<target name="generate">
		<echo>Generating R.java / Manifest.java from the resources...</echo>
		<exec executable="${aapt}" failonerror="true">
			<arg value="package" />
			<arg value="-m" />
			<arg value="-J" />
			<arg value="${gen}" />
			<arg value="-M" />
			<arg value="${sample_project_path}/AndroidManifest.xml" />
			<arg value="-S" />
			<arg value="${res}" />
			<arg value="-I" />
			<arg value="${androidjar}" />
		</exec>
	</target>

	<!-- 从*.aidl文件生成java classes -->
	<target name="aidl">
		<echo>Compiling aidl files into Java classes...</echo>
		<apply executable="${aidl}" failonerror="true">
			<!-- <arg value="-p${android_framework}" /> -->
			<arg value="-I${tempsrc}" />
			<fileset dir="${tempsrc}">
				<include name="**/*.aidl" />
			</fileset>
		</apply>
	</target>

	<!-- 编译项目的.java文件为.class文件 -->
	<target name="compile">
		<echo>开始编译...</echo>
		<javac encoding="UTF-8" debug="true" extdirs="" target="1.6" destdir="${classes}" bootclasspath="${androidjar}">
			<src path="${tempsrc}" />
			<src path="${gen}" />
			<classpath>
				<fileset dir="${lib}" includes="*.jar" />
			</classpath>
		</javac>
		<echo>结束编译...</echo>
		<echo>开始拷贝sample classes...</echo>
		<copy todir="${code_dog_sample_classes}" filtering="true">
			<fileset dir="${classes}">
				<include name="**/*" />
			</fileset>
		</copy>
		<echo>结束拷贝sample classes...</echo>
	</target>

	<!-- 打包 -->
	<target name="package">
		<jar basedir="${classes}" destfile="temp.jar" />
	</target>

	<!-- 对打包后的结果进行混淆 -->
	<target name="obfuscate">
		<java jar="${proguard_home}/lib/proguard.jar" fork="true" failonerror="true">
			<jvmarg value="-Dmaximum.inlined.code.length=32" />
			<arg value="-injars temp.jar" />
			<arg value="-outjars obfuscated.jar" />
			<arg value="-libraryjars ${androidjar}" />
			<arg value="-libraryjars ${lib}" />
			<!-- <arg value="-libraryjars ${library-jar}/some_lib_used.jar"/> -->
			<!-- <arg value="-dontpreverify"/> -->
			<arg value="-dontoptimize" />
			<arg value="-dontusemixedcaseclassnames" />
			<arg value="-keep public class *" />
			<!-- <arg value="-optimizationpasses 7"/>  -->
			<arg value="-verbose" />
			<arg value="-dontskipnonpubliclibraryclasses" />
			<arg value="-dontskipnonpubliclibraryclassmembers" />
		</java>
		<delete file="temp.jar" />
		<delete dir="${classes}" />
		<mkdir dir="${classes}" />
		<unzip src="obfuscated.jar" dest="${classes}" />
		<delete file="obfuscated.jar" />
	</target>

	<!-- 将该项目经过混淆的.class文件转换为.dex文件 -->
	<target name="dex">
		<echo>Converting compiled files and external libraries into ${bin}/${dex}...</echo>
		<apply executable="${dx}" failonerror="true" parallel="true">
			<arg value="--dex" />
			<arg value="--output=${dex}" />
			<arg path="${classes}" />
			<fileset dir="${lib}" includes="*.jar" />
		</apply>
	</target>

	<!-- 打包项目的资源文件 -->
	<target name="package_res_with_assets">
		<echo>Packaging resources and assets...</echo>
		<exec executable="${aapt}" failonerror="true">
			<arg value="package" />
			<arg value="-f" />
			<arg value="-M" />
			<arg value="${sample_project_path}/AndroidManifest.xml" />
			<arg value="-S" />
			<arg value="${res}" />
			<arg value="-A" />
			<arg value="${assets}" />
			<arg value="-I" />
			<arg value="${androidjar}" />
			<arg value="-F" />
			<arg value="${bin}/${project_name}.ap_" />
		</exec>
	</target>

	<!-- 打包项目资源文件，但不包括assets -->
	<target name="package_res_without_assets">
		<echo>Packaging resources...</echo>
		<exec executable="${aapt}" failonerror="true">
			<arg value="package" />
			<arg value="-f" />
			<arg value="-M" />
			<arg value="${sample_project_path}/AndroidManifest.xml" />
			<arg value="-S" />
			<arg value="${res}" />
			<!-- No assets directory -->
			<arg value="-I" />
			<arg value="${androidjar}" />
			<arg value="-F" />
			<arg value="${bin}/${project_name}.ap_" />
		</exec>
	</target>

	<!-- 打包应用，此处不做签名，在后续的步骤中可以使用商业发布的密钥文件进行签名 -->
	<target name="release">
		<echo>Packaging ${out-unsigned-package} for release...</echo>
		<java classpath="${android_home}/tools/lib/sdklib.jar" classname="com.android.sdklib.build.ApkBuilderMain" failonerror="true">
			<arg value="${bin}/${sample_file_name}_unsigned.apk" />
			<arg value="-u" />
			<arg value="-z" />
			<arg value="${bin}/${project_name}.ap_" />
			<arg value="-f" />
			<arg value="${dex}" />
			<arg value="-rf" />
			<arg value="${tempsrc}" />
			<arg value="-rj" />
			<arg value="${lib}" />
			<arg value="-nf" />
			<arg value="${lib}" />

		</java>
		<echo>It will need to be signed with jarsigner before being published.</echo>

		<echo>仅保留apk文件...</echo>
		<delete includeemptydirs="true">
			<fileset dir="${bin}" excludes="*.apk" />
		</delete>
		<delete dir="${tempsrc}" />
	</target>

	<!-- 签名 -->
	<target name="sign">
		<echo>begin sign...</echo>
		<exec executable="${signer}" failonerror="false">
			<arg value="-verbose" />
			<arg value="-keystore" />
			<arg value="${keystore}" />
			<arg value="-storepass" />
			<arg value="${key_pass}" />
			<arg value="-keypass" />
			<arg value="${key_pass}" />
			<arg value="-signedjar" />
			<arg value="${bin}/${sample_file_name}.apk" />
			<arg value="${bin}/${sample_file_name}_unsigned.apk" />
			<arg value="${key_name}" />
			<arg value="-digestalg"/>
			<arg value="SHA1"/>
			<arg value="-sigalg"/>
			<arg value="MD5withRSA"/>
		</exec>
		<echo>end sign...</echo>
		<copy file="${bin}/${sample_file_name}.apk" tofile="${output_path}/${sample_file_name}.apk" />
	</target>
	
	<!-- 签名 -->
	<target name="sign_for_insertlog" if = "${isAccurateTest}">
		<echo>begin sign...</echo>
		<exec executable="${signer}" failonerror="false">
			<arg value="-verbose" />
			<arg value="-keystore" />
			<arg value="${keystore}" />
			<arg value="-storepass" />
			<arg value="${key_pass}" />
			<arg value="-keypass" />
			<arg value="${key_pass}" />
			<arg value="-signedjar" />
			<arg value="${bin}/${sample_file_name}.apk" />
			<arg value="${bin}/${sample_file_name}_unsigned.apk" />
			<arg value="${key_name}" />
			<arg value="-digestalg"/>
			<arg value="SHA1"/>
			<arg value="-sigalg"/>
			<arg value="MD5withRSA"/>
		</exec>
		<echo>end sign...</echo>
		<copy file="${bin}/${sample_file_name}.apk" tofile="${output_path}/${sample_file_name}_insertlog.apk" />
	</target>
	
	<!-- 增加debug插桩包注释 -->
	<target name="zip_comment_insertLog_apk" if = "${isAccurateTest}">
		<echo>zip_comment_insertLog_apk_d</echo>
		<exec executable="python" failonerror="true" >
            <arg value="${insertLogPath}/insertLog_Zip_comment.py" />
			<arg value="${sample_file_name}" />
			<arg value="${output_path}/${sample_file_name}_insertlog.apk" />
		</exec>
	</target>
	
	<!-- 非code dog环境，清理codedog 目录的classes文件-->
	<target name="clean_code_dog_classes" unless = "${isCodedog}">
		<echo> clean code dog </echo>
		<delete dir="${basedir}/codedog" />
	</target>

</project>
