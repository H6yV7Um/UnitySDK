
package com.tencent.open;

import java.lang.ref.WeakReference;
import java.lang.reflect.Method;

import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.Paint;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.os.SystemClock;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.webkit.WebSettings;
import android.webkit.WebSettings.RenderPriority;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.Toast;

import com.tencent.connect.auth.QQToken;
import com.tencent.connect.common.Constants;
import com.tencent.open.report.ReportManager;
import com.tencent.open.log.SLog;
import com.tencent.open.widget.KeyboardDetectorRelativeLayout;
import com.tencent.open.widget.KeyboardDetectorRelativeLayout.IKeyboardChanged;
import com.tencent.open.widget.OpenWebView;
import com.tencent.tauth.IUiListener;
import com.tencent.tauth.UiError;
import com.tencent.open.utils.ServerSetting;
import com.tencent.open.utils.Util;

public class PKDialog extends JsDialog implements IKeyboardChanged {
    private static final String TAG = SLog.TAG + ".PKDialog";
    
    private static final int WEBVIEW_HEIGHT = 185;

    private static final int MSG_COMPLETE = 1;

    private static final int MSG_CANCEL = 2;

    private static final int MSG_SHOW_TIPS = 3;

    private static final int MSG_ON_LOAD = 4;

    private static final int MSG_SHOW_PROCESS = 5;

    private String mUrl;
    private IUiListener listener;
    private OnTimeListener mListener;
    private Handler mHandler;

    private KeyboardDetectorRelativeLayout mFlMain;
    private OpenWebView mWebView;
    private WeakReference<Context> mWeakContext;

    private int mWebviewHeight;

    public PKDialog(Context context, String action, String url, final IUiListener listener, QQToken token) {
        super(context, android.R.style.Theme_Translucent_NoTitleBar);
        mWeakContext = new WeakReference<Context>(context);
        mUrl = url;
        mListener = new OnTimeListener(context, action, url, token.getAppId(), listener);
        mHandler = new THandler(mListener, context.getMainLooper());
        this.listener = listener;
        mWebviewHeight = Math.round(WEBVIEW_HEIGHT * context.getResources().getDisplayMetrics().density);
        SLog.e(TAG, "density=" + context.getResources().getDisplayMetrics().density + "; webviewHeight=" + mWebviewHeight);
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
    	requestWindowFeature(Window.FEATURE_NO_TITLE);
        super.onCreate(savedInstanceState);        
        // this.setCancelable(false);
        this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
        this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_UNCHANGED);
        createViews();
        initViews();
    }

    private void createViews() {

        mFlMain = new KeyboardDetectorRelativeLayout(mWeakContext.get());
        mFlMain.setBackgroundColor(0x66000000);
        mFlMain.setLayoutParams(new RelativeLayout.LayoutParams(android.view.ViewGroup.LayoutParams.MATCH_PARENT,
                android.view.ViewGroup.LayoutParams.MATCH_PARENT));

        mWebView = new OpenWebView(mWeakContext.get());
        mWebView.setBackgroundColor(0x00000000);
        mWebView.setBackgroundDrawable(null);
        // 如果版本大于11禁用硬件加速，使webview透明生效
        if (Build.VERSION.SDK_INT >= 11) { // Android v3.0+
            try {
                Method method = View.class.getMethod("setLayerType", int.class, Paint.class);
                method.invoke(mWebView, 1, new Paint()); // 1 = LAYER_TYPE_SOFTWARE (API11)
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        LayoutParams paramss = new LayoutParams(
                android.view.ViewGroup.LayoutParams.MATCH_PARENT,
                mWebviewHeight);
        paramss.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);
        mWebView.setLayoutParams(paramss);
        mFlMain.addView(mWebView);
        mFlMain.addKeyboardStateChangedListener(this);
        setContentView(mFlMain);

    }

    @SuppressLint("SetJavaScriptEnabled")
    private void initViews() {
        // View v = findViewById(R.id.com_tencent_open_progress_fl);
        // sWeakProcessBar = new WeakReference<View>(v);
        // mWebView = (WebView) findViewById(R.id.com_tencent_open_dialog_wv);
        mWebView.setVerticalScrollBarEnabled(false);
        mWebView.setHorizontalScrollBarEnabled(false);
        mWebView.setWebViewClient(new FbWebViewClient());
        mWebView.setWebChromeClient(mChromeClient);
        mWebView.clearFormData();
        // mWebView.clearCache(true);

        WebSettings setting = mWebView.getSettings();
        if (setting == null) {
            return;
        }
        setting.setSavePassword(false);
        setting.setSaveFormData(false);
        // setting.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        setting.setCacheMode(WebSettings.LOAD_DEFAULT);

        // add by milesxia 2012-11-16
        setting.setNeedInitialFocus(false);
        setting.setBuiltInZoomControls(true);
        setting.setSupportZoom(true);

        setting.setRenderPriority(RenderPriority.HIGH);
        setting.setJavaScriptEnabled(true);

        if (mWeakContext != null && mWeakContext.get() != null) {
            setting.setDatabaseEnabled(true);
            setting.setDatabasePath(mWeakContext.get().getApplicationContext()
                    .getDir("databases", Context.MODE_PRIVATE).getPath());
        }
        setting.setDomStorageEnabled(true);

        jsBridge.registerHandler(new JsListener(), "sdk_js_if");

        mWebView.clearView();
        mWebView.loadUrl(mUrl);
        mWebView.getSettings().setSavePassword(false);
    }

//    @SuppressLint("NewApi")
//    private final WebChromeClient mChromeClient = new WebChromeClient() {
//        @Override
//        public boolean onConsoleMessage(ConsoleMessage cm) {
//            SLog.i("WebConsole", cm.message() + " -- From line "
//                    + cm.lineNumber() + " of "
//                    + cm.sourceId());
//            return true;
//        }
//
//        @Override
//        public void onConsoleMessage (String message, int lineNumber, String sourceID){
//            SLog.i("WebConsole", message + " -- From line "
//                    + lineNumber + " of "
//                    + sourceID);
//        }
//    };

    public void callJs(String method, String data) {
        String script = "javascript:" + method + "(" + data + ")";
        mWebView.loadUrl(script);
    }

    private class JsListener extends JsBridge.JsHandler {

        @SuppressWarnings("unused")
        public void onComplete(final String result) {
            mHandler.obtainMessage(MSG_COMPLETE, result).sendToTarget();
            SLog.e(TAG,"JsListener onComplete" + result);
            dismiss();
        }

        @SuppressWarnings("unused")
        public void onCancel(String msg) {
            mHandler.obtainMessage(MSG_CANCEL, msg).sendToTarget();
            dismiss();
        }

        @SuppressWarnings("unused")
        public void showMsg(String msg) {
            mHandler.obtainMessage(MSG_SHOW_TIPS, msg).sendToTarget();
        }

        // @SuppressWarnings("unused")
        // public void showProcess(String msg) {
        // mHandler.obtainMessage(MSG_SHOW_PROCESS, msg).sendToTarget();
        // }

        @SuppressWarnings("unused")
        public void onLoad(String msg) {
            mHandler.obtainMessage(MSG_ON_LOAD, msg).sendToTarget();
        }
    }

    private class FbWebViewClient extends WebViewClient {

        @Override
        public boolean shouldOverrideUrlLoading(WebView view, String url) {
        	SLog.v(TAG, "Redirect URL: " + url);
            if (url.startsWith(ServerSetting.getInstance().getEnvUrl(mWeakContext.get(),
                    ServerSetting.DEFAULT_REDIRECT_URI))) {
                mListener.onComplete(Util.parseUrlToJson(url));
                dismiss();
                return true;
            } else if (url.startsWith(Constants.CANCEL_URI)) {
                mListener.onCancel();
                dismiss();
                return true;
            } else if (url.startsWith(Constants.CLOSE_URI)) {
                // 关闭webview
                dismiss();
                return true;
            }
            return false;
        }

        @Override
        public void onReceivedError(WebView view, int errorCode,
                String description, String failingUrl) {
            super.onReceivedError(view, errorCode, description, failingUrl);
            mListener.onError(new UiError(errorCode, description, failingUrl));
            // if (sWeakProcessDialog != null && sWeakProcessDialog.get() !=
            // null) {
            // sWeakProcessDialog.get().dismiss();
            // }
            if (mWeakContext != null && mWeakContext.get() != null) {
                Toast.makeText(mWeakContext.get(), "网络连接异常或系统错误",
                        Toast.LENGTH_SHORT).show();
            }
            dismiss();
        }

        @Override
        public void onPageStarted(WebView view, String url, Bitmap favicon) {
        	SLog.v(TAG, "Webview loading URL: " + url);
            super.onPageStarted(view, url, favicon);
            // if (sWeakProcessBar != null && sWeakProcessBar.get() != null) {
            // sWeakProcessBar.get().setVisibility(View.VISIBLE);
            // }
            // sProgress.setVisibility(View.VISIBLE);
        }

        @Override
        public void onPageFinished(WebView view, String url) {
            super.onPageFinished(view, url);
            // if (sWeakProcessBar != null && sWeakProcessBar.get() != null) {
            // sWeakProcessBar.get().setVisibility(View.GONE);
            // }
            // sProgress.setVisibility(View.GONE);
            mWebView.setVisibility(View.VISIBLE);
        }

        // FIXME SslError will occur when using fiddler and customized
        // hosts. remove this when release.
        /*@TargetApi(8)
        @Override
        public void onReceivedSslError(WebView view, SslErrorHandler handler,
                SslError error) {
            handler.proceed();
        }*/

    }

    static Toast sToast = null;

    private static void showTips(Context context, String response) {
        try {
            // tips时间控制，0短1长
            JSONObject tips = Util.parseJson(response);
            int type = tips.getInt("type");
            // 弹出的tips内容
            String tipsMsg = tips.getString("msg");

            if (type == Toast.LENGTH_SHORT) {
                if (sToast == null) {
                    sToast = Toast.makeText(context, tipsMsg,
                            Toast.LENGTH_SHORT);
                } else {
                    sToast.setView(sToast.getView());
                    sToast.setText(tipsMsg);
                    sToast.setDuration(Toast.LENGTH_SHORT);
                }
                sToast.show();
            } else if (type == Toast.LENGTH_LONG) {
                if (sToast == null) {
                    sToast = Toast
                            .makeText(context, tipsMsg, Toast.LENGTH_LONG);
                } else {
                    sToast.setView(sToast.getView());
                    sToast.setText(tipsMsg);
                    sToast.setDuration(Toast.LENGTH_LONG);
                }
                sToast.show();
            }
        } catch (JSONException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    private static void showProcessDialog(Context context, String response) {
        try {
            if (context == null || response == null) {
                return;
            }
            JSONObject tips = Util.parseJson(response);
            int needShow = tips.getInt("action");
            String processMsg = tips.getString("msg");
            if (needShow == 1) {
                // if (sWeakProcessDialog == null) {
                // ProgressDialog pdProcess = new ProgressDialog(context);
                // pdProcess.setMessage(processMsg);
                // sWeakProcessDialog = new WeakReference<ProgressDialog>(
                // pdProcess);
                // pdProcess.show();
                // } else {
                // sWeakProcessDialog.get().setMessage(processMsg);
                // if (!sWeakProcessDialog.get().isShowing()) {
                // sWeakProcessDialog.get().show();
                // }
                // }
                // } else if (needShow == 0) {
                // if (sWeakProcessDialog == null) {
                // return;
                // } else {
                // if (sWeakProcessDialog.get() != null
                // && sWeakProcessDialog.get().isShowing()) {
                // sWeakProcessDialog.get().dismiss();
                // sWeakProcessDialog = null;
                // }
                // }
            }
        } catch (JSONException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    private void loadUrlWithBrowser(String pkg, String activity, String url) throws Exception {

        Intent i = new Intent();
        i.setComponent(new ComponentName(pkg, activity));
        i.setAction(Intent.ACTION_VIEW);
        i.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);
        i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        // SLog.v(TAG, url);
        i.setData(Uri.parse(url));

        if (mWeakContext != null && mWeakContext.get() != null) {
            mWeakContext.get().startActivity(i);
        }

    }

    private class THandler extends Handler {

        private OnTimeListener mL;

        public THandler(OnTimeListener l, Looper mainLooper) {
            super(mainLooper);
            mL = l;
        }

        @Override
        public void handleMessage(Message msg) {
        	SLog.d(TAG,"msg = "+msg.what);
            switch (msg.what) {
                case MSG_COMPLETE:
                    mL.onComplete((String) msg.obj);
                    break;

                case MSG_CANCEL:
                    mL.onCancel();
                    break;

                case MSG_SHOW_TIPS:
                    // add by milesxia 2012-11-09
                    // js网页调用此函数在终端上弹出tips
                    if (mWeakContext != null && mWeakContext.get() != null) {
                        showTips(mWeakContext.get(), (String) msg.obj);
                    }
                    break;

                case MSG_ON_LOAD:
                    // if (sWeakProcessBar != null && sWeakProcessBar.get() !=
                    // null) {
                    // sWeakProcessBar.get().setVisibility(View.GONE);
                    // }
                    break;
                case MSG_SHOW_PROCESS:
                    if (mWeakContext != null && mWeakContext.get() != null) {
                        showProcessDialog(mWeakContext.get(), (String) msg.obj);
                    }
                    break;

                default:
                    break;
            }
        }
    };

    private static class OnTimeListener implements IUiListener {

        private WeakReference<Context> mWeakCtx;
        private String mAction;
        String mUrl;
        String mAppid;
        private IUiListener mWeakL;

        public OnTimeListener(Context ctx, String action, String url, String appid, IUiListener l) {
            mWeakCtx = new WeakReference<Context>(ctx);
            mAction = action;
            mUrl = url;
            mAppid = appid;
            mWeakL = l;
        }

        private void onComplete(String result) {
            try {
                JSONObject obj = Util.parseJson(result);
                onComplete(obj);
            } catch (JSONException e) {
                e.printStackTrace();
                onError(new UiError(Constants.ERROR_JSON,
                        Constants.MSG_JSON_ERROR, result));
            }
        }

        @Override
        public void onComplete(Object obj) {
        	JSONObject response = (JSONObject)obj;
            ReportManager.getInstance().reportCgi(mAction + "_H5", SystemClock.elapsedRealtime(), 0, 0,
                    response.optInt("ret", -6), mUrl, false);
            if (mWeakL != null) {
                mWeakL.onComplete(response);
                mWeakL = null;
            }
        }

        @Override
        public void onError(UiError e) {
            String detail = e.errorMessage != null ? e.errorMessage + mUrl : mUrl;
            ReportManager.getInstance().reportCgi(mAction + "_H5", SystemClock.elapsedRealtime(), 0, 0, e.errorCode,
                    detail, false);
            if (mWeakL != null) {
                mWeakL.onError(e);
                mWeakL = null;
            }
        }

        @Override
        public void onCancel() {
            if (mWeakL != null) {
                mWeakL.onCancel();
                mWeakL = null;
            }
        }

    }

    @Override
    public void onKeyboardShown(int remainHeight) {
        // TODO Auto-generated method stub
        // callJs("window.console.log", "true");
        // callJs("brag.onKeyboardChanged", "true");
        // modify by miles 2013-02-19 横屏弹出键盘情况下才缩小webview大小
        if (mWeakContext != null && mWeakContext.get() != null) {
            if (remainHeight < mWebviewHeight
                    && Configuration.ORIENTATION_LANDSCAPE == mWeakContext.get().getResources()
                            .getConfiguration().orientation) {
                mWebView.getLayoutParams().height = remainHeight;
            } else {
                mWebView.getLayoutParams().height = mWebviewHeight;
            }
        }
        SLog.e(TAG, "onKeyboardShown keyboard show");
    }

    @Override
    public void onKeyboardHidden() {
        // TODO Auto-generated method stub
        // callJs("window.console.log", "false");
        // callJs("brag.onKeyboardChanged", "false");
        mWebView.getLayoutParams().height = mWebviewHeight;
        SLog.e(TAG, "onKeyboardHidden keyboard hide");
    }

	@Override
	protected void onConsoleMessage(String msg) {
		SLog.d(TAG,"--onConsoleMessage--");
		try{
		    jsBridge.canHandleUrl(mWebView,msg);
		}catch(Exception e){

		}
	}

}
