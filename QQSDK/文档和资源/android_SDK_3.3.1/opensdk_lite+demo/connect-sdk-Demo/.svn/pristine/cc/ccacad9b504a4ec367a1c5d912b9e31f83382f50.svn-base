/**
 * Name : FileTracerConfig.java <br>
 * Copyright : Copyright (c) Tencent Inc. All rights reserved.<br>
 * Description : The Configurations of FileTracer <br>
 */
package com.tencent.open.log;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import android.os.Process;

/**
 * 文件日志追踪器配置类<br>
 * <p>
 * 通过提供{@link FileTracerConfig}对象，可以为{@link FileTracer}实例设置如下选项：<br>
 * <br>
 *
 * <pre>
 * 工作路径: 设置日志保存的路径，日志文件根据日期保存在该路径的/yyyy-MM-dd/文件夹下，以"1.xxx", "2.xxx"命名<br>
 * 日志文件扩展名: 用于方便将不同文件日志追踪器实例生成个的日志文件保存在同一个目录下，格式为".xxx"<br>
 * 线程名称: I/O操作的线程名称<br>
 * 线程优先级: I/O操作线程的优先级<br>
 * I/O操作时间阈值: 每隔多长时间进行一次I/O操作<br>
 * I/O操作数据量阈值: 每当数据量超过多少时，进行一次I/O操作<br>
 * 日志文件分片数量: 每天的日志文件最多有多少个分片，超过该值将自动删除最旧的分片<br>
 * 日志文件分片大小: 每个日志分片最大的尺寸，超过该值后将创建并使用新的分片<br>
 * 日志保存期限: 最长保存日志的时间，若超过该期限，则在{@code FileTracerConfig.cleanWorkRoot()}删除它们<br>
 * </pre>
 *
 * </p>
 *
 * @author lewistian
 *
 */
public class FileTracerConfig
{
    /**
     * 日志分片数量，分片大小：不限制数量
     *
     * @see setMaxBlockSize(), setMaxBlockCount()
     */
    public static final int NO_LIMITED = Integer.MAX_VALUE;

    /**
     * 日志保存期限：永久
     *
     * <br>
     * <br>
     * <i>永远有多远？大概 2^63 - 1 ms 那么远</i>
     */
    public static final long FOREVER = Long.MAX_VALUE;

    /**
     * I/O操作线程优先级：后台线程，即{@code android.os.Process.THREAD_PRIORITY_BACKGROUND}
     */
    public static final int PRIORITY_BACKGROUND = Process.THREAD_PRIORITY_BACKGROUND;
    /**
     * I/O操作线程优先级：默认，即{@code android.os.Process.THREAD_PRIORITY_DEFAULT}
     */
    public static final int PRIORITY_STANDARD = Process.THREAD_PRIORITY_DEFAULT;

    /**
     * 默认I/O操作字符缓冲大小
     */
    public static final int DEF_BUFFER_SIZE = 4 * 1024;

    /**
     * 默认日志文件扩展名
     */
    public static final String DEF_TRACE_FILEEXT = ".log";

    /**
     * 默认日志文件夹日期格式
     */
    public static final String DEF_FOLDER_FORMAT = "yy.MM.dd.HH";

    /**
     * 默认I/O操作线程名称
     */
    public static final String DEF_THREAD_NAME = "Tracer.File";

    /**
     * 默认I/O操作时间阈值
     */
    public static final long DEF_FLUSH_INTERVAL = 10 * 1000L;

    private static SimpleDateFormat DEF_FOLDER_FORMATTER = LogUtils.StrUtils.createDataFormat(DEF_FOLDER_FORMAT);

    public static long getTimeFromFolder(File folder)
    {
        try
        {
            return DEF_FOLDER_FORMATTER.parse(folder.getName()).getTime();
        }
        catch (Exception e)
        {
            return -1L;
        }
    }

    private String name = DEF_THREAD_NAME;
    private int maxBlockSize = NO_LIMITED;
    private int maxBlockCount = NO_LIMITED;
    private int maxBufferSize = DEF_BUFFER_SIZE;
    private long flushInterval = DEF_FLUSH_INTERVAL;
    private File rootFolder;
    private int priority = PRIORITY_BACKGROUND;
    private String fileExt = DEF_TRACE_FILEEXT;
    private long keepPeriod = FOREVER;

    /**
     * 创建一个默认的文件日志追踪器配置: 不进行分片，线程名称"Tracer.File"，后台级现成，时间阈值
     * 10,000ms，数据量阈值4096个字符，日志文件扩展名为".log"，日志文件永久保存
     *
     * @param root
     *            工作路径
     */
    public FileTracerConfig(File root)
    {
        this(root, NO_LIMITED, NO_LIMITED, DEF_BUFFER_SIZE, DEF_THREAD_NAME, DEF_FLUSH_INTERVAL, PRIORITY_BACKGROUND,
                DEF_TRACE_FILEEXT, FOREVER);
    }

    /**
     * 创建一个文件日志追踪器配置
     *
     * @param root
     *            工作路径
     * @param blockCount
     *            分片最大数量，单位: 个
     * @param blockSize
     *            分片最大尺寸，单位: byte
     * @param bufferSize
     *            I/O操作的数据量阈值，单位: 字符
     * @param threadName
     *            I/O操作线程名称
     * @param interval
     *            I/O操作的时间阈值
     * @param priority
     *            I/O操作线程优先级
     * @param fileExt
     *            日志文件扩展名，形如".xxx"
     * @param keepPeriod
     *            日志文件保存期限
     */
    public FileTracerConfig(File root, int blockCount, int blockSize, int bufferSize, String threadName, long interval,
            int priority, String fileExt, long keepPeriod)
    {
        setRootFolder(root);
        setMaxBlockCount(blockCount);
        setMaxBlockSize(blockSize);
        setMaxBufferSize(bufferSize);
        setName(threadName);
        setFlushInterval(interval);
        setPriority(priority);
        setFileExt(fileExt);
        setKeepPeriod(keepPeriod);
    }

    /**
     * 获得当前应该输出的日志文件
     *
     * @return 日志文件路径
     */
    public File getCurrFile()
    {
        return getWorkFile(System.currentTimeMillis());
    }
    
    /**
     * 获得指定时间的最新日志分片，并检查分片状况
     *
     * @param time
     *            时间
     * @return 该时间的最新日志分片
     */
    private File getWorkFile(long time)
    {
        File folder = getWorkFolder();
        String nowUsedFile = "";
        nowUsedFile = getLogFileName(getThisHour(time));
		try {
			folder = new File(folder,nowUsedFile);
		} catch (Throwable e) {
			e.printStackTrace();
		}
        
        return folder;
    }

    /**
     * 按照格式获取当前时间
     * @param nowCurrentMillis
     * @return
     */
    private String getThisHour(long nowCurrentMillis) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeInMillis(nowCurrentMillis);
		java.text.SimpleDateFormat logFileFormatter = new SimpleDateFormat("yy.MM.dd.HH");
		String thisHourLogName = logFileFormatter.format(calendar.getTime());
		return thisHourLogName;
	}
    
    /**
     * 按照目前格式，返回日志文件名称
     * @param hourTime
     * @return
     */
    private String getLogFileName(String hourTime) {
		return "com.tencent.mobileqq_connectSdk" + "." + hourTime + ".log";
	}
    
    /**
     * 获得指定时间的日志目录，如果不存在则创建该目录
     *
     * @param time
     *            时间
     * @return 指定时间的日志目录
     */
    public File getWorkFolder()
    {
//        File workFolder = new File(getRootFolder(), DEF_FOLDER_FORMATTER.format(time));
        File workFolder = getRootFolder();
        workFolder.mkdirs();

        return workFolder;
    }

    /**
     * 获取I/O操作的线程名称
     *
     * @return 线程名称
     */
    public String getName()
    {
        return name;
    }

    /**
     * 设置I/O操作的线程名称
     *
     * @param name
     *            线程名称
     */
    public void setName(String name)
    {
        this.name = name;
    }

    /**
     * 获取日志文件分片最大尺寸
     *
     * @return 单位: byte
     */
    public int getMaxBlockSize()
    {
        return maxBlockSize;
    }

    /**
     * 设置日志文件分片最大尺寸
     *
     * @param maxBlockSize
     *            单位: byte
     */
    public void setMaxBlockSize(int maxBlockSize)
    {
        this.maxBlockSize = maxBlockSize;
    }

    /**
     * 获取每天日志文件分片的最大数量
     *
     * @return 单位: 个
     */
    public int getMaxBlockCount()
    {
        return maxBlockCount;
    }

    /**
     * 设置每天日志文件分片的最大数量
     *
     * @param maxBlockCount
     *            单位: 个
     */
    public void setMaxBlockCount(int maxBlockCount)
    {
        this.maxBlockCount = maxBlockCount;
    }

    public int getMaxBufferSize()
    {
        return maxBufferSize;
    }

    /**
     * 设置I/O操作的数据量阈值
     *
     * @param maxBufferSize
     *            单位: 字符
     */
    public void setMaxBufferSize(int maxBufferSize)
    {
        this.maxBufferSize = maxBufferSize;
    }

    /**
     * I/O操作的数据量阈值
     *
     * @return 单位: ms
     */
    public long getFlushInterval()
    {
        return flushInterval;
    }

    /**
     * 设置I/O操作的时间阈值
     *
     * @param flushInterval
     *            单位: ms
     */
    public void setFlushInterval(long flushInterval)
    {
        this.flushInterval = flushInterval;
    }

    /**
     * 获取工作目录
     *
     * @return
     */
    public File getRootFolder()
    {
        return rootFolder;
    }

    /**
     * 设置工作目录
     *
     * @param rootFolder
     *            工作目录
     */
    public void setRootFolder(File rootFolder)
    {
        this.rootFolder = rootFolder;
    }

    /**
     * 获取I/O操作线程的优先级
     *
     * @return
     */
    public int getPriority()
    {
        return priority;
    }

    /**
     * 设置I/O操作线程的优先级
     *
     * @param priority
     *            优先级
     */
    public void setPriority(int priority)
    {
        this.priority = priority;
    }

    /**
     * 获取日志文件的扩展名
     *
     * @return
     */
    public String getFileExt()
    {
        return fileExt;
    }

    /**
     * 设置日志文件的扩展名
     *
     * @param fileExt
     *            形如 ".xxx"
     */
    public void setFileExt(String fileExt)
    {
        this.fileExt = fileExt;
    }

    /**
     * 获得日志文件保存期限
     *
     * @return 保存期限
     */
    public long getKeepPeriod()
    {
        return keepPeriod;
    }

    /**
     * 设置日志文件保存期限
     *
     * @param keepPeriod
     */
    public void setKeepPeriod(long keepPeriod)
    {
        this.keepPeriod = keepPeriod;
    }
}
