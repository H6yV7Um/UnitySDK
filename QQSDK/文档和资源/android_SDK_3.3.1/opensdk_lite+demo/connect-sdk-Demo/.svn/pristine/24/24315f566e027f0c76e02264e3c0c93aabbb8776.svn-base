
package com.tencent.connect.avatar;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.view.View;

public class MaskView extends View {
    private Rect maskRect;
    private Paint paint;

    public MaskView(Context context) {
        super(context);
        init();
    }

    /**
     * @param context
     * @param attrs
     */
    public MaskView(Context context, AttributeSet attrs) {
        super(context, attrs);
        init();
    }

    private void init() {
        // maskRect = new Rect();
        paint = new Paint();
        // paint.setColor(Color.WHITE);
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);

        Rect maskRect = getMaskRect();
        int width = this.getMeasuredWidth();
        int height = this.getMeasuredHeight();
//        SLog.d(TAG, "width:" + maskRect.left);
//        SLog.d(TAG, "height:" + maskRect.top);
        paint.setStyle(Paint.Style.FILL);
        // canvas.clipRect(0, 0, width, height);
        // canvas.clipRect(maskRect, Region.Op.DIFFERENCE);
        // 其他地方半透明
        paint.setColor(Color.argb(100, 0, 0, 0));
        canvas.drawRect(0, 0, width, maskRect.top, paint);
        canvas.drawRect(0, maskRect.bottom, width, height, paint);
        canvas.drawRect(0, maskRect.top, maskRect.left, maskRect.bottom, paint);
        canvas.drawRect(maskRect.right, maskRect.top, width, maskRect.bottom, paint);
        canvas.drawColor(Color.argb(100, 0, 0, 0));
        // 四周的白色边框,用整个白色的正方形套上去模拟
        // canvas.drawRect(maskRect.left - 1, maskRect.top - 1, maskRect.right +
        // 1 , maskRect.bottom + 1, paint);
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(Color.WHITE);
        // paint.setColor(Color.TRANSPARENT);
        // canvas.drawColor(Color.TRANSPARENT,Mode.CLEAR);
        canvas.drawRect(maskRect.left, maskRect.top, maskRect.right - 1, maskRect.bottom, paint);

        // canvas.drawRect(maskRect, paint);

    }

    /**
     * 获取遮罩的镂空区域
     * 
     * @return
     */
    public Rect getMaskRect() {
        if (maskRect == null) {
            maskRect = new Rect();
            int length = 0;
            int width = this.getMeasuredWidth();
            int height = this.getMeasuredHeight();
            int availableHeight = height - AvatarConstants.TOOLBAR_HEIGHT
                    - AvatarConstants.TOPBAR_HEIGHT;
            // 取宽高中的, 不大于MAX_MASK_LENGTH的最小值
            length = Math.min(availableHeight, width);
            length = Math.min(length, AvatarConstants.MAX_MASK_SIZE);

            // 目前是显示个正方形
            int maskWidth = length;
            int maskHeight = length;
            // 计算镂空矩形的位置
            int maskLeft = (width - maskWidth) / 2;
            // 确保矩形框不会遮盖topbar和toolbar
            int maskTop = /* AvatarConstants.TOPBAR_HEIGHT + */(height - maskHeight) / 2;
            int maskRight = maskLeft + maskWidth;
            int maskBottom = maskTop + maskHeight;
            // SLog.i(TAG, "width: " + width + ", height: " + height
            // + ", availableHeight:" + availableHeight
            // + ", maskTop: " + maskTop);
            maskRect.set(maskLeft, maskTop, maskRight, maskBottom);
        }
        return maskRect;
    }

}
