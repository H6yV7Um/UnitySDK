<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_12) on Tue Feb 26 11:23:28 CST 2013 -->
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<TITLE>
Tencent
</TITLE>

<META NAME="date" CONTENT="2013-02-26">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="Tencent";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="跳过导航链接"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>概述</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>软件包</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>类</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/Tencent.html"><FONT CLASS="NavBarFont1"><B>使用</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>树</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>已过时</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>索引</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>帮助</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口"><B>上一个类</B></A>&nbsp;
&nbsp;<A HREF="../../../com/tencent/tauth/UiError.html" title="com.tencent.tauth 中的类"><B>下一个类</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?com/tencent/tauth/Tencent.html" target="_top"><B>框架</B></A>  &nbsp;
&nbsp;<A HREF="Tencent.html" target="_top"><B>无框架</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>所有类</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>所有类</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  摘要：&nbsp;嵌套&nbsp;|&nbsp;字段&nbsp;|&nbsp;构造方法&nbsp;|&nbsp;<A HREF="#method_summary">方法</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
详细信息：&nbsp;字段&nbsp;|&nbsp;构造方法&nbsp;|&nbsp;<A HREF="#method_detail">方法</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
com.tencent.tauth</FONT>
<BR>
类 Tencent</H2>
<PRE>
<A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/Object.html?is-external=true" title="java.lang 中的类或接口">java.lang.Object</A>
  <IMG SRC="../../../resources/inherit.gif" ALT="继承者 "><B>com.tencent.tauth.Tencent</B>
</PRE>
<HR>
<DL>
<DT><PRE>public class <B>Tencent</B><DT>extends <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/Object.html?is-external=true" title="java.lang 中的类或接口">Object</A></DL>
</PRE>

<P>
SDK的主要实现类，提供访问腾讯开放API的功能
<P>

<P>
<HR>

<P>

<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>方法摘要</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#ask(Activity, Bundle, com.tencent.tauth.IUiListener)">ask</A></B>(Activity&nbsp;activity,
    Bundle&nbsp;params,
    <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发送请求<br>
 <br>
 启动发送界面，应用可以预定义一些信息，在用户编辑确认后，发送到QQ各平台<br>
 <br>
 当安装腾讯其他应用时，SDK会优先启用腾讯应用中的特定Activity，通过此Activity完成发送请求的功能。</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#brag(Activity, Bundle, com.tencent.tauth.IUiListener)">brag</A></B>(Activity&nbsp;activity,
     Bundle&nbsp;params,
     <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;向好友炫耀<br>
 <br>
 启动发送界面，应用可以预定义一些信息，在用户编辑确认后，发送到QQ各平台<br>
 <br>
 当安装腾讯其他应用时，SDK会优先启用腾讯应用中的特定Activity，通过此Activity完成发送炫耀的功能。</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#challenge(Activity, Bundle, com.tencent.tauth.IUiListener)">challenge</A></B>(Activity&nbsp;activity,
          Bundle&nbsp;params,
          <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发送挑战<br>
 <br>
 启动发送界面，应用可以预定义一些信息，在用户编辑确认后，发送到QQ各平台<br>
 <br>
 当安装腾讯其他应用时，SDK会优先启用腾讯应用中的特定Activity，通过此Activity完成发送挑战的功能。</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;<A HREF="../../../com/tencent/tauth/Tencent.html" title="com.tencent.tauth 中的类">Tencent</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#createInstance(java.lang.String, Context)">createInstance</A></B>(<A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;appId,
               Context&nbsp;ctx)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建Tencent实例 <br>
 调用该方法时, 须确保AndroidManifest.xml中添加了<A HREF="../../../com/tencent/tauth/AuthActivity.html" title="com.tencent.tauth 中的类"><CODE>AuthActivity</CODE></A>的配置, 否则将输错错误日志,
 并返回null</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#getAccessToken()">getAccessToken</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;获取OAuth2.0授权的access_token<br>
 <br>
 SDK会在调用<A HREF="../../../com/tencent/tauth/Tencent.html#login(Activity, java.lang.String, com.tencent.tauth.IUiListener)"><CODE>login(Activity, String, IUiListener)</CODE></A>
 后自动记录access_token,expires_in和openId</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#getAppFriends(com.tencent.tauth.IRequestListener)">getAppFriends</A></B>(<A HREF="../../../com/tencent/tauth/IRequestListener.html" title="com.tencent.tauth 中的接口">IRequestListener</A>&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;获取应用内好友信息<br>
 <br></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#getAppId()">getAppId</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回应用ID。</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#getOpenId()">getOpenId</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;获取已登录用户的openId。</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#getSDKVersion()">getSDKVersion</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;获取SDK的版本号</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#gift(Activity, Bundle, com.tencent.tauth.IUiListener)">gift</A></B>(Activity&nbsp;activity,
     Bundle&nbsp;params,
     <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;赠送礼物<br>
 <br>
 启动发送界面，应用可以预定义一些信息，在用户编辑确认后，发送到QQ各平台<br>
 <br>
 当安装腾讯其他应用时，SDK会优先启用腾讯应用中的特定Activity，通过此Activity完成赠送礼物的功能。</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#invite(Activity, Bundle, com.tencent.tauth.IUiListener)">invite</A></B>(Activity&nbsp;activity,
       Bundle&nbsp;params,
       <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发送应用邀请<br>
 <br>
 启动邀请界面，弹出SDK中openId的QQ好友列表，由用户选择目标好友，确认后向其发送安装本应用的邀请。</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#isSessionValid()">isSessionValid</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;判断 access_token 是否有效</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#login(Activity, java.lang.String, com.tencent.tauth.IUiListener)">login</A></B>(Activity&nbsp;activity,
      <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;scope,
      <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登录<br>
 <br>
 启动一个交互界面，完成用户登录和授权的交互流程，通过回调返回授权的access_token,expirs_in和openId。</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#logout(Context)">logout</A></B>(Context&nbsp;ctx)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登出<br>
 <br>
 清除WebView的登录态，清除SDK中保存的access_token、expires_in和openId</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#onActivityResult(int, int, Intent)">onActivityResult</A></B>(int&nbsp;requestCode,
                 int&nbsp;resultCode,
                 Intent&nbsp;data)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;获取执行腾讯Activity（如：story打开的Activity）的结果的回调接口。</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#pay(Activity, com.tencent.tauth.IUiListener)">pay</A></B>(Activity&nbsp;activity,
    <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;请求支付<br>
 <br>
 在调用支付SDK时，需要先调用此函数获取新的access_token（30分钟之内可用于支付）。</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#reAuth(Activity, java.lang.String, com.tencent.tauth.IUiListener)">reAuth</A></B>(Activity&nbsp;activity,
       <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;scope,
       <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;增量授权，重新走一遍授权流程<br>
 <br>
 启动一个交互界面，完成用户增量授权的交互流程，通过回调返回授权的access_token,expirs_in和openId。</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;JSONObject</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#request(java.lang.String, Bundle, java.lang.String)">request</A></B>(<A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;graphPath,
        Bundle&nbsp;params,
        <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;httpMethod)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发送同步请求调用腾讯开放API<br>
 <br>
 <b>注意，网络同步调用，请勿在主线程使用</b></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#requestAsync(java.lang.String, Bundle, java.lang.String, com.tencent.tauth.IRequestListener, java.lang.Object)">requestAsync</A></B>(<A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;graphPath,
             Bundle&nbsp;params,
             <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;httpMethod,
             <A HREF="../../../com/tencent/tauth/IRequestListener.html" title="com.tencent.tauth 中的接口">IRequestListener</A>&nbsp;listener,
             <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/Object.html?is-external=true" title="java.lang 中的类或接口">Object</A>&nbsp;state)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发送异步调用请求访问腾讯开放API<br>
 <br>
 <b>注意<br>
 本函数为异步调用，可以在主线程中使用。</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#setAccessToken(java.lang.String, java.lang.String)">setAccessToken</A></B>(<A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;token,
               <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;expiresIn)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从外部设置access_token、expires_in。</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#setAvatar(Activity, Bundle)">setAvatar</A></B>(Activity&nbsp;activity,
          Bundle&nbsp;params)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>已过时。</B>&nbsp;<I>该方法已经废弃，将会在将来某个版本中删除，请换成
             <A HREF="../../../com/tencent/tauth/Tencent.html#setAvatar(Activity, Bundle, com.tencent.tauth.IUiListener)"><CODE>setAvatar(Activity, Bundle, IUiListener)</CODE></A>。</I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#setAvatar(Activity, Bundle, com.tencent.tauth.IUiListener)">setAvatar</A></B>(Activity&nbsp;activity,
          Bundle&nbsp;params,
          <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设置用户的QQ头像，传入图片的路径(picture)，会打开一个调整图片的编辑器，用户确认之后把所选区域设置为头像 <br>
 <br>
 <b>注意，如果需要设置QQ头像的返回结果，应用需要在调用setAvatar的activity中实现onActivityResult，<br>
 并回调 <A HREF="../../../com/tencent/tauth/Tencent.html#onActivityResult(int, int, Intent)"><CODE>onActivityResult(int, int, Intent)</CODE></A> 才能收到调用结果。</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#setAvatar(Activity, Bundle, com.tencent.tauth.IUiListener, int, int)">setAvatar</A></B>(Activity&nbsp;activity,
          Bundle&nbsp;params,
          <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener,
          int&nbsp;enterAnim,
          int&nbsp;exitAnim)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设置用户的QQ头像，传入图片的路径(picture)，会打开一个调整图片的编辑器，用户确认之后把所选区域设置为头像 <br>
 <br>
 <b>注意，如果需要设置QQ头像的返回结果，应用需要在调用setAvatar的activity中实现onActivityResult，<br>
 并回调 <A HREF="../../../com/tencent/tauth/Tencent.html#onActivityResult(int, int, Intent)"><CODE>onActivityResult(int, int, Intent)</CODE></A> 才能收到调用结果。</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#setOpenId(java.lang.String)">setOpenId</A></B>(<A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;openId)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从外部设置openId。</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#shareToQQ(Activity, Bundle, com.tencent.tauth.IUiListener)">shareToQQ</A></B>(Activity&nbsp;activity,
          Bundle&nbsp;params,
          <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;分享消息或图片到QQ聊天窗口<br>
 <br>
 调用该方法后，会打开一个联系人/群/讨论组选择界面，用户选择要分享的目标之后， 分享内容将发送到对应的聊天窗口中<br></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../com/tencent/tauth/Tencent.html#story(Activity, Bundle, com.tencent.tauth.IUiListener)">story</A></B>(Activity&nbsp;activity,
      Bundle&nbsp;params,
      <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;发送故事<br>
 <br>
 启动发送界面，应用可以预定义一些信息，在用户编辑确认后，发送到QQ各平台<br>
 <br>
 当安装腾讯其他应用时，SDK会优先启用腾讯应用中的特定Activity，通过此Activity完成发送故事的功能。</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>从类 java.lang.<A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/Object.html?is-external=true" title="java.lang 中的类或接口">Object</A> 继承的方法</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/Object.html?is-external=true#equals(java.lang.Object)" title="java.lang 中的类或接口">equals</A>, <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/Object.html?is-external=true#getClass()" title="java.lang 中的类或接口">getClass</A>, <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/Object.html?is-external=true#hashCode()" title="java.lang 中的类或接口">hashCode</A>, <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/Object.html?is-external=true#notify()" title="java.lang 中的类或接口">notify</A>, <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/Object.html?is-external=true#notifyAll()" title="java.lang 中的类或接口">notifyAll</A>, <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/Object.html?is-external=true#toString()" title="java.lang 中的类或接口">toString</A>, <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/Object.html?is-external=true#wait()" title="java.lang 中的类或接口">wait</A>, <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/Object.html?is-external=true#wait(long)" title="java.lang 中的类或接口">wait</A>, <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/Object.html?is-external=true#wait(long, int)" title="java.lang 中的类或接口">wait</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>方法详细信息</B></FONT></TH>
</TR>
</TABLE>

<A NAME="createInstance(java.lang.String, Context)"><!-- --></A><H3>
createInstance</H3>
<PRE>
public static <A HREF="../../../com/tencent/tauth/Tencent.html" title="com.tencent.tauth 中的类">Tencent</A> <B>createInstance</B>(<A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;appId,
                                     Context&nbsp;ctx)</PRE>
<DL>
<DD>创建Tencent实例 <br>
 调用该方法时, 须确保AndroidManifest.xml中添加了<A HREF="../../../com/tencent/tauth/AuthActivity.html" title="com.tencent.tauth 中的类"><CODE>AuthActivity</CODE></A>的配置, 否则将输错错误日志,
 并返回null
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>appId</CODE> - <DD><CODE>ctx</CODE> - 程序的上下文, 可简单传入 getApplicationContext()
<DT><B>返回：</B><DD>Tencengt实例, 或者 null</DL>
</DD>
</DL>
<HR>

<A NAME="isSessionValid()"><!-- --></A><H3>
isSessionValid</H3>
<PRE>
public boolean <B>isSessionValid</B>()</PRE>
<DL>
<DD>判断 access_token 是否有效
<P>
<DD><DL>

<DT><B>返回：</B><DD>access_token 有效则返回true, 否则返回false</DL>
</DD>
</DL>
<HR>

<A NAME="getAccessToken()"><!-- --></A><H3>
getAccessToken</H3>
<PRE>
public <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A> <B>getAccessToken</B>()</PRE>
<DL>
<DD>获取OAuth2.0授权的access_token<br>
 <br>
 SDK会在调用<A HREF="../../../com/tencent/tauth/Tencent.html#login(Activity, java.lang.String, com.tencent.tauth.IUiListener)"><CODE>login(Activity, String, IUiListener)</CODE></A>
 后自动记录access_token,expires_in和openId
<P>
<DD><DL>

<DT><B>返回：</B><DD>access_token</DL>
</DD>
</DL>
<HR>

<A NAME="setAccessToken(java.lang.String, java.lang.String)"><!-- --></A><H3>
setAccessToken</H3>
<PRE>
public void <B>setAccessToken</B>(<A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;token,
                           <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;expiresIn)</PRE>
<DL>
<DD>从外部设置access_token、expires_in。<br>
 <br>
 SDK在此不检验此参数的有效性，应用应保证参数为
 <A HREF="../../../com/tencent/tauth/Tencent.html#login(Activity, java.lang.String, com.tencent.tauth.IUiListener)"><CODE>login(Activity, String, IUiListener)</CODE></A> 的返回结果。否则之后的调用可能出错。 <br>
 <br>
 建议按如下方式使用该接口: <li>1. login成功后, 把获取到的 expires_in 跟当前时间相加之后保存, <br>
 如: real_expires_in = System.currentTimeMillis() +
 Long.parseLong(expires_in) * 1000; <li>2. 在需要调用该接口时, 再把real_expires_in
 换算成 expires_in, <br>
 如: expires_in = (real_expires_in - System.currentTimeMillis()) / 1000 +
 ""; <li>3. 之后把保存的 access_token 和计算出来的 expires_in 传给 setAccessToken 即可
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>token</CODE> - <DD><CODE>expiresIn</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="getOpenId()"><!-- --></A><H3>
getOpenId</H3>
<PRE>
public <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A> <B>getOpenId</B>()</PRE>
<DL>
<DD>获取已登录用户的openId。<br>
 <br>
 openId为对当前应用进行授权的QQ用户的身份识别码，应用应将openId与应用中的用户帐号进行关系绑定，以此来支持多帐号。<br>
 <br>
 SDK会在调用<A HREF="../../../com/tencent/tauth/Constants.html#ACTION_LOGIN"><CODE>Constants.ACTION_LOGIN</CODE></A>、 <A HREF="../../../com/tencent/tauth/Constants.html#GRAPH_OPEN_ID"><CODE>Constants.GRAPH_OPEN_ID</CODE></A>
 成功之后自动记录open_id.<br>
<P>
<DD><DL>

<DT><B>返回：</B><DD>openId</DL>
</DD>
</DL>
<HR>

<A NAME="setOpenId(java.lang.String)"><!-- --></A><H3>
setOpenId</H3>
<PRE>
public void <B>setOpenId</B>(<A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;openId)</PRE>
<DL>
<DD>从外部设置openId。<br>
 <br>
 SDK不检验外部传入的参数的有效性，应用应保证此值为<A HREF="../../../com/tencent/tauth/Constants.html#GRAPH_OPEN_ID"><CODE>Constants.GRAPH_OPEN_ID</CODE></A>
 的返回结果，否则之后的调用可能出错。<br>
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>openId</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="getAppId()"><!-- --></A><H3>
getAppId</H3>
<PRE>
public <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A> <B>getAppId</B>()</PRE>
<DL>
<DD>返回应用ID。<br>
 <br>
 即构造时传入的参数。
<P>
<DD><DL>

<DT><B>返回：</B><DD>表示AppId的字符串</DL>
</DD>
</DL>
<HR>

<A NAME="login(Activity, java.lang.String, com.tencent.tauth.IUiListener)"><!-- --></A><H3>
login</H3>
<PRE>
public int <B>login</B>(Activity&nbsp;activity,
                 <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;scope,
                 <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</PRE>
<DL>
<DD>登录<br>
 <br>
 启动一个交互界面，完成用户登录和授权的交互流程，通过回调返回授权的access_token,expirs_in和openId。
 openId为对当前应用进行授权的QQ用户的身份识别码，应用应将openId与应用中的用户帐号进行关系绑定，以此来支持多帐号。<br>
 <br>
 当安装腾讯其他应用时，SDK会优先启用腾讯应用中的特定Activity，通过此Activity完成登录和授权功能。 当没有找到此Activity时
 ，SDK会执行Oauth2.0的User-Agent流程，即显示一个包含WebView的对话框， 通过加载登录授权网页来完成登录和授权的交互流程。<br>
 <br>
 <b>注意，当启动腾讯Activity时，应用需要回调
 <A HREF="../../../com/tencent/tauth/Tencent.html#onActivityResult(int, int, Intent)"><CODE>onActivityResult(int, int, Intent)</CODE></A>才能收到调用结果。</b>
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>activity</CODE> - 调用者Activity。<DD><CODE>scope</CODE> - 应用所需要的所有权限，由“,”分隔<DD><CODE>listener</CODE> - 回调接口
<DT><B>返回：</B><DD><li> <A HREF="../../../com/tencent/tauth/Constants.html#UI_ACTIVITY"><CODE>Constants.UI_ACTIVITY</CODE></A>表示启动了腾讯的Activity来完成交互。</li> <li>
         <A HREF="../../../com/tencent/tauth/Constants.html#UI_DIALOG"><CODE>Constants.UI_DIALOG</CODE></A>表示启动了对话框来完成交互。</li></DL>
</DD>
</DL>
<HR>

<A NAME="reAuth(Activity, java.lang.String, com.tencent.tauth.IUiListener)"><!-- --></A><H3>
reAuth</H3>
<PRE>
public int <B>reAuth</B>(Activity&nbsp;activity,
                  <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;scope,
                  <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</PRE>
<DL>
<DD>增量授权，重新走一遍授权流程<br>
 <br>
 启动一个交互界面，完成用户增量授权的交互流程，通过回调返回授权的access_token,expirs_in和openId。
 openId为对当前应用进行授权的QQ用户的身份识别码，应用应将openId与应用中的用户帐号进行关系绑定，以此来支持多帐号。<br>
 <br>
 当安装腾讯其他应用时，SDK会优先启用腾讯应用中的特定Activity，通过此Activity完成登录和授权功能。 当没有找到此Activity时
 ，SDK会执行Oauth2.0的User-Agent流程，即显示一个包含WebView的对话框， 通过加载登录授权网页来完成登录和授权的交互流程。<br>
 <br>
 <b>注意，当启动腾讯Activity时，应用需要回调
 <A HREF="../../../com/tencent/tauth/Tencent.html#onActivityResult(int, int, Intent)"><CODE>onActivityResult(int, int, Intent)</CODE></A>才能收到调用结果。</b>
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>activity</CODE> - 调用者Activity。<DD><CODE>scope</CODE> - 应用所需要的所有权限，由“,”分隔<DD><CODE>listener</CODE> - 回调接口
<DT><B>返回：</B><DD><li> <A HREF="../../../com/tencent/tauth/Constants.html#UI_ACTIVITY"><CODE>Constants.UI_ACTIVITY</CODE></A>表示启动了腾讯的Activity来完成交互。</li> <li>
         <A HREF="../../../com/tencent/tauth/Constants.html#UI_DIALOG"><CODE>Constants.UI_DIALOG</CODE></A>表示启动了对话框来完成交互。</li></DL>
</DD>
</DL>
<HR>

<A NAME="logout(Context)"><!-- --></A><H3>
logout</H3>
<PRE>
public void <B>logout</B>(Context&nbsp;ctx)</PRE>
<DL>
<DD>登出<br>
 <br>
 清除WebView的登录态，清除SDK中保存的access_token、expires_in和openId
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>ctx</CODE> - 调用者Context</DL>
</DD>
</DL>
<HR>

<A NAME="invite(Activity, Bundle, com.tencent.tauth.IUiListener)"><!-- --></A><H3>
invite</H3>
<PRE>
public int <B>invite</B>(Activity&nbsp;activity,
                  Bundle&nbsp;params,
                  <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</PRE>
<DL>
<DD>发送应用邀请<br>
 <br>
 启动邀请界面，弹出SDK中openId的QQ好友列表，由用户选择目标好友，确认后向其发送安装本应用的邀请。<br>
 <br>
 当安装腾讯其他应用时，SDK会优先启用腾讯应用中的特定Activity，通过此Activity完成发送邀请的功能。 当没有找到此Activity时
 ，SDK会显示一个包含WebView的对话框，通过Web交互来完成功能。<br>
 <br>
 <b>注意，当启动腾讯Activity时，应用需要回调
 <A HREF="../../../com/tencent/tauth/Tencent.html#onActivityResult(int, int, Intent)"><CODE>onActivityResult(int, int, Intent)</CODE></A>才能收到调用结果。</b>
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>activity</CODE> - 调用者Activity。<DD><CODE>params</CODE> - 参看<A HREF="../../../com/tencent/tauth/Constants.html#PARAM_RECEIVER"><CODE>Constants.PARAM_RECEIVER</CODE></A>等<DD><CODE>listener</CODE> - 回调接口
<DT><B>返回：</B><DD><li> <A HREF="../../../com/tencent/tauth/Constants.html#UI_ACTIVITY"><CODE>Constants.UI_ACTIVITY</CODE></A>表示启动了腾讯的Activity来完成交互。</li> <li>
         <A HREF="../../../com/tencent/tauth/Constants.html#UI_DIALOG"><CODE>Constants.UI_DIALOG</CODE></A>表示启动了对话框来完成交互。</li></DL>
</DD>
</DL>
<HR>

<A NAME="story(Activity, Bundle, com.tencent.tauth.IUiListener)"><!-- --></A><H3>
story</H3>
<PRE>
public int <B>story</B>(Activity&nbsp;activity,
                 Bundle&nbsp;params,
                 <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</PRE>
<DL>
<DD>发送故事<br>
 <br>
 启动发送界面，应用可以预定义一些信息，在用户编辑确认后，发送到QQ各平台<br>
 <br>
 当安装腾讯其他应用时，SDK会优先启用腾讯应用中的特定Activity，通过此Activity完成发送故事的功能。 当没有找到此Activity时
 ，SDK会显示一个包含WebView的对话框，通过Web交互来完成功能。<br>
 <br>
 <b>注意，当启动腾讯Activity时，应用需要回调
 <A HREF="../../../com/tencent/tauth/Tencent.html#onActivityResult(int, int, Intent)"><CODE>onActivityResult(int, int, Intent)</CODE></A>才能收到调用结果。</b>
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>activity</CODE> - 调用者Activity。<DD><CODE>params</CODE> - 参看<A HREF="../../../com/tencent/tauth/Constants.html#PARAM_APP_ICON"><CODE>Constants.PARAM_APP_ICON</CODE></A>等<DD><CODE>listener</CODE> - 回调接口
<DT><B>返回：</B><DD><li> <A HREF="../../../com/tencent/tauth/Constants.html#UI_ACTIVITY"><CODE>Constants.UI_ACTIVITY</CODE></A>表示启动了腾讯的Activity来完成交互。</li> <li>
         <A HREF="../../../com/tencent/tauth/Constants.html#UI_DIALOG"><CODE>Constants.UI_DIALOG</CODE></A>表示启动了对话框来完成交互。</li></DL>
</DD>
</DL>
<HR>

<A NAME="ask(Activity, Bundle, com.tencent.tauth.IUiListener)"><!-- --></A><H3>
ask</H3>
<PRE>
public int <B>ask</B>(Activity&nbsp;activity,
               Bundle&nbsp;params,
               <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</PRE>
<DL>
<DD>发送请求<br>
 <br>
 启动发送界面，应用可以预定义一些信息，在用户编辑确认后，发送到QQ各平台<br>
 <br>
 当安装腾讯其他应用时，SDK会优先启用腾讯应用中的特定Activity，通过此Activity完成发送请求的功能。 当没有找到此Activity时
 ，SDK会显示一个包含WebView的对话框，通过Web交互来完成功能。<br>
 <br>
 <b>注意，当启动腾讯Activity时，应用需要回调
 <A HREF="../../../com/tencent/tauth/Tencent.html#onActivityResult(int, int, Intent)"><CODE>onActivityResult(int, int, Intent)</CODE></A>才能收到调用结果。</b>
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>activity</CODE> - 调用者Activity。<DD><CODE>params</CODE> - 参看<A HREF="../../../com/tencent/tauth/Constants.html#PARAM_COMMENT"><CODE>Constants.PARAM_COMMENT</CODE></A>等<DD><CODE>listener</CODE> - 回调接口
<DT><B>返回：</B><DD><li> <A HREF="../../../com/tencent/tauth/Constants.html#UI_ACTIVITY"><CODE>Constants.UI_ACTIVITY</CODE></A>表示启动了腾讯的Activity来完成交互。</li> <li>
         <A HREF="../../../com/tencent/tauth/Constants.html#UI_DIALOG"><CODE>Constants.UI_DIALOG</CODE></A>表示启动了对话框来完成交互。</li></DL>
</DD>
</DL>
<HR>

<A NAME="gift(Activity, Bundle, com.tencent.tauth.IUiListener)"><!-- --></A><H3>
gift</H3>
<PRE>
public int <B>gift</B>(Activity&nbsp;activity,
                Bundle&nbsp;params,
                <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</PRE>
<DL>
<DD>赠送礼物<br>
 <br>
 启动发送界面，应用可以预定义一些信息，在用户编辑确认后，发送到QQ各平台<br>
 <br>
 当安装腾讯其他应用时，SDK会优先启用腾讯应用中的特定Activity，通过此Activity完成赠送礼物的功能。 当没有找到此Activity时
 ，SDK会显示一个包含WebView的对话框，通过Web交互来完成功能。<br>
 <br>
 <b>注意，当启动腾讯Activity时，应用需要回调
 <A HREF="../../../com/tencent/tauth/Tencent.html#onActivityResult(int, int, Intent)"><CODE>onActivityResult(int, int, Intent)</CODE></A>才能收到调用结果。</b>
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>activity</CODE> - 调用者Activity。<DD><CODE>params</CODE> - 参看<A HREF="../../../com/tencent/tauth/Constants.html#PARAM_COMMENT"><CODE>Constants.PARAM_COMMENT</CODE></A>等<DD><CODE>listener</CODE> - 回调接口
<DT><B>返回：</B><DD><li> <A HREF="../../../com/tencent/tauth/Constants.html#UI_ACTIVITY"><CODE>Constants.UI_ACTIVITY</CODE></A>表示启动了腾讯的Activity来完成交互。</li> <li>
         <A HREF="../../../com/tencent/tauth/Constants.html#UI_DIALOG"><CODE>Constants.UI_DIALOG</CODE></A>表示启动了对话框来完成交互。</li></DL>
</DD>
</DL>
<HR>

<A NAME="pay(Activity, com.tencent.tauth.IUiListener)"><!-- --></A><H3>
pay</H3>
<PRE>
public int <B>pay</B>(Activity&nbsp;activity,
               <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</PRE>
<DL>
<DD>请求支付<br>
 <br>
 在调用支付SDK时，需要先调用此函数获取新的access_token（30分钟之内可用于支付）。<br>
 <br>
 SDK会执行一个获取支付token的流程：弹出登录框，让用户确认用以支付的帐号和密码，然后返回新的access_token、
 expires_in和openId。<br>
 <br>
 <b>注意 :</b><li>
 返回的openId等可能与SDK中使用的openId不一致。<b>应用有责任提醒用户购买账号与当前账号的不同</b>。</li> <li>
 当返回的openId与SDK中保存的openId一致时，SDK会自动更新access_token和expires_in。</li> <li>
 当饭回的openId与SDK中保存的openId不一致时，应用可以使用
 <A HREF="../../../com/tencent/tauth/Tencent.html#setAccessToken(java.lang.String, java.lang.String)"><CODE>setAccessToken(String, String)</CODE></A>和 <A HREF="../../../com/tencent/tauth/Tencent.html#setOpenId(java.lang.String)"><CODE>setOpenId(String)</CODE></A>
 来更新SDK中的信息 。
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>activity</CODE> - 调用者Activity。<DD><CODE>listener</CODE> - 回调接口
<DT><B>返回：</B><DD><li> <A HREF="../../../com/tencent/tauth/Constants.html#UI_ACTIVITY"><CODE>Constants.UI_ACTIVITY</CODE></A>表示启动了腾讯的Activity来完成交互。</li> <li>
         <A HREF="../../../com/tencent/tauth/Constants.html#UI_DIALOG"><CODE>Constants.UI_DIALOG</CODE></A>表示启动了对话框来完成交互。</li></DL>
</DD>
</DL>
<HR>

<A NAME="challenge(Activity, Bundle, com.tencent.tauth.IUiListener)"><!-- --></A><H3>
challenge</H3>
<PRE>
public int <B>challenge</B>(Activity&nbsp;activity,
                     Bundle&nbsp;params,
                     <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</PRE>
<DL>
<DD>发送挑战<br>
 <br>
 启动发送界面，应用可以预定义一些信息，在用户编辑确认后，发送到QQ各平台<br>
 <br>
 当安装腾讯其他应用时，SDK会优先启用腾讯应用中的特定Activity，通过此Activity完成发送挑战的功能。 当没有找到此Activity时
 ，SDK会显示一个包含WebView的对话框，通过Web交互来完成功能。<br>
 <br>
 <b>注意，当启动腾讯Activity时，应用需要回调
 <A HREF="../../../com/tencent/tauth/Tencent.html#onActivityResult(int, int, Intent)"><CODE>onActivityResult(int, int, Intent)</CODE></A>才能收到调用结果。</b>
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>activity</CODE> - 调用者Activity。<DD><CODE>params</CODE> - 参看<A HREF="../../../com/tencent/tauth/Constants.html#PARAM_COMMENT"><CODE>Constants.PARAM_COMMENT</CODE></A>等<DD><CODE>listener</CODE> - 回调接口
<DT><B>返回：</B><DD><li> <A HREF="../../../com/tencent/tauth/Constants.html#UI_ACTIVITY"><CODE>Constants.UI_ACTIVITY</CODE></A>表示启动了腾讯的Activity来完成交互。</li> <li>
         <A HREF="../../../com/tencent/tauth/Constants.html#UI_DIALOG"><CODE>Constants.UI_DIALOG</CODE></A>表示启动了对话框来完成交互。</li></DL>
</DD>
</DL>
<HR>

<A NAME="brag(Activity, Bundle, com.tencent.tauth.IUiListener)"><!-- --></A><H3>
brag</H3>
<PRE>
public int <B>brag</B>(Activity&nbsp;activity,
                Bundle&nbsp;params,
                <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</PRE>
<DL>
<DD>向好友炫耀<br>
 <br>
 启动发送界面，应用可以预定义一些信息，在用户编辑确认后，发送到QQ各平台<br>
 <br>
 当安装腾讯其他应用时，SDK会优先启用腾讯应用中的特定Activity，通过此Activity完成发送炫耀的功能。 当没有找到此Activity时
 ，SDK会显示一个包含WebView的对话框，通过Web交互来完成功能。<br>
 <br>
 <b>注意，当启动腾讯Activity时，应用需要回调
 <A HREF="../../../com/tencent/tauth/Tencent.html#onActivityResult(int, int, Intent)"><CODE>onActivityResult(int, int, Intent)</CODE></A>才能收到调用结果。</b>
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>activity</CODE> - 调用者Activity。<DD><CODE>params</CODE> - 参看<A HREF="../../../com/tencent/tauth/Constants.html#PARAM_COMMENT"><CODE>Constants.PARAM_COMMENT</CODE></A>等<DD><CODE>listener</CODE> - 回调接口
<DT><B>返回：</B><DD><li> <A HREF="../../../com/tencent/tauth/Constants.html#UI_ACTIVITY"><CODE>Constants.UI_ACTIVITY</CODE></A>表示启动了腾讯的Activity来完成交互。</li> <li>
         <A HREF="../../../com/tencent/tauth/Constants.html#UI_DIALOG"><CODE>Constants.UI_DIALOG</CODE></A>表示启动了对话框来完成交互。</li></DL>
</DD>
</DL>
<HR>

<A NAME="getAppFriends(com.tencent.tauth.IRequestListener)"><!-- --></A><H3>
getAppFriends</H3>
<PRE>
public void <B>getAppFriends</B>(<A HREF="../../../com/tencent/tauth/IRequestListener.html" title="com.tencent.tauth 中的接口">IRequestListener</A>&nbsp;listener)</PRE>
<DL>
<DD>获取应用内好友信息<br>
 <br>
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>listener</CODE> - 回调接口</DL>
</DD>
</DL>
<HR>

<A NAME="request(java.lang.String, Bundle, java.lang.String)"><!-- --></A><H3>
request</H3>
<PRE>
public JSONObject <B>request</B>(<A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;graphPath,
                          Bundle&nbsp;params,
                          <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;httpMethod)
                   throws <A HREF="file:/D:/Android/android-sdk/docs/reference/java/net/MalformedURLException.html?is-external=true" title="java.net 中的类或接口">MalformedURLException</A>,
                          <A HREF="file:/D:/Android/android-sdk/docs/reference/java/io/IOException.html?is-external=true" title="java.io 中的类或接口">IOException</A>,
                          JSONException,
                          <A HREF="../../../com/tencent/open/NetworkUnavailableException.html" title="com.tencent.open 中的类">NetworkUnavailableException</A>,
                          <A HREF="../../../com/tencent/open/HttpStatusException.html" title="com.tencent.open 中的类">HttpStatusException</A></PRE>
<DL>
<DD>发送同步请求调用腾讯开放API<br>
 <br>
 <b>注意，网络同步调用，请勿在主线程使用</b>
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>graphPath</CODE> - 腾讯GraphApi的资源路径，参看 <A HREF="../../../com/tencent/tauth/Constants.html#GRAPH_OPEN_ID"><CODE>Constants.GRAPH_OPEN_ID</CODE></A>等.<DD><CODE>params</CODE> - K-V结构的字符串参数，e.g. 使用参数{"format" : "json"}执行
            <A HREF="../../../com/tencent/tauth/Constants.html#GRAPH_OPEN_ID"><CODE>Constants.GRAPH_OPEN_ID</CODE></A>调用，访问的后台API为：
            https://openmobile.qq.com/oauth2.0/m_me?format=json<br>
            注意，使用本方法时 ，不需要再传入通用参数（@see <a href=
            "http://wiki.opensns.qq.com/wiki/%E3%80%90QQ%E7%99%BB%E5%BD%95%E3%80%91OpenAPI2.0%E8%B0%83%E7%94%A8%E8%AF%B4%E6%98%8E#2._.E8.B0.83.E7.94.A8OpenAPI.E6.8E.A5.E5.8F.A3"
            >OpenAPI调用说明_OAuth2.0</a>），SDK会自动使用
            <A HREF="../../../com/tencent/tauth/Tencent.html#getAccessToken()"><CODE>getAccessToken()</CODE></A>、 <A HREF="../../../com/tencent/tauth/Tencent.html#getAppId()"><CODE>getAppId()</CODE></A>和
            <A HREF="../../../com/tencent/tauth/Tencent.html#getOpenId()"><CODE>getOpenId()</CODE></A>
            作为access_token、oauth_consumer_key和openid的值。<DD><CODE>httpMethod</CODE> - 请求时使用的方法，@see <A HREF="../../../com/tencent/tauth/Constants.html#HTTP_GET"><CODE>Constants.HTTP_GET</CODE></A>、
            <A HREF="../../../com/tencent/tauth/Constants.html#HTTP_POST"><CODE>Constants.HTTP_POST</CODE></A>
<DT><B>返回：</B><DD>开放API返回的json格式的回应。<br>
         SDK调用开放API时，会自动加上{"format":"json"}参数，以指明Server返回格式为Json。
<DT><B>抛出：</B>
<DD><CODE><A HREF="file:/D:/Android/android-sdk/docs/reference/java/net/MalformedURLException.html?is-external=true" title="java.net 中的类或接口">MalformedURLException</A></CODE>
<DD><CODE><A HREF="file:/D:/Android/android-sdk/docs/reference/java/io/IOException.html?is-external=true" title="java.io 中的类或接口">IOException</A></CODE>
<DD><CODE>JSONException</CODE>
<DD><CODE><A HREF="../../../com/tencent/open/HttpStatusException.html" title="com.tencent.open 中的类">HttpStatusException</A></CODE>
<DD><CODE><A HREF="../../../com/tencent/open/NetworkUnavailableException.html" title="com.tencent.open 中的类">NetworkUnavailableException</A></CODE></DL>
</DD>
</DL>
<HR>

<A NAME="requestAsync(java.lang.String, Bundle, java.lang.String, com.tencent.tauth.IRequestListener, java.lang.Object)"><!-- --></A><H3>
requestAsync</H3>
<PRE>
public void <B>requestAsync</B>(<A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;graphPath,
                         Bundle&nbsp;params,
                         <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A>&nbsp;httpMethod,
                         <A HREF="../../../com/tencent/tauth/IRequestListener.html" title="com.tencent.tauth 中的接口">IRequestListener</A>&nbsp;listener,
                         <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/Object.html?is-external=true" title="java.lang 中的类或接口">Object</A>&nbsp;state)</PRE>
<DL>
<DD>发送异步调用请求访问腾讯开放API<br>
 <br>
 <b>注意<br>
 <li>本函数为异步调用，可以在主线程中使用。 <li>回调函数的执行线程非主线程</b><br>
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>graphPath</CODE> - <DD><CODE>params</CODE> - <DD><CODE>httpMethod</CODE> - <DD><CODE>listener</CODE> - 回调对象，用以回传结果。<DD><CODE>state</CODE> - 状态对象，将在回调时原样传回给 listener，供应用识别异步调用。SDK内部不访问该对象。<DT><B>另请参见：</B><DD><CODE>Tencent#request(String, Bundle, String)}</CODE>, 
<CODE>Tencent#request(String, Bundle, String)}</CODE>, 
<CODE>Tencent#request(String, Bundle, String)}</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="onActivityResult(int, int, Intent)"><!-- --></A><H3>
onActivityResult</H3>
<PRE>
public boolean <B>onActivityResult</B>(int&nbsp;requestCode,
                                int&nbsp;resultCode,
                                Intent&nbsp;data)</PRE>
<DL>
<DD>获取执行腾讯Activity（如：story打开的Activity）的结果的回调接口。<br>
 <br>
 <b>注意<br>
 <li>调用可能打开腾讯的Activity的接口（如：<A HREF="../../../com/tencent/tauth/Tencent.html#story(Activity, Bundle, com.tencent.tauth.IUiListener)"><CODE>story(Activity, Bundle, com.tencent.tauth.IUiListener)</CODE></A>、<A HREF="../../../com/tencent/tauth/Tencent.html#invite(Activity, Bundle, com.tencent.tauth.IUiListener)"><CODE>invite(Activity, Bundle, com.tencent.tauth.IUiListener)</CODE></A>、
 <A HREF="../../../com/tencent/tauth/Tencent.html#setAvatar(Activity, Bundle)"><CODE>setAvatar(Activity, Bundle)</CODE></A>等）， 需要重载<CODE>Activity#onActivityResult</CODE>，在其中调用本函数，否则，
 您传给该接口的回调（<A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口"><CODE>IUiListener</CODE></A>）有可能不被调用。 <br>
 <br><li>SDK 使用 <A HREF="../../../com/tencent/tauth/Constants.html#CODE_REQUEST_MIN"><CODE>Constants.CODE_REQUEST_MIN</CODE></A>、
 <A HREF="../../../com/tencent/tauth/Constants.html#CODE_REQUEST_MAX"><CODE>Constants.CODE_REQUEST_MAX</CODE></A> 之间的值来作为
 <CODE>Activity#startActivityForResult(Intent, int)</CODE>
 的requestCode，应用不可复用此区间内的值。</b>
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>requestCode</CODE> - <DD><CODE>resultCode</CODE> - <DD><CODE>data</CODE> - 
<DT><B>返回：</B><DD>ActivityResult是否已被SDK截获并消耗。<DT><B>另请参见：</B><DD><CODE>Activity#onActivityResult}</CODE>, 
<CODE>Activity#onActivityResult}</CODE>, 
<CODE>Activity#onActivityResult}</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="getSDKVersion()"><!-- --></A><H3>
getSDKVersion</H3>
<PRE>
public <A HREF="file:/D:/Android/android-sdk/docs/reference/java/lang/String.html?is-external=true" title="java.lang 中的类或接口">String</A> <B>getSDKVersion</B>()</PRE>
<DL>
<DD>获取SDK的版本号
<P>
<DD><DL>

<DT><B>返回：</B><DD>SDK平台+版本号</DL>
</DD>
</DL>
<HR>

<A NAME="setAvatar(Activity, Bundle)"><!-- --></A><H3>
setAvatar</H3>
<PRE>
public void <B>setAvatar</B>(Activity&nbsp;activity,
                      Bundle&nbsp;params)</PRE>
<DL>
<DD><B>已过时。</B>&nbsp;<I>该方法已经废弃，将会在将来某个版本中删除，请换成
             <A HREF="../../../com/tencent/tauth/Tencent.html#setAvatar(Activity, Bundle, com.tencent.tauth.IUiListener)"><CODE>setAvatar(Activity, Bundle, IUiListener)</CODE></A>。</I>
<P>
<DD>设置用户的QQ头像，传入图片的路径(picture)，会打开一个调整图片的编辑器，用户确认之后把所选区域设置为头像 <br>
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>activity</CODE> - <DD><CODE>params</CODE> - 必须包括 picture 字段，类型为字符串<br>
            另外可传入 returnActivity，可指定设置头像成功后返回到特定的 Activity， returnActivity
            的值类型为字符串，必须是完整的 Activity 类名，如：com.tencent.ReturnActivity<DT><B>另请参见：</B><DD><A HREF="../../../com/tencent/tauth/Tencent.html#setAvatar(Activity, Bundle, com.tencent.tauth.IUiListener)"><CODE>setAvatar(Activity, Bundle, IUiListener)</CODE></A>, 
<A HREF="../../../com/tencent/tauth/Tencent.html#setAvatar(Activity, Bundle, com.tencent.tauth.IUiListener, int, int)"><CODE>setAvatar(Activity, Bundle, IUiListener, int, int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setAvatar(Activity, Bundle, com.tencent.tauth.IUiListener)"><!-- --></A><H3>
setAvatar</H3>
<PRE>
public void <B>setAvatar</B>(Activity&nbsp;activity,
                      Bundle&nbsp;params,
                      <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</PRE>
<DL>
<DD>设置用户的QQ头像，传入图片的路径(picture)，会打开一个调整图片的编辑器，用户确认之后把所选区域设置为头像 <br>
 <br>
 <b>注意，如果需要设置QQ头像的返回结果，应用需要在调用setAvatar的activity中实现onActivityResult，<br>
 并回调 <A HREF="../../../com/tencent/tauth/Tencent.html#onActivityResult(int, int, Intent)"><CODE>onActivityResult(int, int, Intent)</CODE></A> 才能收到调用结果。</b>
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>activity</CODE> - 调用者Activity。<DD><CODE>params</CODE> - 必须包括 picture 字段，类型为字符串<br>
            另外可传入 returnActivity，可指定设置头像成功后返回到特定的 Activity， returnActivity
            的值类型为字符串，必须是完整的 Activity 类名，如：com.tencent.ReturnActivity <br><DD><CODE>listener</CODE> - 回调接口<DT><B>另请参见：</B><DD><A HREF="../../../com/tencent/tauth/Tencent.html#setAvatar(Activity, Bundle, com.tencent.tauth.IUiListener, int, int)"><CODE>setAvatar(Activity, Bundle, IUiListener, int, int)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="setAvatar(Activity, Bundle, com.tencent.tauth.IUiListener, int, int)"><!-- --></A><H3>
setAvatar</H3>
<PRE>
public void <B>setAvatar</B>(Activity&nbsp;activity,
                      Bundle&nbsp;params,
                      <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener,
                      int&nbsp;enterAnim,
                      int&nbsp;exitAnim)</PRE>
<DL>
<DD>设置用户的QQ头像，传入图片的路径(picture)，会打开一个调整图片的编辑器，用户确认之后把所选区域设置为头像 <br>
 <br>
 <b>注意，如果需要设置QQ头像的返回结果，应用需要在调用setAvatar的activity中实现onActivityResult，<br>
 并回调 <A HREF="../../../com/tencent/tauth/Tencent.html#onActivityResult(int, int, Intent)"><CODE>onActivityResult(int, int, Intent)</CODE></A> 才能收到调用结果。</b>
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>activity</CODE> - 调用者Activity。<DD><CODE>params</CODE> - 必须包括 picture 字段，类型为字符串<br>
            另外可传入 returnActivity，可指定设置头像成功后返回到特定的 Activity， returnActivity
            的值类型为字符串，必须是完整的 Activity 类名，如：com.tencent.ReturnActivity <br><DD><CODE>listener</CODE> - 回调接口<DD><CODE>enterAnim</CODE> - 进入动画的资源文件id, 不需要可填 0<DD><CODE>exitAnim</CODE> - 返回动画的资源文件id, 不需要可填 0<DT><B>另请参见：</B><DD><A HREF="../../../com/tencent/tauth/Tencent.html#setAvatar(Activity, Bundle, com.tencent.tauth.IUiListener)"><CODE>setAvatar(Activity, Bundle, IUiListener)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="shareToQQ(Activity, Bundle, com.tencent.tauth.IUiListener)"><!-- --></A><H3>
shareToQQ</H3>
<PRE>
public void <B>shareToQQ</B>(Activity&nbsp;activity,
                      Bundle&nbsp;params,
                      <A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口">IUiListener</A>&nbsp;listener)</PRE>
<DL>
<DD>分享消息或图片到QQ聊天窗口<br>
 <br>
 调用该方法后，会打开一个联系人/群/讨论组选择界面，用户选择要分享的目标之后， 分享内容将发送到对应的聊天窗口中<br>
<P>
<DD><DL>
<DT><B>参数：</B><DD><CODE>activity</CODE> - 调用者Activity。<DD><CODE>params</CODE> - 可包含title,imageUrl,targetUrl,summary,site等参数，详细说明请参看《接口调用说明.doc
            》等<DD><CODE>listener</CODE> - 回调接口</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="跳过导航链接"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>概述</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>软件包</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>类</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/Tencent.html"><FONT CLASS="NavBarFont1"><B>使用</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>树</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>已过时</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>索引</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>帮助</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../com/tencent/tauth/IUiListener.html" title="com.tencent.tauth 中的接口"><B>上一个类</B></A>&nbsp;
&nbsp;<A HREF="../../../com/tencent/tauth/UiError.html" title="com.tencent.tauth 中的类"><B>下一个类</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?com/tencent/tauth/Tencent.html" target="_top"><B>框架</B></A>  &nbsp;
&nbsp;<A HREF="Tencent.html" target="_top"><B>无框架</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>所有类</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>所有类</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  摘要：&nbsp;嵌套&nbsp;|&nbsp;字段&nbsp;|&nbsp;构造方法&nbsp;|&nbsp;<A HREF="#method_summary">方法</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
详细信息：&nbsp;字段&nbsp;|&nbsp;构造方法&nbsp;|&nbsp;<A HREF="#method_detail">方法</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
