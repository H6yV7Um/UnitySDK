
package com.tencent.connect.share;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;

import com.tencent.open.log.SLog;
import com.tencent.open.utils.AsynLoadImgBack;
import com.tencent.open.utils.Util;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.Bitmap.Config;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;

/**
 * 异步缩放和保存图片
 *
 * @author zivonchen
 */
public class AsynScaleCompressImage {
    private static final String TAG = SLog.TAG + ".AsynScaleCompressImage";
    private static final int UPLOAD_IMAGE_MAX_LENGTH = 140; // 需求规定图片要压缩为140像素再上传到服务器
    private static final int UOLOAD_QZONE_IMAGE_MAX_SHORT_SIDE_LENGTH = 640;// QZONE压缩,短边限制为640
    private static final int UPLOAD_QZONE_IMAGE_MAX_LONG_SIDE_LENGTH = 10000; // QZONE压缩,长边限制为10000
    private static final int UPLOAD_IMAGE_MSG_OK = 101; // 需求规定图片要压缩为140像素再上传到服务器
    private static final int UPLOAD_IMAGE_MSG_ERROR = 102; // 需求规定图片要压缩为140像素再上传到服务器


    /**QQShare
     * 缩放图片至140px, 然后将新的图片存储在temp年目录下, 新图片路径在saveBack回调的data变量中返回
     * @param activity
     * @param imgPath 需要缩放和处理的本地图片路径
     * @param asynLoadImgBack
     */
    public static final void scaleCompressImage(Context context, final String imgPath, final AsynLoadImgBack asynLoadImgBack) {
    	SLog.d(TAG,"scaleCompressImage");
    	if (TextUtils.isEmpty(imgPath)) {
    		// 路径为空
    		asynLoadImgBack.saved(AsynLoadImgBack.LOAD_IMAGE_PATH_NULL, null);
    		return;
    	}
    	if (!Util.hasSDCard()) {
    		// 没有sd卡
    		asynLoadImgBack.saved(AsynLoadImgBack.LOAD_IMAGE_NO_SDCARD, null);
    		return;
    	}
    	final Handler handler = new Handler(context.getMainLooper()) {

    		@Override
    		public void handleMessage(Message msg) {
    			switch (msg.what) {
    			case  UPLOAD_IMAGE_MSG_OK:
    				String url = (String)msg.obj;
    				asynLoadImgBack.saved(AsynLoadImgBack.LOAD_IMAGE_COMPLETED, url);
    				return;
    			case UPLOAD_IMAGE_MSG_ERROR:
    				int error_code = msg.arg1;
    				asynLoadImgBack.saved(error_code, null);
    				return;
    			}
    			super.handleMessage(msg);
    		}

    	};
    	new Thread(new Runnable() {

    		@Override
    		public void run() {
    			//final Bitmap bmp = BitmapFactory.decodeFile(imgPath);


    		    Bitmap bitmap = scaleBitmap(imgPath, UPLOAD_IMAGE_MAX_LENGTH);
                if (bitmap != null) {
                    String ALBUM_PATH = Environment.getExternalStorageDirectory() + "/tmp/"; //保存目录
                    String md5Name = Util.encrypt(imgPath);
                    String fileName = "share2qq_temp" + md5Name + ".jpg";
                    //Bitmap bitmap = scaleBitmap(bmp, UPLOAD_IMAGE_MAX_LENGTH);
                    String destFilePath = null;
                    if (!isBitMapNeedToCompress(imgPath,UPLOAD_IMAGE_MAX_LENGTH, UPLOAD_IMAGE_MAX_LENGTH)) {
        				SLog.d(TAG,"not out of bound,not compress!");
        				destFilePath = imgPath;
    				} else {
    					SLog.d(TAG,"out of bound,compress!");
    					destFilePath = compressBitmap(bitmap, ALBUM_PATH, fileName);
    				}
                    SLog.d(TAG, "-->destFilePath: " + destFilePath);

                    if (destFilePath != null) {
                        Message msg = handler.obtainMessage(UPLOAD_IMAGE_MSG_OK);
                        msg.obj = destFilePath;
                        handler.sendMessage(msg);
                        return;
                    }
                }
    			Message msg = handler.obtainMessage(UPLOAD_IMAGE_MSG_ERROR);
    			msg.arg1 = AsynLoadImgBack.LOAD_IMAGE_IMAGE_FORMAT_ERROR;
    			handler.sendMessage(msg);
    		}
    	}).start();
    }

    /**QZoneShare
     * 缩放图片,然后将新的图片存储在temp年目录下, 新图片路径在saveBack回调的data变量中返回
     * @param context
     * @param imgPath 需要缩放和处理的本地图片路径
     * @param asynLoadImgBack
     */
    public static final void batchScaleCompressImage(Context context, final ArrayList<String> imgPaths, final AsynLoadImgBack asynLoadImgBack) {
        SLog.d(TAG, "batchScaleCompressImage");
    	if (imgPaths == null) {
            // 路径为空
            asynLoadImgBack.saved(AsynLoadImgBack.LOAD_IMAGE_PATH_NULL, null);
            return;
        }
        /*if (!Util.hasSDCard()) {
            // 没有sd卡
            asynLoadImgBack.saved(AsynLoadImgBack.LOAD_IMAGE_NO_SDCARD, null);
            return;
        }*/
        final Handler handler = new Handler(context.getMainLooper()) {

            @Override
            public void handleMessage(Message msg) {
                switch (msg.what) {
                case  UPLOAD_IMAGE_MSG_OK:
                	ArrayList<String> imgPaths = msg.getData().getStringArrayList("images");
                    asynLoadImgBack.batchSaved(AsynLoadImgBack.LOAD_IMAGE_COMPLETED, imgPaths);
                    return;
                }
                super.handleMessage(msg);
            }
        };
        new Thread(new Runnable() {
            @Override
            public void run() {
            	for (int i = 0; i < imgPaths.size(); i++) {
            	    String imagePath = imgPaths.get(i);
					if (!Util.isValidUrl(imagePath) && Util.fileExists(imagePath)) {

						//final Bitmap bmp = BitmapFactory.decodeFile(imagePath);

						// 将本地图片压缩
					    Bitmap bitmap = scaleBitmap(imagePath, UPLOAD_QZONE_IMAGE_MAX_LONG_SIDE_LENGTH);
		                if (bitmap != null) {
		                    String ALBUM_PATH = Environment.getExternalStorageDirectory() + "/tmp/"; //保存目录
		                    String md5Name = Util.encrypt(imagePath);
		                    String fileName = "share2qzone_temp" + md5Name + ".jpg";
		                    // Bitmap bitmap = scaleBitmap(bmp, UPLOAD_QZONE_IMAGE_MAX_LENGTH);

		                    String destFilePath;
		                    if (!isBitMapNeedToCompress(imagePath,
		                    		UOLOAD_QZONE_IMAGE_MAX_SHORT_SIDE_LENGTH, UPLOAD_QZONE_IMAGE_MAX_LONG_SIDE_LENGTH)) {
		        				SLog.d(TAG,"not out of bound,not compress!");
		        				destFilePath = imagePath;
		    				} else {
		    					SLog.d(TAG,"out of bound, compress!");
		    					destFilePath = compressBitmap(bitmap, ALBUM_PATH, fileName);
		    				}

		                    if (destFilePath != null) {
		                        imgPaths.set(i, destFilePath);
		                    }
		                }
					}
				}
            	Message msg = handler.obtainMessage(UPLOAD_IMAGE_MSG_OK);
            	Bundle data = new Bundle();
            	data.putStringArrayList("images", imgPaths);
                msg.setData(data);
                handler.sendMessage(msg);
            }
        }).start();
    }

    /**
     * 缩放图片
     * @param bitmap 需要缩放的图片
     * @param maxLength 最大尺寸
     * @return 缩放后的图片
     */
    private static Bitmap scaleBitmap(Bitmap bitmap, int maxLength) {
        Matrix matrix = new Matrix();
        int width = bitmap.getWidth();
        int height = bitmap.getHeight();
        int longSide = width > height ? width : height;
        float scale = (float) maxLength / (float) longSide; // 缩放倍数
        matrix.postScale(scale, scale); // 长和宽放大缩小的比例
        return Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(),
                matrix, true);
    }

    /**
     *
     * @param bmp
     * @param folderPath 存放的文件夹
     * @param fileName 文件名称
     * @return
     */
    protected static final String compressBitmap(Bitmap bmp, String folderPath, String fileName) {
        File file = new File(folderPath);
        if (!file.exists()) {
            file.mkdirs();
        }
        final String imgUrl = new StringBuffer(folderPath).append(fileName).toString();

        file = new File(imgUrl);
        if (file.exists()) {
            file.delete();
        }
        if (bmp != null) {
            FileOutputStream fos = null;
            try {
                fos = new FileOutputStream(file);
                bmp.compress(CompressFormat.JPEG, 80, fos);
                fos.flush();
                fos.close();
                bmp.recycle();
                bmp = null;
                return imgUrl;
            } catch (FileNotFoundException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        return null;
    }
    /**
     * 检查BitMap是否超过像素限制
     * @param imgPath
     * @param maxSize
     * @return
     */
    private static final boolean isBitMapNeedToCompress(String imgPath,int maxShortSize, int maxLongSize){
    	 if (TextUtils.isEmpty(imgPath)) {
             return false;
         }
         BitmapFactory.Options options = new BitmapFactory.Options();
         options.inJustDecodeBounds = true;
        try {
            BitmapFactory.decodeFile(imgPath, options);
        } catch (OutOfMemoryError e) {
            e.printStackTrace();
        }
         int orgWidth = options.outWidth;
         int orgHeight = options.outHeight;
         if (options.mCancel || options.outWidth == -1
                 || options.outHeight == -1) {
             return false;
         }
         int longSide = orgWidth > orgHeight ? orgWidth : orgHeight;
         int shortSide =  orgWidth < orgHeight ? orgWidth : orgHeight;
         SLog.d(TAG, "longSide="+ longSide + "shortSide="+ shortSide);
         options.inPreferredConfig = Config.RGB_565;
         //只要有一条边超过限制，就压缩
         if (longSide > maxLongSize || shortSide > maxShortSize) {
        	 return true;
         }
    	return false;
    }
    /**
     * 缩放图片, 只会压缩, 不会放大
     * @param bitmap 需要缩放的图片
     * @param maxLength 最大尺寸
     * @return 缩放后的图片
     */
    public static final Bitmap scaleBitmap(String imgPath, int maxSize) {
        if (TextUtils.isEmpty(imgPath)) {
            return null;
        }
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        try {
            BitmapFactory.decodeFile(imgPath, options);   
        } catch (OutOfMemoryError e) {
            e.printStackTrace();
        }
        int orgWidth = options.outWidth;
        int orgHeight = options.outHeight;
        if (options.mCancel || options.outWidth == -1
                || options.outHeight == -1) {
            return null;
        }
        int longSide = orgWidth > orgHeight ? orgWidth : orgHeight;
        options.inPreferredConfig = Config.RGB_565;
        if (longSide > maxSize) {
            options.inSampleSize = computeSampleSize(options, -1, maxSize * maxSize);
        }
        // 这里再确保一次长宽不超过范围
        options.inJustDecodeBounds = false;
        Bitmap bmp = null;
        try {
            bmp = BitmapFactory.decodeFile(imgPath, options);
        }catch (OutOfMemoryError e) {
            e.printStackTrace();
        }
        if (bmp == null) {
            return null;
        }
        orgWidth = options.outWidth;
        orgHeight = options.outHeight;
        longSide = orgWidth > orgHeight ? orgWidth : orgHeight;
        if (longSide > maxSize) {
            return scaleBitmap(bmp, maxSize);
        }
        return bmp;
    }

    /*
     * zivon: framwork里ThumbnailUtils的方法
     * Compute the sample size as a function of minSideLength and
     * maxNumOfPixels. minSideLength is used to specify that minimal width or
     * height of a bitmap. maxNumOfPixels is used to specify the maximal size in
     * pixels that is tolerable in terms of memory usage.
     *
     * The function returns a sample size based on the constraints. Both size
     * and minSideLength can be passed in as IImage.UNCONSTRAINED, which
     * indicates no care of the corresponding constraint. The functions prefers
     * returning a sample size that generates a smaller bitmap, unless
     * minSideLength = IImage.UNCONSTRAINED.
     *
     * Also, the function rounds up the sample size to a power of 2 or multiple
     * of 8 because BitmapFactory only honors sample size this way. For example,
     * BitmapFactory downsamples an image by 2 even though the request is 3. So
     * we round up the sample size to avoid OOM.
     */
    public static final int computeSampleSize(BitmapFactory.Options options,
            int minSideLength, int maxNumOfPixels) {
        int initialSize = computeInitialSampleSize(options, minSideLength,
                maxNumOfPixels);

        int roundedSize;
        if (initialSize <= 8) {
            roundedSize = 1;
            while (roundedSize < initialSize) {
                roundedSize <<= 1;
            }
        } else {
            roundedSize = (initialSize + 7) / 8 * 8;
        }

        return roundedSize;
    }

    private static int computeInitialSampleSize(BitmapFactory.Options options,
            int minSideLength, int maxNumOfPixels) {
        double w = options.outWidth;
        double h = options.outHeight;

        int lowerBound = (maxNumOfPixels == UNCONSTRAINED) ? 1 : (int) Math
                .ceil(Math.sqrt(w * h / maxNumOfPixels));
        int upperBound = (minSideLength == UNCONSTRAINED) ? 128 : (int) Math
                .min(Math.floor(w / minSideLength),
                        Math.floor(h / minSideLength));

        if (upperBound < lowerBound) {
            // return the larger one when there is no overlapping zone.
            return lowerBound;
        }

        if ((maxNumOfPixels == UNCONSTRAINED)
                && (minSideLength == UNCONSTRAINED)) {
            return 1;
        } else if (minSideLength == UNCONSTRAINED) {
            return lowerBound;
        } else {
            return upperBound;
        }
    }
    private static final int UNCONSTRAINED = -1;
}
